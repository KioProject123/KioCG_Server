From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Wed, 5 Jun 2024 15:58:27 +0800
Subject: [PATCH] Monster persistent when picked up items


diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index dd0386b9f8d3e9b9e524d71f011b49ea42b8169b..4b0a2a121e3262d7ee02f83150b7d5445bc72fe0 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -643,6 +643,8 @@ public class WorldConfiguration extends ConfigurationPart {
                     public boolean canDropZombieSkull = true;
                     public boolean canDropPiglinSkull = true;
                 }
+
+                public boolean persistentWhenPickedUpItems = false;
             }
 
             public KiocgConfig.Entity.Animal animal;
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index d0718106f923189309cf725b7be3fe21af5389bd..adceb95b286c2e9c807b03844d020fb7fcf2cd6e 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -768,6 +768,7 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
     protected void setItemSlotAndDropWhenKilled(EquipmentSlot slot, ItemStack stack) {
         this.setItemSlot(slot, stack);
         this.setGuaranteedDrop(slot);
+        if (this.level().paperConfig().kiocgConfig.entity.monster.persistentWhenPickedUpItems) // KioCG
         this.persistenceRequired = true;
     }
 
@@ -883,6 +884,7 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
     public void checkDespawn() {
         if (this.level().getDifficulty() == Difficulty.PEACEFUL && this.shouldDespawnInPeaceful()) {
             this.discard(EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
+            if (!this.level().paperConfig().kiocgConfig.entity.monster.persistentWhenPickedUpItems) this.dropPickedUpItems(); // KioCG
         } else if (!this.isPersistenceRequired() && !this.requiresCustomPersistence()) {
             Player entityhuman = this.level().findNearbyPlayer(this, -1.0D, EntitySelector.PLAYER_AFFECTS_SPAWNING); // Paper - Affects Spawning API
 
@@ -898,10 +900,12 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
                 // Despawn if hard/soft limit is exceeded
                 if (despawnRangePair.hard().shouldDespawn(shape, dxSqr, dySqr, dzSqr, dy) && this.removeWhenFarAway(distanceSquared)) {
                     this.discard(EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
+                    if (!this.level().paperConfig().kiocgConfig.entity.monster.persistentWhenPickedUpItems) this.dropPickedUpItems(); // KioCG
                 }
                 if (despawnRangePair.soft().shouldDespawn(shape, dxSqr, dySqr, dzSqr, dy)) {
                     if (this.noActionTime > 600 && this.random.nextInt(800) == 0 && this.removeWhenFarAway(distanceSquared)) {
                         this.discard(EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
+                        if (!this.level().paperConfig().kiocgConfig.entity.monster.persistentWhenPickedUpItems) this.dropPickedUpItems(); // KioCG
                     }
                 } else {
                 // Paper end - Configurable despawn distances
@@ -914,6 +918,16 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
         }
     }
 
+    // KioCG start
+    private void dropPickedUpItems() {
+        this.forceDrops = true; // CraftBukkit
+        this.dropPreservedEquipment((itemstack) -> {
+            return !EnchantmentHelper.has(itemstack, EnchantmentEffectComponents.PREVENT_EQUIPMENT_DROP);
+        }).iterator();
+        this.forceDrops = false; // CraftBukkit
+    }
+    // KioCG end
+
     @Override
     protected final void serverAiStep() {
         ++this.noActionTime;

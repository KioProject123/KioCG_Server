From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Wed, 28 Feb 2024 23:17:21 +0800
Subject: [PATCH] Change container behavior


diff --git a/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java b/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java
index 3ef7292d60c142161e4b0ad64658a68d94b361b4..e3a932eda6399fe0cf3b5d34a2b8d9ee8f8860dc 100644
--- a/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java
@@ -205,6 +205,7 @@ public class BrewingStandMenu extends AbstractContainerMenu {
 
         public static boolean mayPlaceItem(ItemStack stack) {
             if (!io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeCanUse.allowed(net.minecraft.world.inventory.MenuType.BREWING_STAND, stack)) return false; // KioCG
+            if (true) return PotionBrewing.isIngredient(stack); // KioCG - 燃料槽允许放置材料
             return stack.is(Items.BLAZE_POWDER);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index 490824934c5d2950b9638753d6fefb770a0053aa..d23814ddd08f51ca35a9aa9d35417d684b407aed 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -142,6 +142,8 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         // Paper end
         Map<Item, Integer> map = Maps.newLinkedHashMap();
 
+        // KioCG start
+        /*
         AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.LAVA_BUCKET, 20000);
         AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.COAL_BLOCK, 16000);
         AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.BLAZE_ROD, 2400);
@@ -201,6 +203,11 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.AZALEA, 100);
         AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.FLOWERING_AZALEA, 100);
         AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.MANGROVE_ROOTS, 300);
+        */
+        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.COAL, 200);
+        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.CHARCOAL, 200);
+        // KioCG end
+
         // Paper start - cache burn durations
         cachedBurnDurations = com.google.common.collect.ImmutableMap.copyOf(map);
         return cachedBurnDurations;
@@ -360,7 +367,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
 
                 blockEntity.litTime = furnaceBurnEvent.getBurnTime();
                 blockEntity.litDuration = blockEntity.litTime;
-                if (blockEntity.isLit() && furnaceBurnEvent.isBurning()) {
+                if (false && blockEntity.isLit() && furnaceBurnEvent.isBurning()) { // KioCG - 燃烧完成后再扣除燃料
                     // CraftBukkit end
                     flag1 = true;
                     if (flag3 && furnaceBurnEvent.willConsumeFuel()) { // Paper
@@ -393,9 +400,32 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
                 if (blockEntity.cookingProgress >= blockEntity.cookingTotalTime) { // Paper - cook speed multiplier API
                     blockEntity.cookingProgress = 0;
                     blockEntity.cookingTotalTime = AbstractFurnaceBlockEntity.getTotalCookTime(world, blockEntity.recipeType, blockEntity, blockEntity.cookSpeedMultiplier); // Paper
-                    if (AbstractFurnaceBlockEntity.burn(blockEntity.level, blockEntity.worldPosition, world.registryAccess(), recipeholder, blockEntity.items, i)) { // CraftBukkit
+
+                    // KioCG start
+                    boolean burned = false;
+                    while (AbstractFurnaceBlockEntity.burn(blockEntity.level, blockEntity.worldPosition, world.registryAccess(), recipeholder, blockEntity.items, i)) { // CraftBukkit
                         blockEntity.setRecipeUsed(recipeholder);
+                        burned = true;
+                        if (blockEntity.items.get(0).isEmpty()) break;
+                    }
+
+                    if (burned) {
+                        ((AbstractFurnaceBlockEntity) blockEntity).getRecipesToAwardAndPopExperience((ServerLevel) world, new Vec3(blockEntity.worldPosition.getX() + 0.5D, blockEntity.worldPosition.getY() + 1.0D, blockEntity.worldPosition.getZ() + 0.5D));
+                        blockEntity.recipesUsed.clear();
+
+                        // 燃烧完成后再扣除燃料
+                        if (!itemstack.isEmpty()) {
+                            Item item = itemstack.getItem();
+
+                            itemstack.shrink(1);
+                            if (itemstack.isEmpty()) {
+                                Item item1 = item.getCraftingRemainingItem();
+
+                                blockEntity.items.set(1, item1 == null ? ItemStack.EMPTY : new ItemStack(item1));
+                            }
+                        }
                     }
+                    // KioCG end
 
                     flag1 = true;
                 }
@@ -460,13 +490,16 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
             itemstack1 = CraftItemStack.asNMSCopy(result);
 
             if (!itemstack1.isEmpty()) {
-                if (itemstack2.isEmpty()) {
-                    nonnulllist.set(2, itemstack1.copy());
-                } else if (CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
-                    itemstack2.grow(itemstack1.getCount());
-                } else {
-                    return false;
-                }
+                // KioCG start
+                net.minecraft.world.Containers.dropItemStack(world, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), itemstack1);
+                // if (itemstack2.isEmpty()) {
+                //     nonnulllist.set(2, itemstack1.copy());
+                // } else if (CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
+                //     itemstack2.grow(itemstack1.getCount());
+                // } else {
+                //     return false;
+                // }
+                // KioCG end
             }
 
             /*
@@ -513,6 +546,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
 
     @Override
     public int[] getSlotsForFace(Direction side) {
+        if (true) return new int[0]; // KioCG - 阻止漏斗交互
         return side == Direction.DOWN ? AbstractFurnaceBlockEntity.SLOTS_FOR_DOWN : (side == Direction.UP ? AbstractFurnaceBlockEntity.SLOTS_FOR_UP : AbstractFurnaceBlockEntity.SLOTS_FOR_SIDES);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
index 9117e6013b6832ac368996fc1802fed7468b5541..fc08a4ba7ffcf25e5a6366baa648bfeea8b12956 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -153,6 +153,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
         if (blockEntity.brewTime <= 0 && !blockEntity.shouldTick) return; else blockEntity.shouldTick = false; // KioCG - 优化未燃烧的tick
         ItemStack itemstack = (ItemStack) blockEntity.items.get(4);
 
+        blockEntity.fuel = 20; // KioCG - 总是最大燃料值
         if (blockEntity.fuel <= 0 && itemstack.is(Items.BLAZE_POWDER)) {
             // CraftBukkit start
             BrewingStandFuelEvent event = new BrewingStandFuelEvent(CraftBlock.at(world, pos), CraftItemStack.asCraftMirror(itemstack), 20);
@@ -279,9 +280,17 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
         }
         // CraftBukkit end
 
+        ItemStack fuel = nonnulllist.get(4); // KioCG
         for (int i = 0; i < 3; ++i) {
             // CraftBukkit start - validate index in case it is cleared by plugins
             if (i < brewResults.size()) {
+                // KioCG start
+                if (fuel.isEmpty()) {
+                    Containers.dropItemStack(world, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), CraftItemStack.asNMSCopy(brewResults.get(i)));
+                    nonnulllist.set(i, ItemStack.EMPTY);
+                    continue;
+                }
+                // KioCG end
                 nonnulllist.set(i, CraftItemStack.asNMSCopy(brewResults.get(i)));
             } else {
                 nonnulllist.set(i, ItemStack.EMPTY);
@@ -300,6 +309,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
             }
         }
 
+        if (!fuel.isEmpty() && itemstack.isEmpty()) itemstack = fuel.copyAndClear(); // KioCG - 燃料槽物品移入材料槽
         nonnulllist.set(3, itemstack);
         world.levelEvent(1035, blockposition, 0);
     }
@@ -352,12 +362,33 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
 
     @Override
     public boolean canPlaceItem(int slot, ItemStack stack) {
+    // KioCG start
+        boolean vanillaRecipeCanUse = io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeCanUse.allowed(net.minecraft.world.inventory.MenuType.BREWING_STAND, stack);
+        if (slot == 3) {
+            return vanillaRecipeCanUse && PotionBrewing.isIngredient(stack) || PotionBrewing.isCustomIngredient(stack);
+        } else if (slot == 4) {
+            // 燃料槽允许放置材料
+            return vanillaRecipeCanUse && PotionBrewing.isIngredient(stack) || PotionBrewing.isCustomIngredient(stack);
+        } else {
+            if (!this.getItem(slot).isEmpty()) {
+                return false;
+            } else if (PotionBrewing.isCustomInput(stack)) {
+                return true;
+            } else {
+                return vanillaRecipeCanUse && (stack.is(Items.POTION) || stack.is(Items.SPLASH_POTION) || stack.is(Items.LINGERING_POTION) || stack.is(Items.GLASS_BOTTLE));
+            }
+        }
+    }
+
+    public boolean canPlaceItem0(int slot, ItemStack stack) {
+    // KioCG end
         if ((slot == 4 || (slot == 3 ? !PotionBrewing.isCustomIngredient(stack) : !PotionBrewing.isCustomInput(stack))) && !io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeCanUse.allowed(net.minecraft.world.inventory.MenuType.BREWING_STAND, stack)) return false; // KioCG
         return slot == 3 ? PotionBrewing.isIngredient(stack) : (slot == 4 ? stack.is(Items.BLAZE_POWDER) : (stack.is(Items.POTION) || stack.is(Items.SPLASH_POTION) || stack.is(Items.LINGERING_POTION) || stack.is(Items.GLASS_BOTTLE) || PotionBrewing.isCustomInput(stack)) && this.getItem(slot).isEmpty()); // Paper
     }
 
     @Override
     public int[] getSlotsForFace(Direction side) {
+        if (true) return new int[0]; // KioCG - 阻止漏斗交互
         return side == Direction.UP ? BrewingStandBlockEntity.SLOTS_FOR_UP : (side == Direction.DOWN ? BrewingStandBlockEntity.SLOTS_FOR_DOWN : BrewingStandBlockEntity.SLOTS_FOR_SIDES);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
index fd822ac3b3cff8b697569dd28a96e0ff26d5d9b5..f929c90c470bd7fd0b40d915a3101e7e73e7f4f0 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -73,6 +73,12 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
                         return recipeholder.value().assemble(inventorysubcontainer, world.registryAccess());
                     }).orElse(itemstack);
 
+                    // KioCG start
+                    if (itemstack1 == itemstack) {
+                        campfire.cookingTime[i] = Integer.MAX_VALUE;
+                        continue;
+                    }
+                    // KioCG end
                     if (itemstack1.isItemEnabled(world.enabledFeatures())) {
                         // CraftBukkit start - fire BlockCookEvent
                         CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
@@ -96,6 +102,8 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
                         result = blockCookEvent.getResult();
                         itemstack1 = CraftItemStack.asNMSCopy(result);
                         // CraftBukkit end
+                        // KioCG start
+                        /*
                         // Paper start
                         double deviation = 0.05F * RandomSource.GAUSSIAN_SPREAD_FACTOR;
                         while (!itemstack1.isEmpty()) {
@@ -104,7 +112,16 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
                             world.addFreshEntity(droppedItem);
                         }
                         // Paper end
-                        campfire.items.set(i, ItemStack.EMPTY);
+                        */
+
+                        Optional<RecipeHolder<CampfireCookingRecipe>> optional = campfire.quickCheck.getRecipeFor(new SimpleContainer(new ItemStack[]{itemstack1}), world);
+                        if (optional.isPresent()) {
+                            campfire.placeFood(null, itemstack1, ((CampfireCookingRecipe) ((RecipeHolder) optional.get()).value()).getCookingTime());
+                        } else {
+                            campfire.items.set(i, itemstack1);
+                            campfire.cookingTime[i] = Integer.MAX_VALUE;
+                        }
+                        // KioCG end
                         world.sendBlockUpdated(pos, state, state, 3);
                         world.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(state));
                     }

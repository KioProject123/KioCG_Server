From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Tue, 5 Mar 2024 10:34:43 +0800
Subject: [PATCH] The Long Dark


diff --git a/src/main/java/com/kiocg/player/ColdData.java b/src/main/java/com/kiocg/player/ColdData.java
new file mode 100644
index 0000000000000000000000000000000000000000..b8071513e17d424e7ef524ae1bfe55be376fb0cf
--- /dev/null
+++ b/src/main/java/com/kiocg/player/ColdData.java
@@ -0,0 +1,106 @@
+package com.kiocg.player;
+
+import io.papermc.paper.configuration.WorldConfiguration;
+import net.minecraft.core.BlockPos;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.protocol.game.ClientboundSetExperiencePacket;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.util.Mth;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LightLayer;
+
+public class ColdData {
+    public static final int MAX_VALUE = 60 * 20 * 10;
+
+    private Player entityhuman;
+    private int coldValue = MAX_VALUE;
+
+    public ColdData(Player entityhuman) {
+        org.apache.commons.lang.Validate.notNull(entityhuman);
+        this.entityhuman = entityhuman;
+    }
+
+    public int getColdValue() {
+        return coldValue;
+    }
+
+    public void setColdValue(int value) {
+        coldValue = value;
+    }
+
+    public void addColdValue(int add) {
+        coldValue = Mth.clamp(coldValue + add, 0, MAX_VALUE);
+    }
+
+    public float getColdProgress() {
+        return (float) coldValue / MAX_VALUE;
+    }
+
+    public boolean isFrozen() {
+        return coldValue <= 0 && !entityhuman.getAbilities().invulnerable;
+    }
+
+    public boolean isInWater;
+    public boolean isInLava;
+
+    public void tick() {
+        if (!entityhuman.getAbilities().invulnerable) {
+            final Level world = entityhuman.level();
+            final BlockPos pos = entityhuman.blockPosition();
+            final WorldConfiguration.KiocgConfig.TheLongDark theLongDark = world.paperConfig().kiocgConfig.theLongDark;
+
+            double ambientTemperature = theLongDark.coldValue.ambientTemperatureBase;
+            if (theLongDark.coldValue.ambientSkyDarkenMultiplier != 0) {
+                ambientTemperature += world.getSkyDarken() * theLongDark.coldValue.ambientSkyDarkenMultiplier * world.getBrightness(LightLayer.SKY, pos);
+            }
+            if (theLongDark.coldValue.biomeTemperatureMultiplier != 0) {
+                ambientTemperature += (world.getBiome(pos).value().getTemperature(pos) + theLongDark.coldValue.biomeTemperatureOffset) * theLongDark.coldValue.biomeTemperatureMultiplier;
+            }
+
+            double playerTemperature = theLongDark.coldValue.playerTemperatureBase;
+            if (theLongDark.coldValue.playerLightBlockMultiplier != 0.0) {
+                int blockLight = world.getBrightness(LightLayer.BLOCK, pos);
+                playerTemperature += Math.min(blockLight, 12) * theLongDark.coldValue.playerLightBlockMultiplier;
+            }
+
+            if (theLongDark.coldValue.isInWaterOrBubble != 0 && (this.isInWater || entityhuman.isInPowderSnow || entityhuman.isInWaterOrBubble())) {
+                playerTemperature += theLongDark.coldValue.isInWaterOrBubble;
+            } else if (theLongDark.coldValue.isInRain != 0 && entityhuman.isInRain()) {
+                playerTemperature += theLongDark.coldValue.isInRain;
+            }
+
+            if (theLongDark.coldValue.isInLava != 0 && (this.isInLava || entityhuman.isInLava())) {
+                playerTemperature += theLongDark.coldValue.isInLava;
+            } else if (theLongDark.coldValue.isOnFire != 0) {
+                int remainingFireTicks = entityhuman.getRemainingFireTicks();
+                if (remainingFireTicks > 0) {
+                    playerTemperature += theLongDark.coldValue.isOnFire;
+                }
+            }
+
+            double finalTemperature = (playerTemperature + ambientTemperature) * theLongDark.coldValue.finalTemperatureMultiplier;
+            addColdValue((int) finalTemperature);
+            ((ServerPlayer) entityhuman).connection.send(new ClientboundSetExperiencePacket(getColdProgress(), entityhuman.totalExperience, entityhuman.experienceLevel));
+        }
+
+        isInWater = false;
+        isInLava = false;
+    }
+
+    public void reset() {
+        coldValue = MAX_VALUE;
+        isInWater = false;
+        isInLava = false;
+    }
+
+    public void readAdditionalSaveData(CompoundTag nbt) {
+        if (nbt.contains("KioCG.ColdValue")) {
+            coldValue = nbt.getInt("KioCG.ColdValue");
+        }
+    }
+
+    public void addAdditionalSaveData(CompoundTag nbt) {
+        nbt.putInt("KioCG.ColdValue", coldValue);
+    }
+}
diff --git a/src/main/java/com/kiocg/player/ThirstData.java b/src/main/java/com/kiocg/player/ThirstData.java
new file mode 100644
index 0000000000000000000000000000000000000000..c684e63291e85bdd30bd4ba72bbc006f67be69c5
--- /dev/null
+++ b/src/main/java/com/kiocg/player/ThirstData.java
@@ -0,0 +1,97 @@
+package com.kiocg.player;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.util.Mth;
+import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.effect.MobEffects;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.player.Player;
+
+public class ThirstData {
+    public static final int MAX_VALUE = 10;
+
+    private Player entityhuman;
+    private int thirstValue = MAX_VALUE;
+    private double thirstRegain;
+
+    public ThirstData(Player entityhuman) {
+        org.apache.commons.lang.Validate.notNull(entityhuman);
+        this.entityhuman = entityhuman;
+    }
+
+    public int getThirstValue() {
+        return thirstValue;
+    }
+
+    public void setThirstValue(int value) {
+        thirstValue = value;
+    }
+
+    public void addThirstValue(int add) {
+        thirstValue = Mth.clamp(thirstValue + add, 0, MAX_VALUE);
+    }
+
+    public double getThirstRegain() {
+        return thirstRegain;
+    }
+
+    public void setThirstRegain(double value) {
+        thirstRegain = value;
+    }
+
+    public void addThirstRegain(double add) {
+        thirstRegain += add;
+    }
+
+    private int getThirstProgress() {
+        return 300 / 10 * (thirstValue - 1) + 8;
+    }
+
+    public boolean isThirsty() {
+        return thirstValue <= 0 && !entityhuman.getAbilities().invulnerable;
+    }
+
+    public void tick() {
+        if (!entityhuman.getAbilities().invulnerable) {
+            if (entityhuman.level().getBiome(entityhuman.blockPosition()).value().climateSettings.temperature() >= 2.0) {
+                addThirstRegain(entityhuman.level().paperConfig().kiocgConfig.theLongDark.thirstValue.highTemperatureBiomeThirst);
+            }
+
+            int quotient = (int) thirstRegain / 20;
+            if (quotient > 0) {
+                addThirstRegain(-20 * quotient);
+            }
+
+            final int before = thirstValue;
+            addThirstValue(-quotient);
+            if (entityhuman instanceof net.minecraft.server.level.ServerPlayer serverplayer && before > 3 && thirstValue <= 3) {
+                serverplayer.connection.send(new net.minecraft.network.protocol.game.ClientboundSoundEntityPacket(net.minecraft.core.registries.BuiltInRegistries.SOUND_EVENT.wrapAsHolder(net.minecraft.sounds.SoundEvents.HUSK_AMBIENT), net.minecraft.sounds.SoundSource.MASTER, serverplayer, 1.0F, 1.75F, 2L));
+            }
+
+            if (thirstValue <= 3 && entityhuman.tickCount % 10 == 0) {
+                if (!entityhuman.hasEffect(MobEffects.WEAKNESS) || entityhuman.getEffect(MobEffects.WEAKNESS).getAmplifier() == 0 && entityhuman.getEffect(MobEffects.WEAKNESS).endsWithin(20)) {
+                    entityhuman.addEffect(new MobEffectInstance(MobEffects.WEAKNESS, 20, 0));
+                }
+            }
+
+            this.entityhuman.getEntityData().set(Entity.DATA_AIR_SUPPLY_ID, getThirstProgress(), true);
+        }
+    }
+
+    public void reset() {
+        thirstValue = MAX_VALUE;
+        thirstRegain = 0.0;
+    }
+
+    public void readAdditionalSaveData(CompoundTag nbt) {
+        if (nbt.contains("KioCG.ThirstValue")) {
+            thirstValue = nbt.getInt("KioCG.ThirstValue");
+            thirstRegain = nbt.getDouble("KioCG.ThirstRegain");
+        }
+    }
+
+    public void addAdditionalSaveData(CompoundTag nbt) {
+        nbt.putInt("KioCG.ThirstValue", thirstValue);
+        nbt.putDouble("KioCG.ThirstRegain", thirstRegain);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index 89ceed996d77d63b7e27ad06ac434b4f6a1b47f9..ee0695b9f95dd4aa541bbe93f9a60d438da3f8c1 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -555,6 +555,38 @@ public class WorldConfiguration extends ConfigurationPart {
     public class KiocgConfig extends ConfigurationPart {
         public boolean deathItemsOnlyPickedUpByOneself = false;
         public boolean removeAutomationGameplay = true;
+
+        public TheLongDark theLongDark;
+        public class TheLongDark extends ConfigurationPart {
+            public double frozenTickDamageMultiplier = 0.01;
+
+            public ColdValue coldValue;
+            public class ColdValue extends ConfigurationPart {
+                public double ambientTemperatureBase = 0;
+                public double ambientSkyDarkenMultiplier = -0.15;
+                public double biomeTemperatureOffset = -0.65;
+                public double biomeTemperatureMultiplier = 30;
+
+                public double playerTemperatureBase = 0;
+                public double playerLightBlockMultiplier = 5;
+                public double isInWaterOrBubble = -35;
+                public double isInRain = -15;
+                public double isInLava = 300;
+                public double isOnFire = 10;
+
+                public double finalTemperatureMultiplier = 1.0;
+            }
+
+            public ThirstValue thirstValue;
+            public class ThirstValue extends ConfigurationPart {
+                public double thirstRegainMultiplierHealth = 1.0;
+                public double thirstRegainMultiplierFood = 2.0;
+                public double highTemperatureBiomeThirst = 0.02;
+            }
+
+            public int campfireExtinguishingOne = -1;
+            public int campfireExtinguishingTwo = -1;
+        }
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 593e06708f8bf9320c5f8835afbf0dbfd1c2141b..3fa64d67b00a7864810403968602d2bf0619f382 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -892,7 +892,7 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
                 this.updateScoreForCriteria(ObjectiveCriteria.LEVEL, Mth.ceil((float) this.lastRecordedLevel));
             }
 
-            if (this.totalExperience != this.lastSentExp) {
+            if (false && this.totalExperience != this.lastSentExp) { // KioCG - cold system
                 this.lastSentExp = this.totalExperience;
                 this.connection.send(new ClientboundSetExperiencePacket(this.experienceProgress, this.totalExperience, this.experienceLevel));
             }
@@ -2926,6 +2926,8 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
         this.setRemainingFireTicks(0);
         this.fallDistance = 0;
         this.foodData = new FoodData(this);
+        this.coldData = new com.kiocg.player.ColdData(this); // KioCG
+        this.thirstData = new com.kiocg.player.ThirstData(this); // KioCG
         this.experienceLevel = this.newLevel;
         this.totalExperience = this.newTotalExp;
         this.experienceProgress = 0;
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index d2aa2b4c05938515c79ea2365c7dca3148aa2a2a..1092d7acd21c8842375f20943cd3304186e34314 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -882,7 +882,7 @@ public abstract class PlayerList {
         entityplayer1.connection.teleport(CraftLocation.toBukkit(entityplayer1.position(), worldserver1.getWorld(), entityplayer1.getYRot(), entityplayer1.getXRot())); // CraftBukkit
         entityplayer1.connection.send(new ClientboundSetDefaultSpawnPositionPacket(worldserver.getSharedSpawnPos(), worldserver.getSharedSpawnAngle()));
         entityplayer1.connection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
-        entityplayer1.connection.send(new ClientboundSetExperiencePacket(entityplayer1.experienceProgress, entityplayer1.totalExperience, entityplayer1.experienceLevel));
+        entityplayer1.connection.send(new ClientboundSetExperiencePacket(entityplayer1.coldData.getColdProgress(), entityplayer1.totalExperience, entityplayer1.experienceLevel)); // KioCG - cold system
         this.sendActivePlayerEffects(entityplayer1);
         this.sendLevelInfo(entityplayer1, worldserver);
         this.sendPlayerPermissionLevel(entityplayer1);
@@ -931,6 +931,8 @@ public abstract class PlayerList {
         // Paper start - Add PlayerPostRespawnEvent
         if (isRespawn) {
             cserver.getPluginManager().callEvent(new com.destroystokyo.paper.event.player.PlayerPostRespawnEvent(entityplayer.getBukkitEntity(), location, isBedSpawn));
+            entityplayer.coldData.reset(); // KioCG
+            entityplayer.thirstData.reset(); // KioCG
         }
         // Paper end - Add PlayerPostRespawnEvent
 
diff --git a/src/main/java/net/minecraft/world/effect/SaturationMobEffect.java b/src/main/java/net/minecraft/world/effect/SaturationMobEffect.java
index 7b415dca88f50dc472fe4be96e5ef0996f117913..742177e7d9246c259065216ca0483ddd20a880eb 100644
--- a/src/main/java/net/minecraft/world/effect/SaturationMobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/SaturationMobEffect.java
@@ -16,6 +16,11 @@ class SaturationMobEffect extends InstantenousMobEffect {
     @Override
     public boolean applyEffectTick(LivingEntity entity, int amplifier) {
         if (!entity.level().isClientSide && entity instanceof Player entityhuman) {
+            // KioCG start
+            entityhuman.coldData.addColdValue(5 * (amplifier + 1));
+            if (true) return true;
+            // KioCG end
+
             // CraftBukkit start
             int oldFoodLevel = entityhuman.getFoodData().foodLevel;
             org.bukkit.event.entity.FoodLevelChangeEvent event = CraftEventFactory.callFoodLevelChangeEvent(entityhuman, amplifier + 1 + oldFoodLevel);
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 83f3ffdd8fa901b3de580d2359cdb5ead0d762cb..38f3f368a50cc0e1f0638424e4e92b264ee64abd 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -363,7 +363,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     public static final int FLAG_INVISIBLE = 5;
     protected static final int FLAG_GLOWING = 6;
     protected static final int FLAG_FALL_FLYING = 7;
-    private static final EntityDataAccessor<Integer> DATA_AIR_SUPPLY_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.INT);
+    public static final EntityDataAccessor<Integer> DATA_AIR_SUPPLY_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.INT); // KioCG - private -> public
     private static final EntityDataAccessor<Optional<Component>> DATA_CUSTOM_NAME = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.OPTIONAL_COMPONENT);
     private static final EntityDataAccessor<Boolean> DATA_CUSTOM_NAME_VISIBLE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_SILENT = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
@@ -3301,6 +3301,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     }
 
     public int getAirSupply() {
+        if (this instanceof ServerPlayer player) return player.getBukkitEntity().realAir; // KioCG
         return (Integer) this.entityData.get(Entity.DATA_AIR_SUPPLY_ID);
     }
 
@@ -3311,10 +3312,11 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         if (this.valid) {
             event.getEntity().getServer().getPluginManager().callEvent(event);
         }
-        if (event.isCancelled() && this.getAirSupply() != air) {
+        if (event.isCancelled() && this.getAirSupply() != air && !(this instanceof ServerPlayer)) { // KioCG
             this.entityData.markDirty(Entity.DATA_AIR_SUPPLY_ID);
             return;
         }
+        if (this instanceof ServerPlayer player) { player.getBukkitEntity().realAir = event.getAmount(); } else // KioCG
         this.entityData.set(Entity.DATA_AIR_SUPPLY_ID, event.getAmount());
         // CraftBukkit end
     }
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index b9cef93fe382b666bec04ca95eeaf2d8acbb3c40..8d1b5ea9c657603e1823e7c35e25fd726fc234ce 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -1356,6 +1356,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
         // Paper end
         float f1 = this.getHealth();
 
+        if (!(this instanceof net.minecraft.world.entity.player.Player player) || !player.thirstData.isThirsty()) { // KioCG
         if (f1 > 0.0F) {
             EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), f, regainReason, isFastRegen); // Paper
             // Suppress during worldgen
@@ -1365,10 +1366,11 @@ public abstract class LivingEntity extends Entity implements Attackable {
 
             if (!event.isCancelled()) {
                 this.setHealth((float) (this.getHealth() + event.getAmount()));
+                if (this instanceof net.minecraft.world.entity.player.Player player) player.thirstData.addThirstRegain(Math.max(this.getHealth() - f1, 0) * this.level().paperConfig().kiocgConfig.theLongDark.thirstValue.thirstRegainMultiplierHealth); // KioCG
             }
             // CraftBukkit end
         }
-
+        } // KioCG
     }
 
     public float getHealth() {
@@ -3480,17 +3482,23 @@ public abstract class LivingEntity extends Entity implements Attackable {
         if (!this.level().isClientSide && !this.isDeadOrDying() && !this.freezeLocked) { // Paper - Freeze Tick Lock API
             int i = this.getTicksFrozen();
 
-            if (this.isInPowderSnow && this.canFreeze()) {
-                this.setTicksFrozen(Math.min(this.getTicksRequiredToFreeze(), i + 1));
+            if (this.isInPowderSnow && this.canFreeze() || this instanceof net.minecraft.world.entity.player.Player player && player.coldData.isFrozen()) { // KioCG
+                this.setTicksFrozen(i + 1); // KioCG - 不要限制最大值
             } else {
-                this.setTicksFrozen(Math.max(0, i - 2));
+                this.setTicksFrozen(Math.min(this.getTicksRequiredToFreeze(), Math.max(0, i - 2))); // KioCG - 还原最大值设定, 防止长时间冻结
             }
         }
 
         this.removeFrost();
         this.tryAddFrost();
         if (!this.level().isClientSide && this.tickCount % 40 == 0 && this.isFullyFrozen() && this.canFreeze()) {
-            this.hurt(this.damageSources().freeze(), 1.0F);
+            // KioCG start
+            float increase = 0.0F;
+            if (this instanceof net.minecraft.world.entity.player.Player player && player.coldData.isFrozen()) {
+                increase = (this.getTicksFrozen() - this.getTicksRequiredToFreeze()) * (float) this.level().paperConfig().kiocgConfig.theLongDark.frozenTickDamageMultiplier;
+            }
+            this.hurt(this.damageSources().freeze(), 1.0F + increase);
+            // KioCG end
         }
 
         this.level().getProfiler().pop();
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 54ba25632c2a9e1c93a5b3a0b92e5280864c49d6..4a29117cedb2b0ab02c2e1b13c07feceadc1ee48 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -161,6 +161,8 @@ public abstract class Player extends LivingEntity {
     public final InventoryMenu inventoryMenu;
     public AbstractContainerMenu containerMenu;
     protected FoodData foodData = new FoodData(this); // CraftBukkit - add "this" to constructor
+    public com.kiocg.player.ColdData coldData = new com.kiocg.player.ColdData(this); // KioCG
+    public com.kiocg.player.ThirstData thirstData = new com.kiocg.player.ThirstData(this); // KioCG
     protected int jumpTriggerTime;
     public float oBob;
     public float bob;
@@ -293,6 +295,8 @@ public abstract class Player extends LivingEntity {
         this.moveCloak();
         if (!this.level().isClientSide) {
             this.foodData.tick(this);
+            this.coldData.tick(); // KioCG
+            this.thirstData.tick(); // KioCG
             this.awardStat(Stats.PLAY_TIME);
             this.awardStat(Stats.TOTAL_WORLD_TIME);
             if (this.isAlive()) {
@@ -887,6 +891,10 @@ public abstract class Player extends LivingEntity {
 
         this.setScore(nbt.getInt("Score"));
         this.foodData.readAdditionalSaveData(nbt);
+        // KioCG start
+        this.coldData.readAdditionalSaveData(nbt);
+        this.thirstData.readAdditionalSaveData(nbt);
+        // KioCG end
         this.abilities.loadSaveData(nbt);
         this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue((double) this.abilities.getWalkingSpeed());
         if (nbt.contains("EnderItems", 9)) {
@@ -936,6 +944,10 @@ public abstract class Player extends LivingEntity {
         nbt.putInt("XpSeed", this.enchantmentSeed);
         nbt.putInt("Score", this.getScore());
         this.foodData.addAdditionalSaveData(nbt);
+        // KioCG start
+        this.coldData.addAdditionalSaveData(nbt);
+        this.thirstData.addAdditionalSaveData(nbt);
+        // KioCG end
         this.abilities.addSaveData(nbt);
         nbt.put("EnderItems", this.enderChestInventory.createTag(this.registryAccess()));
         if (!this.getShoulderEntityLeft().isEmpty()) {
diff --git a/src/main/java/net/minecraft/world/food/FoodData.java b/src/main/java/net/minecraft/world/food/FoodData.java
index bd3f78e6453cfe18aa3da38176b04d734d83bb4b..b45e4a9793ddcc1e6d090c6a18f99e3b9bc35635 100644
--- a/src/main/java/net/minecraft/world/food/FoodData.java
+++ b/src/main/java/net/minecraft/world/food/FoodData.java
@@ -74,6 +74,7 @@ public class FoodData {
 
                 if (!event.isCancelled()) {
                     this.foodLevel = event.getFoodLevel();
+                    player.thirstData.addThirstRegain(Math.max(this.lastFoodLevel - this.foodLevel, 0) * player.level().paperConfig().kiocgConfig.theLongDark.thirstValue.thirstRegainMultiplierFood); // KioCG
                 }
 
                 ((ServerPlayer) player).connection.send(new ClientboundSetHealthPacket(((ServerPlayer) player).getBukkitEntity().getScaledHealth(), this.foodLevel, this.saturationLevel));
diff --git a/src/main/java/net/minecraft/world/level/block/LavaCauldronBlock.java b/src/main/java/net/minecraft/world/level/block/LavaCauldronBlock.java
index d29a62775913922ffb8e3c58ae0db7e37f77226e..9ac264e0a6342d556a0df3c9081b4ef828ae0451 100644
--- a/src/main/java/net/minecraft/world/level/block/LavaCauldronBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LavaCauldronBlock.java
@@ -35,6 +35,7 @@ public class LavaCauldronBlock extends AbstractCauldronBlock {
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper - Add EntityInsideBlockEvent
         if (this.isEntityInsideContent(state, pos, entity)) {
             entity.lavaHurt();
+            if (entity instanceof net.minecraft.world.entity.player.Player player) player.coldData.isInLava = true; // KioCG
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java b/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
index a5c7c2d24498c66159316a4f92677625975ce5ca..66dabb34eb4dfdd526ee1800d04aeda0cc99fcda 100644
--- a/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
@@ -78,6 +78,7 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
             // CraftBukkit end
         }
 
+        if (entity instanceof net.minecraft.world.entity.player.Player player && this.isEntityInsideContent(state, pos, entity)) player.coldData.isInWater = true; // KioCG
     }
 
     @io.papermc.paper.annotation.DoNotUse @Deprecated // Paper - fix powdered snow cauldron extinguishing entities; use #handleEntityOnFireInsideWithEvent
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
index 20d4cda6396601621b684f6048afffba650598bf..4d29c609c44fe2100c132cbac8abfdef4d0b201f 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -47,6 +47,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
     public final int[] cookingTime;
     private final RecipeManager.CachedCheck<SingleRecipeInput, CampfireCookingRecipe> quickCheck;
     public final boolean[] stopCooking; // Paper - Add more Campfire API
+    private int litTicks = 0; // KioCG
 
     public CampfireBlockEntity(BlockPos pos, BlockState state) {
         super(BlockEntityType.CAMPFIRE, pos, state);
@@ -60,6 +61,28 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
     public static void cookTick(Level world, BlockPos pos, BlockState state, CampfireBlockEntity campfire) {
         boolean flag = false;
 
+        // KioCG start
+        ++campfire.litTicks;
+        int extinguishingTick = state.is(net.minecraft.world.level.block.Blocks.CAMPFIRE) ? world.paperConfig().kiocgConfig.theLongDark.campfireExtinguishingOne : world.paperConfig().kiocgConfig.theLongDark.campfireExtinguishingTwo;
+        if (extinguishingTick >= 0 && campfire.litTicks > extinguishingTick) {
+            if (state.is(net.minecraft.world.level.block.Blocks.CAMPFIRE)) {
+                world.removeBlockEntity(pos); // 移除BlockEntity来保留物品
+                world.setBlock(pos, net.minecraft.world.level.block.Blocks.SOUL_CAMPFIRE.withPropertiesOf(state), 3);
+
+                CampfireBlockEntity soulCampfire = (CampfireBlockEntity) world.getBlockEntity(pos);
+                for (int i = 0; i < campfire.items.size(); i++) {
+                    soulCampfire.items.set(i, campfire.items.get(i));
+                }
+                System.arraycopy(campfire.cookingProgress, 0, soulCampfire.cookingProgress, 0, campfire.cookingProgress.length);
+                System.arraycopy(campfire.cookingTime, 0, soulCampfire.cookingTime, 0, campfire.cookingTime.length);
+                System.arraycopy(campfire.stopCooking, 0, soulCampfire.stopCooking, 0, campfire.stopCooking.length);
+            } else {
+                world.setBlock(pos, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState(), 3);
+            }
+            return;
+        }
+        // KioCG end
+
         for (int i = 0; i < campfire.items.size(); ++i) {
             ItemStack itemstack = (ItemStack) campfire.items.get(i);
 
@@ -233,6 +256,8 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
             System.arraycopy(cookingState, 0, this.stopCooking, 0, Math.min(this.stopCooking.length, abyte.length));
         }
         // Paper end - Add more Campfire API
+
+        if (nbt.contains("KioCG.LitTicks", org.bukkit.craftbukkit.util.CraftMagicNumbers.NBT.TAG_INT)) litTicks = nbt.getInt("KioCG.LitTicks"); // KioCG
     }
 
     @Override
@@ -248,6 +273,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
         }
         nbt.putByteArray("Paper.StopCooking", cookingState);
         // Paper end - Add more Campfire API
+        nbt.putInt("KioCG.LitTicks", litTicks); // KioCG
     }
 
     @Override
@@ -309,6 +335,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
         if (this.level != null) {
             this.markUpdated();
             this.cooldownImmediately(this.getLevel(), this.getBlockPos(), this.getBlockState(), (CampfireBlockEntity) this); // KioCG - 优化未燃烧的运算
+            this.litTicks = 0; // KioCG
         }
 
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index ee1bece10d033679209d7a17c175073e5a985eab..be79dbfd006a403abe157d74b4a050196bea4a4e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -207,6 +207,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private double health = 20;
     private boolean scaledHealth = false;
     private double healthScale = 20;
+    public int realAir; // KioCG
     private CraftWorldBorder clientWorldBorder = null;
     private BorderChangeListener clientWorldBorderListener = this.createWorldBorderListener();
     public org.bukkit.event.player.PlayerResourcePackStatusEvent.Status resourcePackStatus; // Paper - more resource pack API
@@ -2229,7 +2230,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         playerList.sendAllPlayerInfo(handle);
 
         // Resend their XP and effects because the respawn packet resets it
-        connection.send(new net.minecraft.network.protocol.game.ClientboundSetExperiencePacket(handle.experienceProgress, handle.totalExperience, handle.experienceLevel));
+        connection.send(new net.minecraft.network.protocol.game.ClientboundSetExperiencePacket(handle.coldData.getColdProgress(), handle.totalExperience, handle.experienceLevel)); // KioCG - cold system
         for (net.minecraft.world.effect.MobEffectInstance mobEffect : handle.getActiveEffects()) {
             connection.send(new net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket(handle.getId(), mobEffect, false));
         }
@@ -3519,6 +3520,47 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
 
+    // KioCG start
+    @Override
+    public int getColdValue() {
+        return this.getHandle().coldData.getColdValue();
+    }
+    @Override
+    public void setColdValue(int value) {
+        this.getHandle().coldData.setColdValue(value);
+    }
+    @Override
+    public void addColdValue(int add) {
+        this.getHandle().coldData.addColdValue(add);
+    }
+
+    @Override
+    public int getThirstValue() {
+        return this.getHandle().thirstData.getThirstValue();
+    }
+    @Override
+    public void setThirstValue(int value) {
+        this.getHandle().thirstData.setThirstValue(value);
+    }
+    @Override
+    public void addThirstValue(int add) {
+        this.getHandle().thirstData.addThirstValue(add);
+    }
+
+    @Override
+    public double getThirstRegain() {
+        return this.getHandle().thirstData.getThirstRegain();
+    }
+    @Override
+    public void setThirstRegain(double value) {
+        this.getHandle().thirstData.setThirstRegain(value);
+    }
+    @Override
+    public void addThirstRegain(double add) {
+        this.getHandle().thirstData.addThirstRegain(add);
+    }
+    // KioCG end
+
     public Player.Spigot spigot()
     {
         return this.spigot;

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Sun, 24 Mar 2024 09:51:12 +0800
Subject: [PATCH] Crops grow every day


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 6195afec487c03706a91fced502112d62bd309cb..270b377364d3af4264c48bc15650d98f6a1ec106 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1036,6 +1036,16 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
         gameprofilerfiller.popPush("tickBlocks");
         timings.chunkTicksBlocks.startTiming(); // Paper
+
+        // KioCG start - 农作物每天生长
+        int daysSpent = 0;
+        int days = (int) this.getDays();
+        if (days != chunk.cropDays) {
+            daysSpent = Mth.clamp(days - chunk.cropDays, 0, 7);
+            chunk.cropDays = days;
+        }
+        // KioCG end - 农作物每天生长
+
         if (randomTickSpeed > 0) {
             // Paper start - optimize random block ticking
             LevelChunkSection[] sections = chunk.getSections();
@@ -1066,6 +1076,36 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 // We drop the fluid tick since LAVA is ALREADY TICKED by the above method (See LiquidBlock).
                 // TODO CHECK ON UPDATE (ping the Canadian)
             }
+
+            // KioCG start - 农作物每天生长
+            for (int sectionIndex = 0; sectionIndex < sections.length; sectionIndex++) {
+                LevelChunkSection section = sections[sectionIndex];
+                if (section == null || section.cropsList.size() == 0) continue;
+
+                int yPos = (sectionIndex + minSection) << 4;
+                for (int i = 0; i < daysSpent; ++i) {
+                    int size = section.cropsList.size();
+                    if (size == 0) break;
+
+                    List<Pair<BlockPos, BlockState>> tickCrops = new ArrayList<>(size);
+                    for (int a = 0; a < size; ++a) {
+                        long raw = section.cropsList.getRaw(a);
+                        int location = com.destroystokyo.paper.util.maplist.IBlockDataList.getLocationFromRaw(raw);
+                        int x = location & 15;
+                        int y = ((location >>> (4 + 4)) & 255) | yPos;
+                        int z = (location >>> 4) & 15;
+
+                        BlockPos blockposition2 = new BlockPos(j + x, y, k + z);
+                        BlockState iblockdata = com.destroystokyo.paper.util.maplist.IBlockDataList.getBlockDataFromRaw(raw);
+
+                        tickCrops.add(Pair.of(blockposition2, iblockdata));
+                    }
+                    for (Pair<BlockPos, BlockState> pair : tickCrops) {
+                        pair.getSecond().randomTick(this, pair.getFirst(), this.randomTickRandom);
+                    }
+                }
+            }
+            // KioCG end - 农作物每天生长
         }
         // Paper end - optimise random block ticking
 
diff --git a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
index 8430f4ecee42e7112b7bafe04cec237b22dade88..5dc220e18ee67cb14543e1f0250aa2c8aa597bc4 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
@@ -43,9 +43,16 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
         return BambooSaplingBlock.SAPLING_SHAPE.move(vec3d.x, vec3d.y, vec3d.z);
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             this.growBamboo(world, pos);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
index e8dc4ea90d74036dacb0785fcb9125df192a4c22..9897ce8fb39c5350d2705a537ccf1cca483a13c5 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
@@ -131,10 +131,17 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
         return (Integer) state.getValue(BambooStalkBlock.STAGE) == 0;
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if ((Integer) state.getValue(BambooStalkBlock.STAGE) == 0) {
-            if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
+            if (world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                 int i = this.getHeightBelowUpToMax(world, pos) + 1;
 
                 if (i < world.paperConfig().maxGrowthHeight.bamboo.max) { // Paper - Configurable cactus/bamboo/reed growth height
diff --git a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
index 24a5a402cba62bf591a014b0527236cde8851e00..d638ca86f0621ab31230de72b916b79b1c43f5af 100644
--- a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
@@ -48,7 +48,7 @@ public class BeetrootBlock extends CropBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (random.nextInt(3) != 0) {
+        if (true || random.nextInt(3) != 0) { // KioCG - 农作物每天生长
             super.randomTick(state, world, pos, random);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 22036ed3ea0629bc12981a8d91a03e55cc2117d6..6bdb5b0b4b74744365a457d6094f56bb4496e0b5 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -233,6 +233,12 @@ public class Block extends BlockBehaviour implements ItemLike {
         return this.isRandomlyTicking;
     }
 
+    // KioCG start
+    public boolean isDayTicking() {
+        return false;
+    }
+    // KioCG end
+
     public static boolean shouldRenderFace(BlockState state, BlockGetter world, BlockPos pos, Direction side, BlockPos otherPos) {
         BlockState iblockdata1 = world.getBlockState(otherPos);
 
diff --git a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
index 7f58c9f5935cd14ea1096de14633f653eb486d7e..3af4a82cf659d50224f2ec6961d40f0acbd25a05 100644
--- a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
@@ -24,6 +24,13 @@ public class BuddingAmethystBlock extends AmethystBlock {
         super(settings);
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (random.nextInt(5) == 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/CactusBlock.java b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
index ba4aaf850af36a84517c70581e141157c4f15b99..6e323efa5d469d948025a30ef074ffa7543071c3 100644
--- a/src/main/java/net/minecraft/world/level/block/CactusBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
@@ -50,6 +50,13 @@ public class CactusBlock extends Block {
 
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         BlockPos blockposition1 = pos.above();
@@ -65,7 +72,7 @@ public class CactusBlock extends Block {
                 int j = (Integer) state.getValue(CactusBlock.AGE);
 
                 int modifier = world.spigotConfig.cactusModifier; // Spigot - SPIGOT-7159: Better modifier resolution
-                if (j >= 15 || (modifier != 100 && random.nextFloat() < (modifier / (100.0f * 16)))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                if (true) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                     CraftEventFactory.handleBlockGrowEvent(world, blockposition1, this.defaultBlockState()); // CraftBukkit
                     BlockState iblockdata1 = (BlockState) state.setValue(CactusBlock.AGE, 0);
 
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
index 0ab1bbd7c8dc8e45f754434357898d8fc990a021..bb1937f64f6ae56e26640b9446225c9f4a5ba086 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
@@ -60,6 +60,13 @@ public class ChorusFlowerBlock extends Block {
         return (Integer) state.getValue(ChorusFlowerBlock.AGE) < 5;
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public VoxelShape getBlockSupportShape(BlockState state, BlockGetter world, BlockPos pos) {
         return ChorusFlowerBlock.BLOCK_SUPPORT_SHAPE;
@@ -154,8 +161,12 @@ public class ChorusFlowerBlock extends Block {
     }
 
     private void placeGrownFlower(Level world, BlockPos pos, int age) {
-        world.setBlock(pos, (BlockState) this.defaultBlockState().setValue(ChorusFlowerBlock.AGE, age), 2);
+        // KioCG start
+        BlockState blockState = this.defaultBlockState().setValue(ChorusFlowerBlock.AGE, age);
+        world.setBlock(pos, blockState, 2);
         world.levelEvent(1033, pos, 0);
+        blockState.randomTick((ServerLevel) world, pos, world.random);
+        // KioCG end
     }
 
     private void placeDeadFlower(Level world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
index 9ddc3a5333894cbd2a3cc94752b54b091f4e8293..2fae1dc3345bccfd457f907a78034dc628f86c90 100644
--- a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
@@ -56,9 +56,16 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
         return (Integer) state.getValue(CocoaBlock.AGE) < 2;
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (world.random.nextFloat() < (world.spigotConfig.cocoaModifier / (100.0f * 5))) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (true) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             int i = (Integer) state.getValue(CocoaBlock.AGE);
 
             if (i < 2) {
diff --git a/src/main/java/net/minecraft/world/level/block/CropBlock.java b/src/main/java/net/minecraft/world/level/block/CropBlock.java
index 5b96d1ae4bd8546311e986bc312b1f85883a67f4..1974495538ded5454c6555e9d17e663c4040005f 100644
--- a/src/main/java/net/minecraft/world/level/block/CropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CropBlock.java
@@ -75,6 +75,24 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
         return !this.isMaxAge(state);
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+
+    public static boolean tickFarmland(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        BlockPos blockposition1 = pos.below();
+        BlockState iblockdata = world.getBlockState(blockposition1);
+        if (iblockdata.is(Blocks.FARMLAND)) {
+            boolean moisture = (Integer) iblockdata.getValue(FarmBlock.MOISTURE) > 0;
+            ((FarmBlock) iblockdata.getBlock()).randomTick0(iblockdata, world, blockposition1, random);
+            return moisture || (Integer) world.getBlockState(blockposition1).getValue(FarmBlock.MOISTURE) > 0;
+        }
+        return false;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.getRawBrightness(pos, 0) >= 9) {
@@ -99,7 +117,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
                     modifier = world.spigotConfig.wheatModifier;
                 }
 
-                if (random.nextFloat() < (modifier / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                if (tickFarmland(state, world, pos, random)) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG - 农作物每天生长
                     // Spigot end
                     CraftEventFactory.handleBlockGrowEvent(world, pos, this.getStateForAge(i + 1), 2); // CraftBukkit
                 }
@@ -124,6 +142,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
     }
 
     protected static float getGrowthSpeed(Block block, BlockGetter world, BlockPos pos) {
+        if (true) return 1.0F; // KioCG - 跳过无用且繁重的运算
         float f = 1.0F;
         BlockPos blockposition1 = pos.below();
 
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index 7b4122cf9ce5f1c17efa12162880cc285d50af97..42e4cfd4e83e74218e9cd57e32adfd3323cb4c12 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -89,15 +89,33 @@ public class FarmBlock extends Block {
 
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+    // KioCG start - 使农作物来运算耕地
+        if (!world.getBlockState(pos.above()).is(BlockTags.CROPS)) {
+            randomTick0(state, world, pos, random);
+        }
+    }
+    public void randomTick0(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+    // KioCG end - 使农作物来运算耕地
         int i = (Integer) state.getValue(FarmBlock.MOISTURE);
+        // KioCG start
+        /*
         if (i > 0 && world.paperConfig().tickRates.wetFarmland != 1 && (world.paperConfig().tickRates.wetFarmland < 1 || (net.minecraft.server.MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.wetFarmland != 0)) { return; } // Paper - Configurable random tick rates for blocks
         if (i == 0 && world.paperConfig().tickRates.dryFarmland != 1 && (world.paperConfig().tickRates.dryFarmland < 1 || (net.minecraft.server.MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.dryFarmland != 0)) { return; } // Paper - Configurable random tick rates for blocks
+        */
+        // KioCG end
 
-        if (!FarmBlock.isNearWater(world, pos) && !world.isRainingAt(pos.above())) {
+        if (!world.isRainingAt(pos.above())) { // KioCG - 水源不要湿润耕地
             if (i > 0) {
-                org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, pos, (BlockState) state.setValue(FarmBlock.MOISTURE, i - 1), 2); // CraftBukkit
+                org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, pos, (BlockState) state.setValue(FarmBlock.MOISTURE, 0), 2); // CraftBukkit // KioCG - 强制干燥
             } else if (!FarmBlock.shouldMaintainFarmland(world, pos)) {
                 FarmBlock.turnToDirt((Entity) null, state, world, pos);
             }
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
index 30300ef3ec839dfa944c992ab50db4d3859bb02e..37cca5f0492888235f912fcb7428d7d16f6a0c66 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
@@ -34,14 +34,21 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
 
     @Override
     public BlockState getStateForPlacement(LevelAccessor world) {
-        return (BlockState) this.defaultBlockState().setValue(GrowingPlantHeadBlock.AGE, world.getRandom().nextInt(25));
+        return (BlockState) this.defaultBlockState().setValue(GrowingPlantHeadBlock.AGE, world.getRandom().nextInt(15)); // KioCG
     }
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return (Integer) state.getValue(GrowingPlantHeadBlock.AGE) < 25;
+        return (Integer) state.getValue(GrowingPlantHeadBlock.AGE) < 15; // KioCG
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         // Spigot start
@@ -55,7 +62,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
         } else {
             modifier = world.spigotConfig.caveVinesModifier;
         }
-        if ((Integer) state.getValue(GrowingPlantHeadBlock.AGE) < 25 && random.nextDouble() < ((modifier / 100.0D) * this.growPerTickProbability)) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if ((Integer) state.getValue(GrowingPlantHeadBlock.AGE) < 15) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             // Spigot end
             BlockPos blockposition1 = pos.relative(this.growthDirection);
 
@@ -77,11 +84,11 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     }
 
     public BlockState getMaxAgeState(BlockState state) {
-        return (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, 25);
+        return (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, 15); // KioCG
     }
 
     public boolean isMaxAge(BlockState state) {
-        return (Integer) state.getValue(GrowingPlantHeadBlock.AGE) == 25;
+        return (Integer) state.getValue(GrowingPlantHeadBlock.AGE) == 15; // KioCG
     }
 
     protected BlockState updateBodyAfterConvertedFromHead(BlockState from, BlockState to) {
@@ -123,13 +130,13 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
         BlockPos blockposition1 = pos.relative(this.growthDirection);
-        int i = Math.min((Integer) state.getValue(GrowingPlantHeadBlock.AGE) + 1, 25);
+        int i = Math.min((Integer) state.getValue(GrowingPlantHeadBlock.AGE) + 1, 15); // KioCG
         int j = this.getBlocksToGrowWhenBonemealed(random);
 
         for (int k = 0; k < j && this.canGrowInto(world.getBlockState(blockposition1)); ++k) {
             world.setBlockAndUpdate(blockposition1, (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, i));
             blockposition1 = blockposition1.relative(this.growthDirection);
-            i = Math.min(i + 1, 25);
+            i = Math.min(i + 1, 15); // KioCG
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
index d5257272ac8b0cf36e9f92e32a4a4ae6782f770c..928a02dc3d74ee0334f4a717e7061da3b63b0267 100644
--- a/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
@@ -97,10 +97,17 @@ public class MangrovePropaguleBlock extends SaplingBlock implements SimpleWaterl
         return state.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!isHanging(state)) {
-            if (random.nextFloat() < (world.spigotConfig.saplingModifier / (100.0F * 7))) { // Paper - Fix Spigot growth modifiers
+            if (true) { // Paper - Fix Spigot growth modifiers // KioCG
                 this.advanceTree(world, pos, state, random);
             }
 
diff --git a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
index 1f27ae8abd5891a0b8057b454f2210b088b4e95a..62f192f0aa9751ffe2f4975887a9e91d2513d5b4 100644
--- a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
@@ -49,9 +49,16 @@ public class MushroomBlock extends BushBlock implements BonemealableBlock {
         return MushroomBlock.SHAPE;
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (random.nextFloat() < (world.spigotConfig.mushroomModifier / (100.0f * 25))) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (true) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             int i = 5;
             boolean flag = true;
             Iterator iterator = BlockPos.betweenClosed(pos.offset(-4, -1, -4), pos.offset(4, 1, 4)).iterator();
diff --git a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
index 0fc333f240d6918e841a9221be42973839408802..5660a581039dbeaf751c8fc7645cdb7db6e3d3ad 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
@@ -48,11 +48,18 @@ public class NetherWartBlock extends BushBlock {
         return (Integer) state.getValue(NetherWartBlock.AGE) < 3;
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         int i = (Integer) state.getValue(NetherWartBlock.AGE);
 
-        if (i < 3 && random.nextFloat() < (world.spigotConfig.wartModifier / (100.0f * 10))) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (i < 3) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG - 农作物每天生长
             state = (BlockState) state.setValue(NetherWartBlock.AGE, i + 1);
             org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, pos, state, 2); // CraftBukkit
         }
diff --git a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
index d20c009baf69d083bf8a14000028991b6518cd50..c199356975f2de413867f700a24e450f0077a954 100644
--- a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
@@ -116,11 +116,18 @@ public class PitcherCropBlock extends DoublePlantBlock implements BonemealableBl
         return state.getValue(HALF) == DoubleBlockHalf.LOWER && !this.isMaxAge(state);
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         float f = CropBlock.getGrowthSpeed(this, world, pos);
         boolean bl = random.nextFloat() < (world.spigotConfig.pitcherPlantModifier / (100.0F * (Math.floor(25.0F / f) + 1))); // Paper - Fix Spigot growth modifiers
-        if (bl) {
+        if (CropBlock.tickFarmland(state, world, pos, random)) { // KioCG - 农作物每天生长
             this.grow(world, state, pos, 1);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
index 3ff0d08e4964aae82d8e51d3b8bf9aa002096f81..23b19bba383f2feb795c7eca14d019906b6869bb 100644
--- a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
@@ -53,9 +53,16 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
         return SaplingBlock.SHAPE;
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(net.minecraft.world.level.block.state.BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (world.getMaxLocalRawBrightness(pos.above()) >= 9 && random.nextFloat() < (world.spigotConfig.saplingModifier / (100.0f * 7))) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (world.getMaxLocalRawBrightness(pos.above()) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             this.advanceTree(world, pos, state, random);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/StemBlock.java b/src/main/java/net/minecraft/world/level/block/StemBlock.java
index 121a872cd750a87b779895687ae1abf5bb77b088..8b3d8552bee06d884383d0f46dcbbefd7f52bd5e 100644
--- a/src/main/java/net/minecraft/world/level/block/StemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StemBlock.java
@@ -70,12 +70,19 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
         return floor.is(Blocks.FARMLAND);
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.getRawBrightness(pos, 0) >= 9) {
             float f = CropBlock.getGrowthSpeed(this, world, pos);
 
-            if (random.nextFloat() < ((this == Blocks.PUMPKIN_STEM ? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier) / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+            if (CropBlock.tickFarmland(state, world, pos, random)) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG - 农作物每天生长
                 int i = (Integer) state.getValue(StemBlock.AGE);
 
                 if (i < 7) {
diff --git a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
index 04957d461d0e968d443737068aaeec1d0bce78b2..b8a25ad733e7d112614978bdc47d5eaf240b5af3 100644
--- a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
@@ -50,6 +50,13 @@ public class SugarCaneBlock extends Block {
 
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.isEmptyBlock(pos.above())) {
@@ -63,7 +70,7 @@ public class SugarCaneBlock extends Block {
                 int j = (Integer) state.getValue(SugarCaneBlock.AGE);
 
                 int modifier = world.spigotConfig.caneModifier; // Spigot - SPIGOT-7159: Better modifier resolution
-                if (j >= 15 || (modifier != 100 && random.nextFloat() < (modifier / (100.0f * 16)))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                if (true) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                     org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, pos.above(), this.defaultBlockState()); // CraftBukkit
                     world.setBlock(pos, (BlockState) state.setValue(SugarCaneBlock.AGE, 0), 4);
                 } else if (modifier == 100 || random.nextFloat() < (modifier / (100.0f * 16))) { // Spigot - SPIGOT-7159: Better modifier resolution
diff --git a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
index 62ed86114c1a6e724ccfea119a331356d0a22600..ff140206f2d4e94e3dc8107416528990f457462e 100644
--- a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
@@ -68,11 +68,18 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
         return (Integer) state.getValue(SweetBerryBushBlock.AGE) < 3;
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         int i = (Integer) state.getValue(SweetBerryBushBlock.AGE);
 
-        if (i < 3 && random.nextFloat() < (world.spigotConfig.sweetBerryModifier / (100.0f * 5)) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (i < 3 && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             BlockState iblockdata1 = (BlockState) state.setValue(SweetBerryBushBlock.AGE, i + 1);
 
             if (!CraftEventFactory.handleBlockGrowEvent(world, pos, iblockdata1, 2)) return; // CraftBukkit
diff --git a/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java b/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
index d5c0fd1c2bbd85d0aa312ef74dc8dab14dfdf8f3..aa7c5e1c91051e87ee947df2496bfc57d46bfc44 100644
--- a/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
@@ -65,7 +65,7 @@ public class TorchflowerCropBlock extends CropBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (random.nextInt(3) != 0) {
+        if (true || random.nextInt(3) != 0) { // KioCG - 农作物每天生长
             super.randomTick(state, world, pos, random);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/VineBlock.java b/src/main/java/net/minecraft/world/level/block/VineBlock.java
index 75297e5e006d2009fd7582349e27a4afe3e67e80..33dd6e1e00e88fd57f7e3cfe72675ea84215131a 100644
--- a/src/main/java/net/minecraft/world/level/block/VineBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/VineBlock.java
@@ -182,10 +182,17 @@ public class VineBlock extends Block {
         }
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.getGameRules().getBoolean(GameRules.RULE_DO_VINES_SPREAD)) {
-            if (random.nextFloat() < (world.spigotConfig.vineModifier / (100.0f * 4))) { // Spigot - SPIGOT-7159: Better modifier resolution
+            if (true) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                 Direction enumdirection = Direction.getRandom(random);
                 BlockPos blockposition1 = pos.above();
                 BlockPos blockposition2;
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index 2892e586146cbc560f0bcf4b9af6d0575cb0a82e..db1bfe890b4e36ec8364866f06c0aa542175313b 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -1387,6 +1387,12 @@ public abstract class BlockBehaviour implements FeatureElement {
             return this.isRandomlyTicking;
         }
 
+        // KioCG start
+        public final boolean isRandomlyDayTicking() {
+            return this.getBlock().isDayTicking();
+        }
+        // KioCG end
+
         public long getSeed(BlockPos pos) {
             return this.getBlock().getSeed(this.asState(), pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index f7e5e016a7028a9196e689e950805b0d5b31fe38..54157268f3a5ca2e52e3a758d7a5341399e5c6c3 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -64,6 +64,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     private volatile boolean isLightCorrect;
     protected final ChunkPos chunkPos; public final long coordinateKey; public final int locX; public final int locZ; // Paper - cache coordinate key
     private long inhabitedTime;
+    public int cropDays; // KioCG
     /** @deprecated */
     @Nullable
     @Deprecated
@@ -128,7 +129,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     }
     // Paper end - rewrite light engine
 
-    public ChunkAccess(ChunkPos pos, UpgradeData upgradeData, LevelHeightAccessor heightLimitView, Registry<Biome> biomeRegistry, long inhabitedTime, @Nullable LevelChunkSection[] sectionArray, @Nullable BlendingData blendingData) {
+    public ChunkAccess(ChunkPos pos, UpgradeData upgradeData, LevelHeightAccessor heightLimitView, Registry<Biome> biomeRegistry, long inhabitedTime, int cropDays, @Nullable LevelChunkSection[] sectionArray, @Nullable BlendingData blendingData) { // KioCG - CropDays
         // Paper start - rewrite light engine
         if (!(this instanceof ImposterProtoChunk)) {
             this.setBlockNibbles(ca.spottedleaf.starlight.common.light.StarLightEngine.getFilledEmptyLight(heightLimitView));
@@ -141,6 +142,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
         this.levelHeightAccessor = heightLimitView;
         this.sections = new LevelChunkSection[heightLimitView.getSectionsCount()];
         this.inhabitedTime = inhabitedTime;
+        this.cropDays = cropDays; // KioCG
         this.postProcessing = new ShortList[heightLimitView.getSectionsCount()];
         this.blendingData = blendingData;
         // Paper - starlight - remove skyLightSources
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 6ec3fc801453fd54c25b642e6fa71c19b463311d..27de22ea6eb31c039fbada85f52463e04f690b94 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -87,11 +87,11 @@ public class LevelChunk extends ChunkAccess {
     public volatile FullChunkStatus chunkStatus = FullChunkStatus.INACCESSIBLE; // Paper - rewrite chunk system
 
     public LevelChunk(Level world, ChunkPos pos) {
-        this(world, pos, UpgradeData.EMPTY, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, (LevelChunkSection[]) null, (LevelChunk.PostLoadProcessor) null, (BlendingData) null);
+        this(world, pos, UpgradeData.EMPTY, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, 0, (LevelChunkSection[]) null, (LevelChunk.PostLoadProcessor) null, (BlendingData) null); // KioCG - CropDays
     }
 
-    public LevelChunk(Level world, ChunkPos pos, UpgradeData upgradeData, LevelChunkTicks<Block> blockTickScheduler, LevelChunkTicks<Fluid> fluidTickScheduler, long inhabitedTime, @Nullable LevelChunkSection[] sectionArrayInitializer, @Nullable LevelChunk.PostLoadProcessor entityLoader, @Nullable BlendingData blendingData) {
-        super(pos, upgradeData, world, net.minecraft.server.MinecraftServer.getServer().registryAccess().registryOrThrow(Registries.BIOME), inhabitedTime, sectionArrayInitializer, blendingData); // Paper - Anti-Xray - The world isn't ready yet, use server singleton for registry
+    public LevelChunk(Level world, ChunkPos pos, UpgradeData upgradeData, LevelChunkTicks<Block> blockTickScheduler, LevelChunkTicks<Fluid> fluidTickScheduler, long inhabitedTime, int cropDays, @Nullable LevelChunkSection[] sectionArrayInitializer, @Nullable LevelChunk.PostLoadProcessor entityLoader, @Nullable BlendingData blendingData) { // KioCG - CropDays
+        super(pos, upgradeData, world, net.minecraft.server.MinecraftServer.getServer().registryAccess().registryOrThrow(Registries.BIOME), inhabitedTime, cropDays, sectionArrayInitializer, blendingData); // Paper - Anti-Xray - The world isn't ready yet, use server singleton for registry // KioCG - CropDays
         this.tickersInLevel = Maps.newHashMap();
         this.level = (ServerLevel) world; // CraftBukkit - type
         this.gameEventListenerRegistrySections = new Int2ObjectOpenHashMap();
@@ -220,7 +220,7 @@ public class LevelChunk extends ChunkAccess {
     // Paper end
 
     public LevelChunk(ServerLevel world, ProtoChunk protoChunk, @Nullable LevelChunk.PostLoadProcessor entityLoader) {
-        this(world, protoChunk.getPos(), protoChunk.getUpgradeData(), protoChunk.unpackBlockTicks(), protoChunk.unpackFluidTicks(), protoChunk.getInhabitedTime(), protoChunk.getSections(), entityLoader, protoChunk.getBlendingData());
+        this(world, protoChunk.getPos(), protoChunk.getUpgradeData(), protoChunk.unpackBlockTicks(), protoChunk.unpackFluidTicks(), protoChunk.getInhabitedTime(), protoChunk.cropDays, protoChunk.getSections(), entityLoader, protoChunk.getBlendingData()); // KioCG - CropDays
         // Paper start - rewrite light engine
         this.setBlockNibbles(protoChunk.getBlockNibbles());
         this.setSkyNibbles(protoChunk.getSkyNibbles());
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index 796bbef3544e06b8e7aac7e8ac5f740a2613f4bd..92caf0b5a60b213aeae01f5f7841b9a3fa6d308f 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -26,6 +26,7 @@ public class LevelChunkSection {
     // CraftBukkit start - read/write
     private PalettedContainer<Holder<Biome>> biomes;
     public final com.destroystokyo.paper.util.maplist.IBlockDataList tickingList = new com.destroystokyo.paper.util.maplist.IBlockDataList(); // Paper
+    public final com.destroystokyo.paper.util.maplist.IBlockDataList cropsList = new com.destroystokyo.paper.util.maplist.IBlockDataList(); // KioCG
     // Paper start - optimise collisions
     private int specialCollidingBlocks;
 
@@ -93,10 +94,12 @@ public class LevelChunkSection {
         if (!iblockdata1.isAir()) {
             --this.nonEmptyBlockCount;
             if (iblockdata1.isRandomlyTicking()) {
+                if (iblockdata1.isRandomlyDayTicking()) { this.cropsList.remove(x, y, z); } else { // KioCG
                 --this.tickingBlockCount;
                 // Paper start
                 this.tickingList.remove(x, y, z);
                 // Paper end
+                } // KioCG
             }
         }
 
@@ -107,10 +110,12 @@ public class LevelChunkSection {
         if (!state.isAir()) {
             ++this.nonEmptyBlockCount;
             if (state.isRandomlyTicking()) {
+                if (state.isRandomlyDayTicking()) { this.cropsList.add(x, y, z, state); } else { // KioCG
                 ++this.tickingBlockCount;
                 // Paper start
                 this.tickingList.add(x, y, z, state);
                 // Paper end
+                } // KioCG
             }
         }
 
@@ -141,6 +146,7 @@ public class LevelChunkSection {
     public void recalcBlockCounts() {
         // Paper start - unfuck this
         this.tickingList.clear();
+        this.cropsList.clear(); // KioCG
         this.nonEmptyBlockCount = 0;
         this.tickingBlockCount = 0;
         this.tickingFluidCount = 0;
@@ -152,8 +158,10 @@ public class LevelChunkSection {
                 if (!iblockdata.isAir()) {
                     this.nonEmptyBlockCount = (short) (this.nonEmptyBlockCount + 1);
                     if (iblockdata.isRandomlyTicking()) {
+                        if (iblockdata.isRandomlyDayTicking()) { this.cropsList.add(i, iblockdata); } else { // KioCG
                         this.tickingBlockCount = (short)(this.tickingBlockCount + 1);
                         this.tickingList.add(i, iblockdata);
+                        } // KioCG
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java b/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
index 7aa585875dad5296526bb5d67fc5ea0f8875e452..f0ce6f5629e05df57a8aa658405a203ae8ee6ca6 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
@@ -52,7 +52,7 @@ public class ProtoChunk extends ChunkAccess {
     }
 
     public ProtoChunk(ChunkPos pos, UpgradeData upgradeData, @Nullable LevelChunkSection[] sections, ProtoChunkTicks<Block> blockTickScheduler, ProtoChunkTicks<Fluid> fluidTickScheduler, LevelHeightAccessor world, Registry<Biome> biomeRegistry, @Nullable BlendingData blendingData) {
-        super(pos, upgradeData, world, biomeRegistry, 0L, sections, blendingData);
+        super(pos, upgradeData, world, biomeRegistry, 0L, 0, sections, blendingData); // KioCG - CropDays
         this.blockTicks = blockTickScheduler;
         this.fluidTicks = fluidTickScheduler;
     }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index d53c4f3d47a8728d56fbd9b5e12be51885560d52..2a9aca7c758b271f36bb69be5db8c693f3704617 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -261,6 +261,7 @@ public class ChunkSerializer {
         }
 
         long l = nbt.getLong("InhabitedTime");
+        int cropDays = nbt.getInt("KioCG.CropDays"); // KioCG
         ChunkStatus.ChunkType chunkstatus_type = ChunkSerializer.getChunkTypeFromTag(nbt);
         Logger logger1;
         BlendingData blendingdata;
@@ -284,7 +285,7 @@ public class ChunkSerializer {
                 return BuiltInRegistries.FLUID.getOptional(ResourceLocation.tryParse(s));
             }, chunkPos);
 
-            object1 = new LevelChunk(world.getLevel(), chunkPos, chunkconverter, levelchunkticks, levelchunkticks1, l, achunksection, ChunkSerializer.postLoadChunk(world, nbt), blendingdata);
+            object1 = new LevelChunk(world.getLevel(), chunkPos, chunkconverter, levelchunkticks, levelchunkticks1, l, cropDays, achunksection, ChunkSerializer.postLoadChunk(world, nbt), blendingdata); // KioCG - CropDays
             ((LevelChunk)object1).setBlockNibbles(blockNibbles); // Paper - replace light impl
             ((LevelChunk)object1).setSkyNibbles(skyNibbles); // Paper - replace light impl
         } else {
@@ -300,6 +301,7 @@ public class ChunkSerializer {
 
             object1 = protochunk;
             protochunk.setInhabitedTime(l);
+            protochunk.cropDays = cropDays; // KioCG
             if (nbt.contains("below_zero_retrogen", 10)) {
                 dataresult = BelowZeroRetrogen.CODEC.parse(new Dynamic(NbtOps.INSTANCE, nbt.getCompound("below_zero_retrogen")));
                 logger1 = ChunkSerializer.LOGGER;
@@ -469,6 +471,7 @@ public class ChunkSerializer {
         nbttagcompound.putInt("zPos", chunkcoordintpair.z);
         nbttagcompound.putLong("LastUpdate", asyncsavedata != null ? asyncsavedata.worldTime : world.getGameTime()); // Paper - async chunk unloading // Paper - diff on change
         nbttagcompound.putLong("InhabitedTime", chunk.getInhabitedTime());
+        nbttagcompound.putInt("KioCG.CropDays", chunk.cropDays); // KioCG
         nbttagcompound.putString("Status", BuiltInRegistries.CHUNK_STATUS.getKey(chunk.getStatus()).toString());
         BlendingData blendingdata = chunk.getBlendingData();
         DataResult<Tag> dataresult; // CraftBukkit - decompile error

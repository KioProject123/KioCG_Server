From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Tue, 28 May 2024 15:02:18 +0800
Subject: [PATCH] Entity baby API


diff --git a/src/main/java/io/papermc/paper/configuration/PaperConfigurations.java b/src/main/java/io/papermc/paper/configuration/PaperConfigurations.java
index 783eac6e458c6f1a0584301fb84a2fe341868f34..1a7017cf499daddfd27709aa9a75286a989e0e57 100644
--- a/src/main/java/io/papermc/paper/configuration/PaperConfigurations.java
+++ b/src/main/java/io/papermc/paper/configuration/PaperConfigurations.java
@@ -234,6 +234,7 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
                 .serializers(serializers -> serializers
                     .register(new TypeToken<Reference2IntMap<?>>() {}, new FastutilMapSerializer.SomethingToPrimitive<Reference2IntMap<?>>(Reference2IntOpenHashMap::new, Integer.TYPE))
                     .register(new TypeToken<Reference2LongMap<?>>() {}, new FastutilMapSerializer.SomethingToPrimitive<Reference2LongMap<?>>(Reference2LongOpenHashMap::new, Long.TYPE))
+                    .register(new TypeToken<it.unimi.dsi.fastutil.objects.Reference2DoubleMap<?>>() {}, new FastutilMapSerializer.SomethingToPrimitive<it.unimi.dsi.fastutil.objects.Reference2DoubleMap<?>>(it.unimi.dsi.fastutil.objects.Reference2DoubleOpenHashMap::new, Double.TYPE)) // KioCG
                     .register(new TypeToken<Table<?, ?, ?>>() {}, new TableSerializer())
                     .register(StringRepresentableSerializer::isValidFor, new StringRepresentableSerializer())
                     .register(IntOr.Default.SERIALIZER)
diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index 4f1a2a6bab29aa9b61fb3304368ec3e161981da5..426f1d92b2d974753b1eb1f0f16282517daec83d 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -588,6 +588,18 @@ public class WorldConfiguration extends ConfigurationPart {
             public int campfireExtinguishingTwo = -1;
             public int campfireBoilingWaterTime = 600;
         }
+
+        public Entity entity;
+        public class Entity extends ConfigurationPart {
+            public it.unimi.dsi.fastutil.objects.Reference2DoubleMap<EntityType<?>> sizeScalingBaby = Util.make(new it.unimi.dsi.fastutil.objects.Reference2DoubleOpenHashMap<>(BuiltInRegistries.ENTITY_TYPE.size()), map -> {
+                map.defaultReturnValue(0.5);
+                map.put(EntityType.SKELETON, 0.65);
+            });
+            public it.unimi.dsi.fastutil.objects.Reference2DoubleMap<EntityType<?>> sizeScalingHuge = Util.make(new it.unimi.dsi.fastutil.objects.Reference2DoubleOpenHashMap<>(BuiltInRegistries.ENTITY_TYPE.size()), map -> {
+                map.defaultReturnValue(1.5);
+                map.put(EntityType.SKELETON, 1.5);
+            });
+        }
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/AgeableMob.java b/src/main/java/net/minecraft/world/entity/AgeableMob.java
index 3dc3609d13a7b823d15384d1c385b68eeb933d26..7a61d82039a4793f090c928189c01c4df66a7ede 100644
--- a/src/main/java/net/minecraft/world/entity/AgeableMob.java
+++ b/src/main/java/net/minecraft/world/entity/AgeableMob.java
@@ -197,6 +197,7 @@ public abstract class AgeableMob extends PathfinderMob {
 
     @Override
     public void setBaby(boolean baby) {
+        if (baby) removeScaleAttributes(); // KioCG
         this.setAge(baby ? -24000 : 0);
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 93483be27e7704c0fc1e1252e1363ce9333fba5c..f2ab0a17aeaa36b76fc926acdccde13f77d0b3b1 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -286,6 +286,11 @@ public abstract class LivingEntity extends Entity implements Attackable {
     public org.bukkit.craftbukkit.entity.CraftLivingEntity getBukkitLivingEntity() { return (org.bukkit.craftbukkit.entity.CraftLivingEntity) super.getBukkitEntity(); } // Paper
     public boolean silentDeath = false; // Paper - mark entity as dying silently for cancellable death event
     public net.kyori.adventure.util.TriState frictionState = net.kyori.adventure.util.TriState.NOT_SET; // Paper - Friction API
+    // KioCG start
+    private ScaleSimulate scaleSimulate = ScaleSimulate.NORMAL;
+    private final AttributeModifier SCALE_MODIFIER_BABY = new AttributeModifier(ResourceLocation.withDefaultNamespace("scale_simulate"), this.level().paperConfig().kiocgConfig.entity.sizeScalingBaby.getOrDefault(this.getType(), 0.5) - 1D, AttributeModifier.Operation.ADD_MULTIPLIED_TOTAL);
+    private final AttributeModifier SCALE_MODIFIER_HUGE = new AttributeModifier(ResourceLocation.withDefaultNamespace("scale_simulate"), this.level().paperConfig().kiocgConfig.entity.sizeScalingHuge.getOrDefault(this.getType(), 1.5) - 1D, AttributeModifier.Operation.ADD_MULTIPLIED_TOTAL);
+    // KioCG end
 
     @Override
     public float getBukkitYaw() {
@@ -591,6 +596,66 @@ public abstract class LivingEntity extends Entity implements Attackable {
         return false;
     }
 
+    // KioCG start
+    public void setScaleSimulate(ScaleSimulate scale) {
+        switch (scale) {
+            case BABY -> {
+                if (isBaby()) return; // Vanilla baby
+
+                this.scaleSimulate = scale;
+                AttributeInstance attributemodifiable = this.getAttribute(Attributes.SCALE);
+                attributemodifiable.addOrUpdateTransientModifier(this.SCALE_MODIFIER_BABY);
+            }
+            case HUGE -> {
+                this.scaleSimulate = scale;
+                AttributeInstance attributemodifiable = this.getAttribute(Attributes.SCALE);
+                attributemodifiable.addOrUpdateTransientModifier(this.SCALE_MODIFIER_HUGE);
+            }
+            default -> {
+                this.scaleSimulate = ScaleSimulate.NORMAL;
+                AttributeInstance attributemodifiable = this.getAttribute(Attributes.SCALE);
+                attributemodifiable.removeModifier(this.SCALE_MODIFIER_BABY.id()); // SCALE_MODIFIER_BABY 和 SCALE_MODIFIER_HUGE 使用相同的ID
+            }
+        }
+    }
+
+    public void setBabySimulate() {
+        this.setScaleSimulate(ScaleSimulate.BABY);
+    }
+
+    public boolean isBabySimulate() {
+        return this.scaleSimulate == ScaleSimulate.BABY || this.isBaby();
+    }
+
+    public void setHugeSimulate() {
+        this.setScaleSimulate(ScaleSimulate.HUGE);
+    }
+
+    public boolean isHugeSimulate() {
+        return this.scaleSimulate == ScaleSimulate.HUGE;
+    }
+
+    public void removeScaleAttributes() {
+        this.setScaleSimulate(ScaleSimulate.NORMAL);
+    }
+
+    public void transformScaleSimulate(LivingEntity original) {
+        if (original.isBabySimulate()) {
+            setBabySimulate();
+        } else if (original.isHugeSimulate()) {
+            setHugeSimulate();
+        } else {
+            removeScaleAttributes();
+        }
+    }
+
+    enum ScaleSimulate {
+        BABY,
+        HUGE,
+        NORMAL
+    }
+    // KioCG end
+
     public float getAgeScale() {
         return this.isBaby() ? 0.5F : 1.0F;
     }
@@ -812,6 +877,12 @@ public abstract class LivingEntity extends Entity implements Attackable {
         dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
             nbt.put("Brain", nbtbase);
         });
+
+        // KioCG start
+        if (this.scaleSimulate != ScaleSimulate.NORMAL) {
+            nbt.putString("KioCG.ScaleSimulate", this.scaleSimulate.toString());
+        }
+        // KioCG end
     }
 
     @Override
@@ -900,6 +971,16 @@ public abstract class LivingEntity extends Entity implements Attackable {
             this.brain = this.makeBrain(new Dynamic(NbtOps.INSTANCE, nbt.get("Brain")));
         }
 
+        // KioCG start
+        if (nbt.contains("KioCG.ScaleSimulate")) {
+            String ss = nbt.getString("KioCG.ScaleSimulate");
+            try {
+                this.setScaleSimulate(ScaleSimulate.valueOf(ss));
+            } catch (Exception ignored) {
+                LOGGER.error("Unknown scale simulate " + ss + " for " + this);
+            }
+        }
+        // KioCG end
     }
 
     // CraftBukkit start
@@ -2779,7 +2860,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
     }
 
     public float getVoicePitch() {
-        return this.isBaby() ? (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.5F : (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F;
+        return this.isBabySimulate() ? (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.5F : (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F; // KioCG
     }
 
     protected boolean isImmobile() {
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index a22428615705582575e71252b4b4ee9dd2de72d3..81397196026c3cfa9e693190cbd183bc675af117 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -1690,6 +1690,17 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
 
     public void setBaby(boolean baby) {}
 
+    // KioCG start
+    public void setScaleSimulate(ScaleSimulate scale) {
+        switch (scale) {
+            case BABY -> setBaby(true);
+            case HUGE -> setBaby(false);
+        }
+
+        super.setScaleSimulate(scale);
+    }
+    // KioCG end
+
     @Override
     public HumanoidArm getMainArm() {
         return this.isLeftHanded() ? HumanoidArm.LEFT : HumanoidArm.RIGHT;
diff --git a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
index fadd341ff398886a4da102eefa1beb95a63bbd6d..4da9c658e367dd2099e0391e1360e3ca56bdc0ed 100644
--- a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
+++ b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
@@ -431,6 +431,7 @@ public class Sniffer extends Animal {
 
     @Override
     public void setBaby(boolean baby) {
+        if (baby) removeScaleAttributes(); // KioCG
         this.setAge(baby ? -48000 : 0);
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
index aa458ede5bd645ebf524238179edb33f41bd683f..3c36037bb856720acaf951a83fe1f64a465c77e5 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
@@ -241,10 +241,16 @@ public class Zoglin extends Monster implements Enemy, HoglinBase {
 
     @Override
     public void setBaby(boolean baby) {
+        if (baby) removeScaleAttributes(); // KioCG
         this.getEntityData().set(DATA_BABY_ID, baby);
         if (!this.level().isClientSide && baby) {
             this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue(0.5);
         }
+        // KioCG start
+        if (!this.level().isClientSide && !baby) {
+            this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue(ATTACK_DAMAGE);
+        }
+        // KioCG end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index 892f02475976203abdd472aa02b80a9bfe48f752..8c180d6286cda99a7fd656eab588f55584e6e10f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -190,6 +190,7 @@ public class Zombie extends Monster {
 
     @Override
     public void setBaby(boolean baby) {
+        if (baby) removeScaleAttributes(); // KioCG
         this.getEntityData().set(Zombie.DATA_BABY_ID, baby);
         if (this.level() != null && !this.level().isClientSide) {
             AttributeInstance attributemodifiable = this.getAttribute(Attributes.MOVEMENT_SPEED);
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index bc58323801ee16fe9b63c21332144ec002a902f2..06cd00d571d583b9b94f3fb703e084fcde67391b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -267,6 +267,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
 
     @Override
     public void setBaby(boolean baby) {
+        if (baby) removeScaleAttributes(); // KioCG
         this.getEntityData().set(Piglin.DATA_BABY_ID, baby);
         if (!this.level().isClientSide) {
             AttributeInstance attributemodifiable = this.getAttribute(Attributes.MOVEMENT_SPEED);
diff --git a/src/main/java/net/minecraft/world/item/SpawnEggItem.java b/src/main/java/net/minecraft/world/item/SpawnEggItem.java
index 9cea8da84f39bb3f687139ef213ccea358724dee..4e4a7c346359468c0754285a023bbf677411a8d9 100644
--- a/src/main/java/net/minecraft/world/item/SpawnEggItem.java
+++ b/src/main/java/net/minecraft/world/item/SpawnEggItem.java
@@ -174,8 +174,10 @@ public class SpawnEggItem extends Item {
             if (object == null) {
                 return Optional.empty();
             } else {
-                ((Mob) object).setBaby(true);
-                if (!((Mob) object).isBaby()) {
+                // KioCG start
+                ((Mob) object).setBabySimulate();
+                if (false && !((Mob) object).isBaby()) {
+                // KioCG end
                     return Optional.empty();
                 } else {
                     ((Mob) object).moveTo(pos.x(), pos.y(), pos.z(), 0.0F, 0.0F);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index d2bb0831394c03b620b2cbd8306cb82b621f34f7..6c1a9cb2ef24048264fa9faed735cf1ef79c3259 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -1189,4 +1189,31 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         return this.getHandle().canUseSlot(org.bukkit.craftbukkit.CraftEquipmentSlot.getNMS(slot));
     }
     // Paper end - Expose canUseSlot
+
+    // KioCG start
+    @Override
+    public void setBabySimulate() {
+        getHandle().setBabySimulate();
+    }
+
+    @Override
+    public boolean isBabySimulate() {
+        return getHandle().isBabySimulate();
+    }
+
+    @Override
+    public void setHugeSimulate() {
+        getHandle().setHugeSimulate();
+    }
+
+    @Override
+    public boolean isHugeSimulate() {
+        return getHandle().isHugeSimulate();
+    }
+
+    @Override
+    public void removeScaleAttributes() {
+        getHandle().removeScaleAttributes();
+    }
+    // KioCG end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 8dd85b9ca3b3e3429de4d0ec0654982589c6e93e..761f6dc3b361934f0cf651430cbb0e7da10e0149 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -617,6 +617,7 @@ public class CraftEventFactory {
     public static EntityTransformEvent callEntityTransformEvent(net.minecraft.world.entity.LivingEntity original, List<net.minecraft.world.entity.LivingEntity> convertedList, EntityTransformEvent.TransformReason convertType) {
         List<org.bukkit.entity.Entity> list = new ArrayList<>();
         for (net.minecraft.world.entity.LivingEntity entityLiving : convertedList) {
+            entityLiving.transformScaleSimulate(original); // KioCG
             list.add(entityLiving.getBukkitEntity());
         }
 
@@ -1348,6 +1349,7 @@ public class CraftEventFactory {
     }
 
     public static PigZapEvent callPigZapEvent(Entity pig, Entity lightning, Entity pigzombie) {
+        ((net.minecraft.world.entity.LivingEntity) pigzombie).transformScaleSimulate((net.minecraft.world.entity.LivingEntity) pig); // KioCG
         PigZapEvent event = new PigZapEvent((Pig) pig.getBukkitEntity(), (LightningStrike) lightning.getBukkitEntity(), (PigZombie) pigzombie.getBukkitEntity());
         pig.getBukkitEntity().getServer().getPluginManager().callEvent(event);
         return event;

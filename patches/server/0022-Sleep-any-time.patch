From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Sun, 17 Mar 2024 14:39:32 +0800
Subject: [PATCH] Sleep any time


diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index f7ca0e045ac4de9d0ddb49be10a57795ed3bfdb2..6b7e0401a7340313ee6dbb6027cc02c435b2a7da 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -594,6 +594,8 @@ public class WorldConfiguration extends ConfigurationPart {
         public double dirtPathSpeedBoost = 0.02;
         public double saplingsWitheredChance = 0.025;
         public boolean flowersAndGrassesSpreadNaturally = true;
+        public boolean sleepAnyTime = true;
+        public double sleepHealingRegenRate = 20;
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index bf5e47e8c3706590fdc0731bd9a5858b56d06136..c2ce37c1c14a3cbdeea9d4ef0d26200a3f274d26 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -819,6 +819,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
         long j;
 
+        if (!this.paperConfig().kiocgConfig.sleepAnyTime) { // KioCG
         if (this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
             // CraftBukkit start
             j = this.levelData.getDayTime() + 24000L;
@@ -838,6 +839,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 this.resetWeatherCycle();
             }
         }
+        } // KioCG
 
         this.updateSkyBrightness();
         if (flag) {
@@ -1172,6 +1174,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     }
 
     private void announceSleepStatus() {
+        if (this.paperConfig().kiocgConfig.sleepAnyTime) return; // KioCG
         if (this.canSleepThroughNights()) {
             if (!this.getServer().isSingleplayer() || this.getServer().isPublished()) {
                 int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 8a776d6c8e83306e1504b93328cbaf658e24d79d..115024920b8fa15093f4e6a5b47e5a197e78ec8f 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1411,7 +1411,7 @@ public class ServerPlayer extends Player {
                 return Either.left(Player.BedSleepingProblem.OBSTRUCTED);
             } else {
                 this.setRespawnPosition(this.level().dimension(), blockposition, this.getYRot(), false, true, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.BED); // Paper - Add PlayerSetSpawnEvent
-                if (this.level().isDay()) {
+                if (this.level().isDay() && !this.level().paperConfig().kiocgConfig.sleepAnyTime) { // KioCG
                     return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
                 } else {
                     if (!this.isCreative()) {
@@ -1461,7 +1461,7 @@ public class ServerPlayer extends Player {
                         CriteriaTriggers.SLEPT_IN_BED.trigger(this);
                     });
 
-                    if (!this.serverLevel().canSleepThroughNights()) {
+                    if (!this.serverLevel().canSleepThroughNights() && !this.level().paperConfig().kiocgConfig.sleepAnyTime) { // KioCG
                         this.displayClientMessage(Component.translatable("sleep.not_possible"), true);
                     }
 
@@ -2447,7 +2447,7 @@ public class ServerPlayer extends Player {
             // Paper end - Add PlayerSetSpawnEvent
 
             if (event.willNotifyPlayer() && event.getNotification() != null) { // Paper - Add PlayerSetSpawnEvent
-                this.sendSystemMessage(PaperAdventure.asVanilla(event.getNotification())); // Paper - Add PlayerSetSpawnEvent
+                this.sendSystemMessage(PaperAdventure.asVanilla(event.getNotification()), this.level().paperConfig().kiocgConfig.sleepAnyTime); // Paper - Add PlayerSetSpawnEvent // KioCG
             }
 
             this.respawnPosition = pos;
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 77edeb58633d83832567980e0e7482a04f3fed3b..7739157ce334221e450a80755173c73a4b6cf8e7 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -262,7 +262,7 @@ public abstract class Player extends LivingEntity {
                 this.sleepCounter = 100;
             }
 
-            if (!this.level().isClientSide && this.level().isDay()) {
+            if (!this.level().isClientSide && this.level().isDay() && !this.level().paperConfig().kiocgConfig.sleepAnyTime) { // KioCG
                 this.stopSleepInBed(false, true);
             }
         } else if (this.sleepCounter > 0) {
diff --git a/src/main/java/net/minecraft/world/food/FoodData.java b/src/main/java/net/minecraft/world/food/FoodData.java
index 3990fad7ee4d218e182fa322613ec991468de69b..84be9cf5f65fb9d9988061f83a7ff3805fec7018 100644
--- a/src/main/java/net/minecraft/world/food/FoodData.java
+++ b/src/main/java/net/minecraft/world/food/FoodData.java
@@ -79,6 +79,30 @@ public class FoodData {
 
         boolean flag = player.level().getGameRules().getBoolean(GameRules.RULE_NATURAL_REGENERATION);
 
+        // KioCG start
+        if (player.level().paperConfig().kiocgConfig.sleepHealingRegenRate >= 0 && this.foodLevel > 6 && player.isSleeping() && player.isHurt()) {
+            ++this.tickTimer;
+            if (this.tickTimer >= player.level().paperConfig().kiocgConfig.sleepHealingRegenRate) {
+                final float health = player.getHealth();
+                player.heal(1.0F);
+                if (player.getHealth() > health) {
+                    final java.util.ArrayList<org.bukkit.entity.Player> receivers = new java.util.ArrayList<>(player.getBukkitEntity().getTrackedBy());
+                    receivers.add(((ServerPlayer) player).getBukkitEntity());
+                    player.getBukkitEntity().getWorld().spawnParticle(org.bukkit.Particle.HEART,
+                                                                      receivers,
+                                                                      ((ServerPlayer) player).getBukkitEntity(),
+                                                                      player.getX(), player.getY(), player.getZ(),
+                                                                      5,
+                                                                      0.3, 0.3, 0.3,
+                                                                      1.0,
+                                                                      null,
+                                                                      true);
+                }
+
+                this.tickTimer = 0;
+            }
+        } else
+        // KioCG end
         if (flag && this.saturationLevel > 0.0F && player.isHurt() && this.foodLevel >= 20) {
             ++this.tickTimer;
             if (this.tickTimer >= this.saturatedRegenRate) { // CraftBukkit

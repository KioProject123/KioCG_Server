From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Sun, 17 Mar 2024 01:21:46 +0800
Subject: [PATCH] Adjust enchantment


diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index 3039c203d1834219210b204dea7bcbfee1d374d1..af1cf6c3421dc78af30cf4aeab4ebf8c80b8361b 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -408,6 +408,11 @@ public class GlobalConfiguration extends ConfigurationPart {
                 }
             }
         }
+
+        public Enchant enchant;
+        public class Enchant extends ConfigurationPart {
+            public boolean allowUnsafeCommand = true;
+        }
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/server/commands/EnchantCommand.java b/src/main/java/net/minecraft/server/commands/EnchantCommand.java
index 15bfe2e58d16864af29b04c17181ebf45fa21eba..ce5706d9679fabe66e9593f9ba105f7b27aa0b81 100644
--- a/src/main/java/net/minecraft/server/commands/EnchantCommand.java
+++ b/src/main/java/net/minecraft/server/commands/EnchantCommand.java
@@ -70,7 +70,7 @@ public class EnchantCommand {
 
     private static int enchant(CommandSourceStack source, Collection<? extends Entity> targets, Holder<Enchantment> enchantment, int level) throws CommandSyntaxException {
         Enchantment enchantment2 = enchantment.value();
-        if (level > enchantment2.getMaxLevel()) {
+        if (!io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.enchant.allowUnsafeCommand && level > enchantment2.getMaxLevel()) { // KioCG
             throw ERROR_LEVEL_TOO_HIGH.create(level, enchantment2.getMaxLevel());
         } else {
             int i = 0;
@@ -80,8 +80,15 @@ public class EnchantCommand {
                     LivingEntity livingEntity = (LivingEntity)entity;
                     ItemStack itemStack = livingEntity.getMainHandItem();
                     if (!itemStack.isEmpty()) {
-                        if (enchantment2.canEnchant(itemStack)
-                            && EnchantmentHelper.isEnchantmentCompatible(EnchantmentHelper.getEnchantments(itemStack).keySet(), enchantment2)) {
+                        // KioCG start
+                        final java.util.Map<Enchantment, Integer> enchantments = EnchantmentHelper.getEnchantments(itemStack);
+                        if (enchantments.remove(enchantment2) != null) {
+                            EnchantmentHelper.setEnchantments(enchantments, itemStack);
+                        }
+                        if (io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.enchant.allowUnsafeCommand ||
+                            enchantment2.canEnchant(itemStack)
+                            && EnchantmentHelper.isEnchantmentCompatible(enchantments.keySet(), enchantment2)) {
+                        // KioCG end
                             itemStack.enchant(enchantment2, level);
                             i++;
                         } else if (targets.size() == 1) {
diff --git a/src/main/java/net/minecraft/world/damagesource/CombatRules.java b/src/main/java/net/minecraft/world/damagesource/CombatRules.java
index ccbfcef3e83b1bef364447657bfd08a92d615cf6..d6dd1cfe9e7046b5284350211673f1b2c481ae81 100644
--- a/src/main/java/net/minecraft/world/damagesource/CombatRules.java
+++ b/src/main/java/net/minecraft/world/damagesource/CombatRules.java
@@ -16,6 +16,7 @@ public class CombatRules {
     }
 
     public static float getDamageAfterMagicAbsorb(float damageDealt, float protection) {
+        if (true) return damageDealt * (1.0F - (protection / (protection + 20.0F))); // KioCG
         float f = Mth.clamp(protection, 0.0F, 20.0F);
         return damageDealt * (1.0F - f / 25.0F);
     }
diff --git a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
index 36422fb394a158f36c84ba0ee03cc704956c91b2..b0dce3b0b50fe6d6ef409900e09fe202515f4b5a 100644
--- a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
+++ b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
@@ -336,6 +336,13 @@ public class ExperienceOrb extends Entity {
 
         if (entry != null) {
             ItemStack itemstack = (ItemStack) entry.getValue();
+            // KioCG start
+            int level = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.MENDING, itemstack);
+            if (player.random.nextInt(10) >= level) {
+                return amount;
+            }
+            // KioCG end
+
             int j = Math.min(this.xpToDurability(amount), itemstack.getDamageValue());
             // CraftBukkit start
             org.bukkit.event.player.PlayerItemMendEvent event = CraftEventFactory.callPlayerItemMendEvent(player, this, itemstack, entry.getKey(), j, this::durabilityToXp); // Paper - Expand PlayerItemMendEvent
@@ -361,11 +368,11 @@ public class ExperienceOrb extends Entity {
     }
 
     public int durabilityToXp(int repairAmount) {
-        return repairAmount / 2;
+        return repairAmount; // KioCG
     }
 
     public int xpToDurability(int experienceAmount) {
-        return experienceAmount * 2;
+        return experienceAmount; // KioCG
     }
 
     public int getValue() {
diff --git a/src/main/java/net/minecraft/world/entity/LightningBolt.java b/src/main/java/net/minecraft/world/entity/LightningBolt.java
index 0a8a53710c693a220e9475f6f3112b91d8209c00..9071bf401ae4ab4d65a5bd249876f84e769fd2c4 100644
--- a/src/main/java/net/minecraft/world/entity/LightningBolt.java
+++ b/src/main/java/net/minecraft/world/entity/LightningBolt.java
@@ -47,6 +47,7 @@ public class LightningBolt extends Entity {
     private final Set<Entity> hitEntities = Sets.newHashSet();
     private int blocksSetOnFire;
     public boolean isEffect; // Paper - Properly handle lightning effects api
+    public int times; public void setTimes(int times) { this.times = times; } public int getTimes() { return this.times; } // KioCG
 
     public LightningBolt(EntityType<? extends LightningBolt> type, Level world) {
         super(type, world);
@@ -54,6 +55,7 @@ public class LightningBolt extends Entity {
         this.life = 2;
         this.seed = this.random.nextLong();
         this.flashes = this.random.nextInt(3) + 1;
+        this.times = 1; // KioCG
     }
 
     public void setVisualOnly(boolean cosmetic) {
@@ -126,6 +128,21 @@ public class LightningBolt extends Entity {
                 }
 
                 this.discard(EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
+
+                // KioCG start
+                if (times > 1) {
+                    LightningBolt entitylightning = (LightningBolt) EntityType.LIGHTNING_BOLT.create(this.level());
+
+                    if (entitylightning != null) {
+                        entitylightning.moveTo(this.position());
+                        entitylightning.cause = this.cause;
+                        entitylightning.visualOnly = this.visualOnly;
+                        entitylightning.isEffect = this.isEffect;
+                        entitylightning.times = --this.times;
+                        ((ServerLevel) this.level()).strikeLightning(entitylightning);
+                    }
+                }
+                // KioCG end
             } else if (this.life < -this.random.nextInt(10)) {
                 --this.flashes;
                 this.life = 1;
@@ -274,11 +291,21 @@ public class LightningBolt extends Entity {
     @Override
     protected void defineSynchedData() {}
 
+    // KioCG start
     @Override
-    protected void readAdditionalSaveData(CompoundTag nbt) {}
+    protected void readAdditionalSaveData(CompoundTag nbt) {
+        if (nbt.contains("KioCG.Times", org.bukkit.craftbukkit.util.CraftMagicNumbers.NBT.TAG_INT)) {
+            this.times = nbt.getInt("KioCG.Times");
+        }
+    }
 
     @Override
-    protected void addAdditionalSaveData(CompoundTag nbt) {}
+    protected void addAdditionalSaveData(CompoundTag nbt) {
+        if (this.times > 1) {
+            nbt.putInt("KioCG.Times", this.times);
+        }
+    }
+    // KioCG end
 
     public int getBlocksSetOnFire() {
         return this.blocksSetOnFire;
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
index e8faca6e443239968f0111519f9e5cd018ed3297..f2293ab03f507a3506a364fd16ad3fae7c015a3d 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -75,6 +75,7 @@ public abstract class AbstractArrow extends Projectile {
     @Nullable
     private List<Entity> piercedAndKilledEntities;
     public ItemStack pickupItemStack;
+    public int flameLevel; // KioCG
 
     // Spigot Start
     @Override
@@ -97,7 +98,7 @@ public abstract class AbstractArrow extends Projectile {
         if (stack.hasCustomHoverName()) {
             this.setCustomName(stack.getHoverName());
         }
-
+        this.flameLevel = 0; // KioCG
     }
 
     protected AbstractArrow(EntityType<? extends AbstractArrow> type, double x, double y, double z, Level world, ItemStack stack) {
@@ -400,7 +401,7 @@ public abstract class AbstractArrow extends Projectile {
 
         if (this.isOnFire() && !flag && !flag1) {
             // CraftBukkit start
-            EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
+            EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5 * Math.max(1, this.flameLevel)); // KioCG
             org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
             if (!combustEvent.isCancelled()) {
                 entity.setSecondsOnFire(combustEvent.getDuration(), false);
@@ -541,6 +542,7 @@ public abstract class AbstractArrow extends Projectile {
         nbt.putString("SoundEvent", BuiltInRegistries.SOUND_EVENT.getKey(this.soundEvent).toString());
         nbt.putBoolean("ShotFromCrossbow", this.shotFromCrossbow());
         nbt.put("item", this.pickupItemStack.save(new CompoundTag()));
+        if (this.flameLevel > 0) nbt.putInt("KioCG.FlameLevel", this.flameLevel); // KioCG
     }
 
     @Override
@@ -569,6 +571,7 @@ public abstract class AbstractArrow extends Projectile {
             this.pickupItemStack = ItemStack.of(nbt.getCompound("item"));
         }
 
+        if (nbt.contains("KioCG.FlameLevel", org.bukkit.craftbukkit.util.CraftMagicNumbers.NBT.TAG_INT)) this.flameLevel = nbt.getInt("KioCG.FlameLevel"); // KioCG
     }
 
     @Override
@@ -706,6 +709,7 @@ public abstract class AbstractArrow extends Projectile {
 
         if (EnchantmentHelper.getEnchantmentLevel(Enchantments.FLAMING_ARROWS, entity) > 0) {
             this.setSecondsOnFire(100);
+            this.flameLevel = EnchantmentHelper.getEnchantmentLevel(Enchantments.FLAMING_ARROWS, entity); // KioCG
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
index 91497f5e6c07fcf1b05eca6846c51e1a15ed3bc0..d0eb970f79bcad1f9dbf992925db0212d12e6c92 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
@@ -414,7 +414,7 @@ public class FishingHook extends Projectile {
             } else {
                 // CraftBukkit start - logic to modify fishing wait time
                 this.timeUntilLured = Mth.nextInt(this.random, this.minWaitTime, this.maxWaitTime);
-                this.timeUntilLured -= (this.applyLure) ? (this.lureSpeed * 20 * 5 >= this.maxWaitTime ? this.timeUntilLured - 1 : this.lureSpeed * 20 * 5) : 0; // Paper - Fix Lure infinite loop
+                this.timeUntilLured -= (this.applyLure) ? (this.lureSpeed * 50 >= this.maxWaitTime ? this.timeUntilLured - 1 : this.lureSpeed * 50) : 0; // Paper - Fix Lure infinite loop // KioCG
                 // CraftBukkit end
             }
         }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
index 8ae7d62b72fb72d893e68b02b645d48374595ae6..411ee2f17a5d5a7916e329a231b8cba982f185dc 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
@@ -63,6 +63,16 @@ public class ThrownTrident extends AbstractArrow {
         Entity entity = this.getOwner();
         byte b0 = (Byte) this.entityData.get(ThrownTrident.ID_LOYALTY);
 
+        // KioCG start
+        if (b0 > 0 && !this.dealtDamage && !this.isNoPhysics() && entity != null) {
+            final int horizontalRange = ((ServerLevel) this.level()).playerChunkLoader.getAPITickDistance() * 16 - 4;
+            if (entity.position().distanceToSqr(this.position().x(), entity.position().y(), this.position().z()) > horizontalRange * horizontalRange) {
+                this.setNoPhysics(true);
+                this.setDeltaMovement(Vec3.ZERO);
+            }
+        }
+        // KioCG end
+
         if (b0 > 0 && (this.dealtDamage || this.isNoPhysics()) && entity != null) {
             if (!this.isAcceptibleReturnOwner()) {
                 if (!this.level().isClientSide && this.pickup == AbstractArrow.Pickup.ALLOWED) {
@@ -93,6 +103,17 @@ public class ThrownTrident extends AbstractArrow {
         super.tick();
     }
 
+    // KioCG start
+    @Override
+    protected void onBelowWorld() {
+        if ((Byte) this.entityData.get(ThrownTrident.ID_LOYALTY) > 0) {
+            this.setNoPhysics(true);
+        } else {
+            super.onBelowWorld();
+        }
+    }
+    // KioCG end
+
     private boolean isAcceptibleReturnOwner() {
         Entity entity = this.getOwner();
 
@@ -172,6 +193,7 @@ public class ThrownTrident extends AbstractArrow {
                 if (entitylightning != null) {
                     entitylightning.moveTo(Vec3.atBottomCenterOf(blockposition));
                     entitylightning.setCause(entity1 instanceof ServerPlayer ? (ServerPlayer) entity1 : null);
+                    entitylightning.setTimes(this.getChanneling()); // KioCG
                     ((ServerLevel) this.level()).strikeLightning(entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause.TRIDENT); // CraftBukkit
                     soundeffect = SoundEvents.TRIDENT_THUNDER;
                     f1 = 5.0F;
@@ -186,6 +208,12 @@ public class ThrownTrident extends AbstractArrow {
         return EnchantmentHelper.hasChanneling(this.getPickupItemStackOrigin());
     }
 
+    // KioCG start
+    public int getChanneling() {
+        return EnchantmentHelper.getChanneling(this.getPickupItemStackOrigin());
+    }
+    // KioCG end
+
     @Override
     protected boolean tryPickup(Player player) {
         return super.tryPickup(player) || this.isNoPhysics() && this.ownedBy(player) && player.getInventory().add(this.getPickupItem());
diff --git a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
index f7a48a6a5e4ffdc0caaec600ef96adc568afd010..e5b9eee51be4f29801d038ebf0d93d0761a0edf7 100644
--- a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -137,6 +137,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
                     int i = 0;
                     Iterator iterator = EnchantmentTableBlock.BOOKSHELF_OFFSETS.iterator();
 
+                    if (!world.getBlockState(blockposition).is(Blocks.ENCHANTING_TABLE)) { i = 15; } else // KioCG - 虚拟附魔台最大等级
                     while (iterator.hasNext()) {
                         BlockPos blockposition1 = (BlockPos) iterator.next();
 
diff --git a/src/main/java/net/minecraft/world/item/BowItem.java b/src/main/java/net/minecraft/world/item/BowItem.java
index 08d597db1a5345a343777a01427655e6bf2c926b..f35092ebebac5389bdc3ae45f73c7b20da32cf8f 100644
--- a/src/main/java/net/minecraft/world/item/BowItem.java
+++ b/src/main/java/net/minecraft/world/item/BowItem.java
@@ -26,7 +26,7 @@ public class BowItem extends ProjectileWeaponItem implements Vanishable {
     public void releaseUsing(ItemStack stack, Level world, LivingEntity user, int remainingUseTicks) {
         if (user instanceof Player) {
             Player entityhuman = (Player) user;
-            boolean flag = entityhuman.getAbilities().instabuild || EnchantmentHelper.getItemEnchantmentLevel(Enchantments.INFINITY_ARROWS, stack) > 0;
+            boolean flag = entityhuman.getAbilities().instabuild || EnchantmentHelper.getItemEnchantmentLevel(Enchantments.INFINITY_ARROWS, stack) > entityhuman.random.nextInt(10); // KioCG
             ItemStack itemstack1 = entityhuman.getProjectile(stack);
 
             if (!itemstack1.isEmpty() || flag) {
@@ -38,7 +38,7 @@ public class BowItem extends ProjectileWeaponItem implements Vanishable {
                 float f = BowItem.getPowerForTime(j);
 
                 if ((double) f >= 0.1D) {
-                    boolean flag1 = flag && itemstack1.is(Items.ARROW);
+                    boolean flag1 = flag; // KioCG
 
                     if (!world.isClientSide) {
                         ArrowItem itemarrow = (ArrowItem) (itemstack1.getItem() instanceof ArrowItem ? itemstack1.getItem() : Items.ARROW);
@@ -63,6 +63,7 @@ public class BowItem extends ProjectileWeaponItem implements Vanishable {
 
                         if (EnchantmentHelper.getItemEnchantmentLevel(Enchantments.FLAMING_ARROWS, stack) > 0) {
                             entityarrow.setSecondsOnFire(100);
+                            entityarrow.flameLevel = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.FLAMING_ARROWS, stack); // KioCG
                         }
                         // CraftBukkit start
                         org.bukkit.event.entity.EntityShootBowEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityShootBowEvent(entityhuman, stack, itemstack1, entityarrow, entityhuman.getUsedItemHand(), f, !flag1);
diff --git a/src/main/java/net/minecraft/world/item/CrossbowItem.java b/src/main/java/net/minecraft/world/item/CrossbowItem.java
index f3a428f80c265639250114498b10067b4bf1ada1..4206c9eacfa84507c69858d84bc3fb05fcc6e67f 100644
--- a/src/main/java/net/minecraft/world/item/CrossbowItem.java
+++ b/src/main/java/net/minecraft/world/item/CrossbowItem.java
@@ -114,6 +114,7 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable {
         // Paper end - Add EntityLoadCrossbowEvent
         int i = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.MULTISHOT, crossbow);
         int j = i == 0 ? 1 : 3;
+        if (i > 1) j += i - 1; // KioCG
         boolean flag = !consume || shooter instanceof Player && ((Player) shooter).getAbilities().instabuild; // Paper - Add EntityLoadCrossbowEvent
         ItemStack itemstack1 = shooter.getProjectile(crossbow);
         ItemStack itemstack2 = itemstack1.copy();
@@ -309,6 +310,13 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable {
                     CrossbowItem.shootProjectile(world, entity, hand, stack, itemstack1, afloat[i], flag, speed, divergence, -10.0F);
                 } else if (i == 2) {
                     CrossbowItem.shootProjectile(world, entity, hand, stack, itemstack1, afloat[i], flag, speed, divergence, 10.0F);
+                    // KioCG start
+                } else {
+                    RandomSource random = entity.getRandom();
+                    float afloat0 = 1.0F / (random.nextFloat() * 0.5F + 1.8F) + (random.nextFloat() * 0.2F + 0.43F);
+                    float simulated0 = random.nextFloat() * (random.nextBoolean() ? -10.0F : 10.0F);
+                    CrossbowItem.shootProjectile(world, entity, hand, stack, itemstack1, afloat0, flag, speed, divergence, simulated0);
+                    // KioCG end
                 }
             }
         }
@@ -376,6 +384,7 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable {
     public static int getChargeDuration(ItemStack stack) {
         int i = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.QUICK_CHARGE, stack);
 
+        if (i > 5) i = 5; // KioCG
         return i == 0 ? 25 : 25 - 5 * i;
     }
 
diff --git a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
index 496a9b9b095bd322fba8229a5d47e2a0107aeb96..0602ebe9142dc05a5e8017743cad8386085e6897 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
@@ -266,6 +266,36 @@ public class EnchantmentHelper {
         return getItemEnchantmentLevel(Enchantments.CHANNELING, stack) > 0;
     }
 
+    // KioCG start
+    public static int getAquaAffinity(LivingEntity entity) {
+        return getEnchantmentLevel(Enchantments.AQUA_AFFINITY, entity);
+    }
+
+    public static int getFrostWalker(LivingEntity entity) {
+        return getEnchantmentLevel(Enchantments.FROST_WALKER, entity);
+    }
+
+    public static int getSoulSpeed(LivingEntity entity) {
+        return getEnchantmentLevel(Enchantments.SOUL_SPEED, entity);
+    }
+
+    public static int getBindingCurse(ItemStack stack) {
+        return getItemEnchantmentLevel(Enchantments.BINDING_CURSE, stack);
+    }
+
+    public static int getVanishingCurse(ItemStack stack) {
+        return getItemEnchantmentLevel(Enchantments.VANISHING_CURSE, stack);
+    }
+
+    public static int getSilkTouch(ItemStack stack) {
+        return getItemEnchantmentLevel(Enchantments.SILK_TOUCH, stack);
+    }
+
+    public static int getChanneling(ItemStack stack) {
+        return getItemEnchantmentLevel(Enchantments.CHANNELING, stack);
+    }
+    // KioCG end
+
     @Nullable
     public static Entry<EquipmentSlot, ItemStack> getRandomItemWith(Enchantment enchantment, LivingEntity entity) {
         return getRandomItemWith(enchantment, entity, stack -> true);
diff --git a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
index ec4aaaca2160312452d724dc6639ac8c4fa42ae4..596455ad2680911adcaf0d6ef76f5f47ac013e9c 100644
--- a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
@@ -158,6 +158,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
                     Entity entity = projectile.getOwner();
 
                     entitylightning.setCause(entity instanceof ServerPlayer ? (ServerPlayer) entity : null);
+                    entitylightning.setTimes(((ThrownTrident) projectile).getChanneling()); // KioCG
                     ((ServerLevel) world).strikeLightning(entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause.TRIDENT); // CraftBukkit
                 }
 

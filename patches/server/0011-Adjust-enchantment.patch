From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Sun, 17 Mar 2024 01:21:46 +0800
Subject: [PATCH] Adjust enchantment


diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index 91931b1cf06ad489a5c3acd19f6d8706954f8997..a145720768cab69c58e66f26a923e92188ff4d96 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -419,6 +419,11 @@ public class GlobalConfiguration extends ConfigurationPart {
                 }
             }
         }
+
+        public Enchant enchant;
+        public class Enchant extends ConfigurationPart {
+            public boolean allowUnsafeCommand = true;
+        }
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/server/commands/EnchantCommand.java b/src/main/java/net/minecraft/server/commands/EnchantCommand.java
index 99695e38b6a10c3cffda6e453f9f0619c7406cc0..ee029a664540609fb11f941552f4f6d928da294d 100644
--- a/src/main/java/net/minecraft/server/commands/EnchantCommand.java
+++ b/src/main/java/net/minecraft/server/commands/EnchantCommand.java
@@ -70,7 +70,7 @@ public class EnchantCommand {
 
     private static int enchant(CommandSourceStack source, Collection<? extends Entity> targets, Holder<Enchantment> enchantment, int level) throws CommandSyntaxException {
         Enchantment enchantment2 = enchantment.value();
-        if (level > enchantment2.getMaxLevel()) {
+        if (!io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.enchant.allowUnsafeCommand && level > enchantment2.getMaxLevel()) { // KioCG
             throw ERROR_LEVEL_TOO_HIGH.create(level, enchantment2.getMaxLevel());
         } else {
             int i = 0;
@@ -80,7 +80,7 @@ public class EnchantCommand {
                     LivingEntity livingEntity = (LivingEntity)entity;
                     ItemStack itemStack = livingEntity.getMainHandItem();
                     if (!itemStack.isEmpty()) {
-                        if (enchantment2.canEnchant(itemStack)
+                        if (io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.enchant.allowUnsafeCommand || enchantment2.canEnchant(itemStack) // KioCG
                             && EnchantmentHelper.isEnchantmentCompatible(EnchantmentHelper.getEnchantmentsForCrafting(itemStack).keySet(), enchantment)) {
                             itemStack.enchant(enchantment, level);
                             i++;
diff --git a/src/main/java/net/minecraft/world/damagesource/CombatRules.java b/src/main/java/net/minecraft/world/damagesource/CombatRules.java
index 064c1e33f3feee77837bb57887877ae1ca39548d..5e43c364644039ad5aa231c7b489611e0296b2f0 100644
--- a/src/main/java/net/minecraft/world/damagesource/CombatRules.java
+++ b/src/main/java/net/minecraft/world/damagesource/CombatRules.java
@@ -30,6 +30,7 @@ public class CombatRules {
     }
 
     public static float getDamageAfterMagicAbsorb(float damageDealt, float protection) {
+        if (true) return damageDealt * (1.0F - (protection / (protection + 20.0F))); // KioCG
         float f = Mth.clamp(protection, 0.0F, 20.0F);
         return damageDealt * (1.0F - f / 25.0F);
     }
diff --git a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
index a58ff67052fb5f33782f8b5c83465ec03ef1d073..f33a6813383e0c24ac52445c5a87bdd95406d36e 100644
--- a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
+++ b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
@@ -351,6 +351,13 @@ public class ExperienceOrb extends Entity {
 
         if (optional.isPresent()) {
             ItemStack itemstack = ((EnchantedItemInUse) optional.get()).itemStack();
+            // KioCG start
+            int level = EnchantmentHelper.getItemEnchantmentLevel(this.registryAccess(), net.minecraft.world.item.enchantment.Enchantments.MENDING, itemstack);
+            if (player.random.nextInt(10) >= level) {
+                return amount;
+            }
+            // KioCG end
+
             int j = EnchantmentHelper.modifyDurabilityToRepairFromXp(player.serverLevel(), itemstack, amount);
             int k = Math.min(j, itemstack.getDamageValue());
             // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/entity/LightningBolt.java b/src/main/java/net/minecraft/world/entity/LightningBolt.java
index 4f701788bd21b61cad251a3a88f9bc416fb99051..f3b78df6bdd2f3fd833f63948594d0eebc9f717d 100644
--- a/src/main/java/net/minecraft/world/entity/LightningBolt.java
+++ b/src/main/java/net/minecraft/world/entity/LightningBolt.java
@@ -48,6 +48,7 @@ public class LightningBolt extends Entity {
     private final Set<Entity> hitEntities = Sets.newHashSet();
     private int blocksSetOnFire;
     public boolean isEffect; // Paper - Properly handle lightning effects api
+    public int times; public void setTimes(int times) { this.times = times; } public int getTimes() { return this.times; } // KioCG
 
     public LightningBolt(EntityType<? extends LightningBolt> type, Level world) {
         super(type, world);
@@ -55,6 +56,7 @@ public class LightningBolt extends Entity {
         this.life = 2;
         this.seed = this.random.nextLong();
         this.flashes = this.random.nextInt(3) + 1;
+        this.times = 1; // KioCG
     }
 
     public void setVisualOnly(boolean cosmetic) {
@@ -127,6 +129,21 @@ public class LightningBolt extends Entity {
                 }
 
                 this.discard(EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
+
+                // KioCG start
+                if (times > 1) {
+                    LightningBolt entitylightning = (LightningBolt) EntityType.LIGHTNING_BOLT.create(this.level());
+
+                    if (entitylightning != null) {
+                        entitylightning.moveTo(this.position());
+                        entitylightning.cause = this.cause;
+                        entitylightning.visualOnly = this.visualOnly;
+                        entitylightning.isEffect = this.isEffect;
+                        entitylightning.times = --this.times;
+                        ((ServerLevel) this.level()).strikeLightning(entitylightning);
+                    }
+                }
+                // KioCG end
             } else if (this.life < -this.random.nextInt(10)) {
                 --this.flashes;
                 this.life = 1;
@@ -275,11 +292,21 @@ public class LightningBolt extends Entity {
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {}
 
+    // KioCG start
     @Override
-    protected void readAdditionalSaveData(CompoundTag nbt) {}
+    protected void readAdditionalSaveData(CompoundTag nbt) {
+        if (nbt.contains("KioCG.Times", org.bukkit.craftbukkit.util.CraftMagicNumbers.NBT.TAG_INT)) {
+            this.times = nbt.getInt("KioCG.Times");
+        }
+    }
 
     @Override
-    protected void addAdditionalSaveData(CompoundTag nbt) {}
+    protected void addAdditionalSaveData(CompoundTag nbt) {
+        if (this.times > 1) {
+            nbt.putInt("KioCG.Times", this.times);
+        }
+    }
+    // KioCG end
 
     public int getBlocksSetOnFire() {
         return this.blocksSetOnFire;
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
index ddf47dab1ab92c45e3eea09239d418a9798ed59e..a5558f85a47953bf5abe2d170729910268057372 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -442,6 +442,14 @@ public abstract class AbstractArrow extends Projectile {
         if (this.isOnFire() && !flag) {
             // CraftBukkit start
             EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5.0F);
+            // KioCG start
+            if (this.getWeaponItem() != null) {
+                final int flameLevel = EnchantmentHelper.getItemEnchantmentLevel(this.registryAccess(), net.minecraft.world.item.enchantment.Enchantments.FLAME, this.getWeaponItem());
+                if (flameLevel > 1) {
+                    combustEvent.setDuration(combustEvent.getDuration() * flameLevel);
+                }
+            }
+            // KioCG end
             org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
             if (!combustEvent.isCancelled()) {
                 entity.igniteForSeconds(combustEvent.getDuration(), false);
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
index 44c733c5b2c3e9942f28e882ad72306a24459c2c..3ccc7a2959e45cc02d05dedd22e4dcb1d034d0eb 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
@@ -69,6 +69,16 @@ public class ThrownTrident extends AbstractArrow {
         Entity entity = this.getOwner();
         byte b0 = (Byte) this.entityData.get(ThrownTrident.ID_LOYALTY);
 
+        // KioCG start
+        if (b0 > 0 && !this.dealtDamage && !this.isNoPhysics() && entity != null) {
+            final int horizontalRange = ((ServerLevel) this.level()).moonrise$getPlayerChunkLoader().getAPITickDistance() * 16 - 4;
+            if (entity.position().distanceToSqr(this.position().x(), entity.position().y(), this.position().z()) > horizontalRange * horizontalRange) {
+                this.setNoPhysics(true);
+                this.setDeltaMovement(Vec3.ZERO);
+            }
+        }
+        // KioCG end
+
         if (b0 > 0 && (this.dealtDamage || this.isNoPhysics()) && entity != null) {
             if (!this.isAcceptibleReturnOwner()) {
                 if (!this.level().isClientSide && this.pickup == AbstractArrow.Pickup.ALLOWED) {
@@ -99,6 +109,17 @@ public class ThrownTrident extends AbstractArrow {
         super.tick();
     }
 
+    // KioCG start
+    @Override
+    protected void onBelowWorld() {
+        if ((Byte) this.entityData.get(ThrownTrident.ID_LOYALTY) > 0) {
+            this.setNoPhysics(true);
+        } else {
+            super.onBelowWorld();
+        }
+    }
+    // KioCG end
+
     private boolean isAcceptibleReturnOwner() {
         Entity entity = this.getOwner();
 
@@ -151,6 +172,16 @@ public class ThrownTrident extends AbstractArrow {
             if (world instanceof ServerLevel) {
                 ServerLevel worldserver = (ServerLevel) world; // CraftBukkit - decompile error
                 EnchantmentHelper.doPostAttackEffectsWithItemSource(worldserver, entity, damagesource, this.getWeaponItem());
+                // KioCG start
+                if (this.getWeaponItem() != null) {
+                    final java.util.List<Entity> entities = this.level().getEntities((Entity) this, new net.minecraft.world.phys.AABB(entity.getX(), entity.getY(), entity.getZ(), entity.getX(), entity.getY(), entity.getZ()), entityLightningBolt -> {
+                        return entityLightningBolt.getType() == EntityType.LIGHTNING_BOLT && entityLightningBolt.tickCount == 0 && ((net.minecraft.world.entity.LightningBolt) entityLightningBolt).times == 1;
+                    });
+                    if (!entities.isEmpty()) {
+                        ((net.minecraft.world.entity.LightningBolt) entities.getFirst()).setTimes(EnchantmentHelper.getItemEnchantmentLevel(this.registryAccess(), net.minecraft.world.item.enchantment.Enchantments.CHANNELING, this.getWeaponItem()));
+                    }
+                }
+                // KioCG end
             }
 
             if (entity instanceof LivingEntity) {
@@ -180,6 +211,14 @@ public class ThrownTrident extends AbstractArrow {
         EnchantmentHelper.onHitBlock(world, weaponStack, entityliving, this, (EquipmentSlot) null, vec3d, world.getBlockState(blockHitResult.getBlockPos()), (item) -> {
             this.kill();
         });
+        // KioCG start
+        final java.util.List<Entity> entities = this.level().getEntities((Entity) this, new net.minecraft.world.phys.AABB(vec3d.x, vec3d.y, vec3d.z, vec3d.x, vec3d.y, vec3d.z), entityLightningBolt -> {
+            return entityLightningBolt.getType() == EntityType.LIGHTNING_BOLT && entityLightningBolt.tickCount == 0 && ((net.minecraft.world.entity.LightningBolt) entityLightningBolt).times == 1;
+        });
+        if (!entities.isEmpty()) {
+            ((net.minecraft.world.entity.LightningBolt) entities.getFirst()).setTimes(EnchantmentHelper.getItemEnchantmentLevel(this.registryAccess(), net.minecraft.world.item.enchantment.Enchantments.CHANNELING, weaponStack));
+        }
+        // KioCG end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
index ae64e05a72b4fc6c898c0fbb47cff7eeadeb1f44..96edb8830f76accec8d9b72de98bb8e3f41ba1c0 100644
--- a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -143,6 +143,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
                     int i = 0;
                     Iterator iterator = EnchantingTableBlock.BOOKSHELF_OFFSETS.iterator();
 
+                    if (!world.getBlockState(blockposition).is(Blocks.ENCHANTING_TABLE)) { i = 15; } else // KioCG - 虚拟附魔台最大等级
                     while (iterator.hasNext()) {
                         BlockPos blockposition1 = (BlockPos) iterator.next();
 
diff --git a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
index fce49b17905ab97e691aa8499a5dfed67adf0c40..7c7443ed19ebcb2abac470d6b10329a296cf892f 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
@@ -51,6 +51,13 @@ public class EnchantmentHelper {
         return itemEnchantments.getLevel(enchantment);
     }
 
+    // KioCG start
+    public static int getItemEnchantmentLevel(RegistryAccess registryManager, ResourceKey<Enchantment> enchantmentkey, ItemStack stack) {
+        final Optional<Holder.Reference<Enchantment>> holder = registryManager.registryOrThrow(Registries.ENCHANTMENT).getHolder(enchantmentkey);
+        return holder.map(enchantmentReference -> getItemEnchantmentLevel(enchantmentReference, stack)).orElse(0);
+    }
+    // KioCG end
+
     public static ItemEnchantments updateEnchantments(ItemStack stack, Consumer<ItemEnchantments.Mutable> applier) {
         DataComponentType<ItemEnchantments> dataComponentType = getComponentType(stack);
         ItemEnchantments itemEnchantments = stack.get(dataComponentType);

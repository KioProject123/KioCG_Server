From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Sun, 17 Mar 2024 01:21:46 +0800
Subject: [PATCH] Adjust enchantment


diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index 35e0cd94aa373cba9b88fe44f94c3a58c7311e25..46a759890f058c57a4569cdb7794e370b4f286f0 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -410,6 +410,11 @@ public class GlobalConfiguration extends ConfigurationPart {
                 }
             }
         }
+
+        public Enchant enchant;
+        public class Enchant extends ConfigurationPart {
+            public boolean allowUnsafeCommand = true;
+        }
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/server/commands/EnchantCommand.java b/src/main/java/net/minecraft/server/commands/EnchantCommand.java
index 84f1ba6275f04624f46ccd772924b5e075e7b205..2c7222051404f2f4aefa2b3b4ed07f23dccdbacd 100644
--- a/src/main/java/net/minecraft/server/commands/EnchantCommand.java
+++ b/src/main/java/net/minecraft/server/commands/EnchantCommand.java
@@ -70,7 +70,7 @@ public class EnchantCommand {
 
     private static int enchant(CommandSourceStack source, Collection<? extends Entity> targets, Holder<Enchantment> enchantment, int level) throws CommandSyntaxException {
         Enchantment enchantment2 = enchantment.value();
-        if (level > enchantment2.getMaxLevel()) {
+        if (!io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.enchant.allowUnsafeCommand && level > enchantment2.getMaxLevel()) { // KioCG
             throw ERROR_LEVEL_TOO_HIGH.create(level, enchantment2.getMaxLevel());
         } else {
             int i = 0;
@@ -80,7 +80,7 @@ public class EnchantCommand {
                     LivingEntity livingEntity = (LivingEntity)entity;
                     ItemStack itemStack = livingEntity.getMainHandItem();
                     if (!itemStack.isEmpty()) {
-                        if (enchantment2.canEnchant(itemStack)
+                        if (io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.enchant.allowUnsafeCommand || enchantment2.canEnchant(itemStack) // KioCG
                             && EnchantmentHelper.isEnchantmentCompatible(EnchantmentHelper.getEnchantmentsForCrafting(itemStack).keySet(), enchantment2)) {
                             itemStack.enchant(enchantment2, level);
                             i++;
diff --git a/src/main/java/net/minecraft/world/damagesource/CombatRules.java b/src/main/java/net/minecraft/world/damagesource/CombatRules.java
index ddc880ac0c8378bc1132be5deba746c1484c941c..ad03c942ab086f90609cad6638b5a1104627bd95 100644
--- a/src/main/java/net/minecraft/world/damagesource/CombatRules.java
+++ b/src/main/java/net/minecraft/world/damagesource/CombatRules.java
@@ -20,6 +20,7 @@ public class CombatRules {
     }
 
     public static float getDamageAfterMagicAbsorb(float damageDealt, float protection) {
+        if (true) return damageDealt * (1.0F - (protection / (protection + 20.0F))); // KioCG
         float f = Mth.clamp(protection, 0.0F, 20.0F);
         return damageDealt * (1.0F - f / 25.0F);
     }
diff --git a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
index a207a31d80a302dbdfe80f8727222542d3a78da2..a2fcabe348c7f4e8aa1cd2e0d2243c1f37a56c96 100644
--- a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
+++ b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
@@ -342,6 +342,13 @@ public class ExperienceOrb extends Entity {
 
         if (entry != null) {
             ItemStack itemstack = (ItemStack) entry.getValue();
+            // KioCG start
+            int level = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.MENDING, itemstack);
+            if (player.random.nextInt(10) >= level) {
+                return amount;
+            }
+            // KioCG end
+
             int j = Math.min(this.xpToDurability(amount), itemstack.getDamageValue());
             // CraftBukkit start
             org.bukkit.event.player.PlayerItemMendEvent event = CraftEventFactory.callPlayerItemMendEvent(player, this, itemstack, entry.getKey(), j, this::durabilityToXp); // Paper - Expand PlayerItemMendEvent
@@ -367,11 +374,11 @@ public class ExperienceOrb extends Entity {
     }
 
     public int durabilityToXp(int repairAmount) {
-        return repairAmount / 2;
+        return repairAmount; // KioCG
     }
 
     public int xpToDurability(int experienceAmount) {
-        return experienceAmount * 2;
+        return experienceAmount; // KioCG
     }
 
     public int getValue() {
diff --git a/src/main/java/net/minecraft/world/entity/LightningBolt.java b/src/main/java/net/minecraft/world/entity/LightningBolt.java
index 4f701788bd21b61cad251a3a88f9bc416fb99051..f3b78df6bdd2f3fd833f63948594d0eebc9f717d 100644
--- a/src/main/java/net/minecraft/world/entity/LightningBolt.java
+++ b/src/main/java/net/minecraft/world/entity/LightningBolt.java
@@ -48,6 +48,7 @@ public class LightningBolt extends Entity {
     private final Set<Entity> hitEntities = Sets.newHashSet();
     private int blocksSetOnFire;
     public boolean isEffect; // Paper - Properly handle lightning effects api
+    public int times; public void setTimes(int times) { this.times = times; } public int getTimes() { return this.times; } // KioCG
 
     public LightningBolt(EntityType<? extends LightningBolt> type, Level world) {
         super(type, world);
@@ -55,6 +56,7 @@ public class LightningBolt extends Entity {
         this.life = 2;
         this.seed = this.random.nextLong();
         this.flashes = this.random.nextInt(3) + 1;
+        this.times = 1; // KioCG
     }
 
     public void setVisualOnly(boolean cosmetic) {
@@ -127,6 +129,21 @@ public class LightningBolt extends Entity {
                 }
 
                 this.discard(EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
+
+                // KioCG start
+                if (times > 1) {
+                    LightningBolt entitylightning = (LightningBolt) EntityType.LIGHTNING_BOLT.create(this.level());
+
+                    if (entitylightning != null) {
+                        entitylightning.moveTo(this.position());
+                        entitylightning.cause = this.cause;
+                        entitylightning.visualOnly = this.visualOnly;
+                        entitylightning.isEffect = this.isEffect;
+                        entitylightning.times = --this.times;
+                        ((ServerLevel) this.level()).strikeLightning(entitylightning);
+                    }
+                }
+                // KioCG end
             } else if (this.life < -this.random.nextInt(10)) {
                 --this.flashes;
                 this.life = 1;
@@ -275,11 +292,21 @@ public class LightningBolt extends Entity {
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {}
 
+    // KioCG start
     @Override
-    protected void readAdditionalSaveData(CompoundTag nbt) {}
+    protected void readAdditionalSaveData(CompoundTag nbt) {
+        if (nbt.contains("KioCG.Times", org.bukkit.craftbukkit.util.CraftMagicNumbers.NBT.TAG_INT)) {
+            this.times = nbt.getInt("KioCG.Times");
+        }
+    }
 
     @Override
-    protected void addAdditionalSaveData(CompoundTag nbt) {}
+    protected void addAdditionalSaveData(CompoundTag nbt) {
+        if (this.times > 1) {
+            nbt.putInt("KioCG.Times", this.times);
+        }
+    }
+    // KioCG end
 
     public int getBlocksSetOnFire() {
         return this.blocksSetOnFire;
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
index 31b8a8bf78d52b5f11b68e780ec09bf78e7bda84..e7723c63139a4e677de9863c7ad1a543e87a7792 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -77,6 +77,7 @@ public abstract class AbstractArrow extends Projectile {
     @Nullable
     private List<Entity> piercedAndKilledEntities;
     public ItemStack pickupItemStack;
+    public int flameLevel = 0; // KioCG
 
     // Spigot Start
     @Override
@@ -411,7 +412,7 @@ public abstract class AbstractArrow extends Projectile {
 
         if (this.isOnFire() && !flag) {
             // CraftBukkit start
-            EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
+            EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5 * Math.max(1, this.flameLevel)); // KioCG
             org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
             if (!combustEvent.isCancelled()) {
                 entity.igniteForSeconds(combustEvent.getDuration(), false);
@@ -541,6 +542,7 @@ public abstract class AbstractArrow extends Projectile {
         nbt.putString("SoundEvent", BuiltInRegistries.SOUND_EVENT.getKey(this.soundEvent).toString());
         nbt.putBoolean("ShotFromCrossbow", this.shotFromCrossbow());
         nbt.put("item", this.pickupItemStack.save(this.registryAccess()));
+        if (this.flameLevel > 0) nbt.putInt("KioCG.FlameLevel", this.flameLevel); // KioCG
     }
 
     @Override
@@ -571,6 +573,7 @@ public abstract class AbstractArrow extends Projectile {
             this.setPickupItemStack(this.getDefaultPickupItem());
         }
 
+        if (nbt.contains("KioCG.FlameLevel", org.bukkit.craftbukkit.util.CraftMagicNumbers.NBT.TAG_INT)) this.flameLevel = nbt.getInt("KioCG.FlameLevel"); // KioCG
     }
 
     @Override
@@ -721,7 +724,11 @@ public abstract class AbstractArrow extends Projectile {
             this.setKnockback(j);
         }
 
-        if (EnchantmentHelper.getEnchantmentLevel(Enchantments.FLAME, entity) > 0) {
+        // KioCG start
+        int flameLevel = EnchantmentHelper.getEnchantmentLevel(Enchantments.FLAME, entity);
+        if (flameLevel > 0) {
+            this.flameLevel = flameLevel;
+        // KioCG end
             this.igniteForSeconds(100);
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
index 35299affb699d745804a3b60cb78b9323f3e068e..2d12c0e6cf95e18d5f44323c4a32cf3a04815bfc 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
@@ -414,7 +414,7 @@ public class FishingHook extends Projectile {
             } else {
                 // CraftBukkit start - logic to modify fishing wait time
                 this.timeUntilLured = Mth.nextInt(this.random, this.minWaitTime, this.maxWaitTime);
-                this.timeUntilLured -= (this.applyLure) ? (this.lureSpeed * 20 * 5 >= this.maxWaitTime ? this.timeUntilLured - 1 : this.lureSpeed * 20 * 5) : 0; // Paper - Fix Lure infinite loop
+                this.timeUntilLured -= (this.applyLure) ? (this.lureSpeed * 50 >= this.maxWaitTime ? this.timeUntilLured - 1 : this.lureSpeed * 50) : 0; // Paper - Fix Lure infinite loop // KioCG
                 // CraftBukkit end
             }
         }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
index 3ff06cc6ad35567bcb1f29115db63c11a8e79dbb..2c4b0f20d888b2a0f5a01039669ed79cc46df097 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
@@ -67,6 +67,16 @@ public class ThrownTrident extends AbstractArrow {
         Entity entity = this.getOwner();
         byte b0 = (Byte) this.entityData.get(ThrownTrident.ID_LOYALTY);
 
+        // KioCG start
+        if (b0 > 0 && !this.dealtDamage && !this.isNoPhysics() && entity != null) {
+            final int horizontalRange = ((ServerLevel) this.level()).playerChunkLoader.getAPITickDistance() * 16 - 4;
+            if (entity.position().distanceToSqr(this.position().x(), entity.position().y(), this.position().z()) > horizontalRange * horizontalRange) {
+                this.setNoPhysics(true);
+                this.setDeltaMovement(Vec3.ZERO);
+            }
+        }
+        // KioCG end
+
         if (b0 > 0 && (this.dealtDamage || this.isNoPhysics()) && entity != null) {
             if (!this.isAcceptibleReturnOwner()) {
                 if (!this.level().isClientSide && this.pickup == AbstractArrow.Pickup.ALLOWED) {
@@ -97,6 +107,17 @@ public class ThrownTrident extends AbstractArrow {
         super.tick();
     }
 
+    // KioCG start
+    @Override
+    protected void onBelowWorld() {
+        if ((Byte) this.entityData.get(ThrownTrident.ID_LOYALTY) > 0) {
+            this.setNoPhysics(true);
+        } else {
+            super.onBelowWorld();
+        }
+    }
+    // KioCG end
+
     private boolean isAcceptibleReturnOwner() {
         Entity entity = this.getOwner();
 
@@ -171,6 +192,7 @@ public class ThrownTrident extends AbstractArrow {
                 if (entitylightning != null) {
                     entitylightning.moveTo(Vec3.atBottomCenterOf(blockposition));
                     entitylightning.setCause(entity1 instanceof ServerPlayer ? (ServerPlayer) entity1 : null);
+                    entitylightning.setTimes(this.getChanneling()); // KioCG
                     ((ServerLevel) this.level()).strikeLightning(entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause.TRIDENT); // CraftBukkit
                     soundeffect = SoundEvents.TRIDENT_THUNDER;
                     f1 = 5.0F;
@@ -185,6 +207,12 @@ public class ThrownTrident extends AbstractArrow {
         return EnchantmentHelper.hasChanneling(this.getPickupItemStackOrigin());
     }
 
+    // KioCG start
+    public int getChanneling() {
+        return EnchantmentHelper.getChanneling(this.getPickupItemStackOrigin());
+    }
+    // KioCG end
+
     @Override
     protected boolean tryPickup(Player player) {
         return super.tryPickup(player) || this.isNoPhysics() && this.ownedBy(player) && player.getInventory().add(this.getPickupItem());
diff --git a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
index b42f19dfc410abd8e2b4c674d741a4e84ed6fa74..b5a80d5f6e4a28028055abfc943a5b54302c0852 100644
--- a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -135,6 +135,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
                     int i = 0;
                     Iterator iterator = EnchantingTableBlock.BOOKSHELF_OFFSETS.iterator();
 
+                    if (!world.getBlockState(blockposition).is(Blocks.ENCHANTING_TABLE)) { i = 15; } else // KioCG - 虚拟附魔台最大等级
                     while (iterator.hasNext()) {
                         BlockPos blockposition1 = (BlockPos) iterator.next();
 
diff --git a/src/main/java/net/minecraft/world/item/CrossbowItem.java b/src/main/java/net/minecraft/world/item/CrossbowItem.java
index 1f52feb5684ee1bab710e1557cf69b43b4d4dfd4..06488954fc09370734ab0d2d09e781e976a6bbf1 100644
--- a/src/main/java/net/minecraft/world/item/CrossbowItem.java
+++ b/src/main/java/net/minecraft/world/item/CrossbowItem.java
@@ -236,6 +236,7 @@ public class CrossbowItem extends ProjectileWeaponItem {
 
     public static int getChargeDuration(ItemStack stack) {
         int i = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.QUICK_CHARGE, stack);
+        if (i > 5) i = 5; // KioCG
         return i == 0 ? 25 : 25 - 5 * i;
     }
 
diff --git a/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java b/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java
index d27e83c08c45b8514207f26e48ceb1a91ded94be..e5ce0c84d6f7dbc4e67bb78f8a11e26252efbd5a 100644
--- a/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java
+++ b/src/main/java/net/minecraft/world/item/ProjectileWeaponItem.java
@@ -121,7 +121,11 @@ public abstract class ProjectileWeaponItem extends Item {
             entityarrow.setKnockback(j);
         }
 
-        if (EnchantmentHelper.getItemEnchantmentLevel(Enchantments.FLAME, weaponStack) > 0) {
+        // KioCG start
+        int flameLevel = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.FLAME, weaponStack);
+        if (flameLevel > 0) {
+            entityarrow.flameLevel = flameLevel;
+        // KioCG end
             entityarrow.igniteForSeconds(100);
         }
 
@@ -134,8 +138,8 @@ public abstract class ProjectileWeaponItem extends Item {
         return entityarrow;
     }
 
-    protected static boolean hasInfiniteArrows(ItemStack weaponStack, ItemStack projectileStack, boolean creative) {
-        return creative || projectileStack.is(Items.ARROW) && EnchantmentHelper.getItemEnchantmentLevel(Enchantments.INFINITY, weaponStack) > 0;
+    protected static boolean hasInfiniteArrows(ItemStack weaponStack, ItemStack projectileStack, boolean creative, net.minecraft.util.RandomSource random) { // KioCG - add RandomSource
+        return creative || EnchantmentHelper.getItemEnchantmentLevel(Enchantments.INFINITY, weaponStack) > random.nextInt(10); // KioCG
     }
 
     protected static List<ItemStack> draw(ItemStack weaponStack, ItemStack projectileStack, LivingEntity shooter) {
@@ -148,7 +152,7 @@ public abstract class ProjectileWeaponItem extends Item {
             return List.of();
         } else {
             int i = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.MULTISHOT, weaponStack);
-            int j = i == 0 ? 1 : 3;
+            int j = i + 1; // KioCG
             List<ItemStack> list = new ArrayList(j);
             ItemStack itemstack2 = projectileStack.copy();
 
@@ -161,7 +165,7 @@ public abstract class ProjectileWeaponItem extends Item {
     }
 
     protected static ItemStack useAmmo(ItemStack weaponStack, ItemStack projectileStack, LivingEntity shooter, boolean multishot) {
-        boolean flag1 = !multishot && !ProjectileWeaponItem.hasInfiniteArrows(weaponStack, projectileStack, shooter.hasInfiniteMaterials());
+        boolean flag1 = !multishot && !ProjectileWeaponItem.hasInfiniteArrows(weaponStack, projectileStack, shooter.hasInfiniteMaterials(), shooter.random); // KioCG - add RandomSource
         ItemStack itemstack2;
 
         if (!flag1) {
diff --git a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
index d2f0463b0e74983eb2e3dfca9a268e9502b86257..50eaf5c77e447a2d9463ec48a67e66d2ee457672 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
@@ -237,6 +237,36 @@ public class EnchantmentHelper {
         return getItemEnchantmentLevel(Enchantments.CHANNELING, stack) > 0;
     }
 
+    // KioCG start
+    public static int getAquaAffinity(LivingEntity entity) {
+        return getEnchantmentLevel(Enchantments.AQUA_AFFINITY, entity);
+    }
+
+    public static int getFrostWalker(LivingEntity entity) {
+        return getEnchantmentLevel(Enchantments.FROST_WALKER, entity);
+    }
+
+    public static int getSoulSpeed(LivingEntity entity) {
+        return getEnchantmentLevel(Enchantments.SOUL_SPEED, entity);
+    }
+
+    public static int getBindingCurse(ItemStack stack) {
+        return getItemEnchantmentLevel(Enchantments.BINDING_CURSE, stack);
+    }
+
+    public static int getVanishingCurse(ItemStack stack) {
+        return getItemEnchantmentLevel(Enchantments.VANISHING_CURSE, stack);
+    }
+
+    public static int getSilkTouch(ItemStack stack) {
+        return getItemEnchantmentLevel(Enchantments.SILK_TOUCH, stack);
+    }
+
+    public static int getChanneling(ItemStack stack) {
+        return getItemEnchantmentLevel(Enchantments.CHANNELING, stack);
+    }
+    // KioCG end
+
     @Nullable
     public static java.util.Map.Entry<EquipmentSlot, ItemStack> getRandomItemWith(Enchantment enchantment, LivingEntity entity) {
         return getRandomItemWith(enchantment, entity, stack -> true);
diff --git a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
index d230ead6042239178bd5c3345aa5366e3082637f..401e8c94fda1f5db87f7f63c4d4ae1756c2f307f 100644
--- a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
@@ -158,6 +158,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
                     Entity entity = projectile.getOwner();
 
                     entitylightning.setCause(entity instanceof ServerPlayer ? (ServerPlayer) entity : null);
+                    entitylightning.setTimes(((ThrownTrident) projectile).getChanneling()); // KioCG
                     ((ServerLevel) world).strikeLightning(entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause.TRIDENT); // CraftBukkit
                 }
 

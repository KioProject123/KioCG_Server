From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Wed, 13 Mar 2024 01:10:57 +0800
Subject: [PATCH] Monster strengthens


diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index 5000a16c7e4647b5aa5be7e2190077bb4448d363..ae6c6b3a32ceddcb6636941ce827e78b9d4fc6bf 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -626,6 +626,14 @@ public class WorldConfiguration extends ConfigurationPart {
                 map.defaultReturnValue(1.5);
                 map.put(EntityType.SKELETON, 1.5);
             });
+
+            public KiocgConfig.Entity.Monster monster;
+            public class Monster extends ConfigurationPart {
+                public boolean spawnInLightAtNight = true;
+                public int darkEnoughToSprint = 7;
+                public double zombiesSkinnedChance = 0.25;
+                public boolean babyZombieJockey = true;
+            }
         }
     }
     // KioCG end
diff --git a/src/main/java/net/minecraft/world/entity/monster/Monster.java b/src/main/java/net/minecraft/world/entity/monster/Monster.java
index e7bfce0534c7ef3a1480a1082ae8514caf78778b..a80ce791255845669592fab922798df66511f41c 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Monster.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Monster.java
@@ -42,6 +42,19 @@ public abstract class Monster extends PathfinderMob implements Enemy {
         this.updateSwingTime();
         this.updateNoActionTime();
         super.aiStep();
+
+        // KioCG start
+        final int darkEnoughToSprint = this.level().paperConfig().kiocgConfig.entity.monster.darkEnoughToSprint;
+        if (darkEnoughToSprint >= 0 && this.level().getMaxLocalRawBrightness(this.blockPosition()) <= darkEnoughToSprint) {
+            if (!this.isSprinting()) {
+                this.setSprinting(true);
+            }
+        } else {
+            if (this.isSprinting()) {
+                this.setSprinting(false);
+            }
+        }
+        // KioCG end
     }
 
     protected void updateNoActionTime() {
@@ -90,6 +103,7 @@ public abstract class Monster extends PathfinderMob implements Enemy {
         if (world.getBrightness(LightLayer.SKY, pos) > random.nextInt(32)) {
             return false;
         } else {
+            if (world instanceof net.minecraft.server.level.ServerLevel level && level.paperConfig().kiocgConfig.entity.monster.spawnInLightAtNight && world.getSkyDarken() >= 5) return true; // KioCG
             DimensionType dimensionType = world.dimensionType();
             int i = world.getLevel().paperConfig().entities.spawning.monsterSpawnMaxLightLevel.or(dimensionType.monsterSpawnBlockLightLimit()); // Paper - Configurable max block light for monster spawning
             if (i < 15 && world.getBrightness(LightLayer.BLOCK, pos) > i) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Spider.java b/src/main/java/net/minecraft/world/entity/monster/Spider.java
index a30fb47559eb74b7fe634678e63a85e7e2cad9a4..de9f64f8e7247fe27b960b55b9d9837a96eebcbb 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Spider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Spider.java
@@ -192,7 +192,7 @@ public class Spider extends Monster {
 
         @Override
         public boolean canUse() {
-            return super.canUse() && !this.mob.isVehicle();
+            return super.canUse() && !(this.mob.getControllingPassenger() instanceof Monster); // KioCG
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index 8c180d6286cda99a7fd656eab588f55584e6e10f..8de73725f9121cd9ba79ed7b2020c3ccff684d41 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -117,6 +117,16 @@ public class Zombie extends Monster {
     }
 
     protected void addBehaviourGoals() {
+        // KioCG start
+        if (this.level().paperConfig().kiocgConfig.entity.monster.babyZombieJockey) {
+            this.goalSelector.addGoal(3, new net.minecraft.world.entity.ai.goal.LeapAtTargetGoal(this, 0.4F) {
+                @Override
+                public boolean canUse() {
+                    return Zombie.this.isBaby() && super.canUse();
+                }
+            });
+        }
+        // KioCG end
         this.goalSelector.addGoal(2, new ZombieAttackGoal(this, 1.0D, false));
         // this.goalSelector.addGoal(6, new MoveThroughVillageGoal(this, 1.0D, true, 4, this::canBreakDoors)); // KioCG - 优化实体行为
         this.goalSelector.addGoal(7, new WaterAvoidingRandomStrollGoal(this, 1.0D));
@@ -308,6 +318,61 @@ public class Zombie extends Monster {
 
     }
 
+    // KioCG start
+    private boolean skipEquipmentLoot;
+
+    @Override
+    protected boolean shouldSkipLoot(EquipmentSlot slot) {
+        return skipEquipmentLoot;
+    }
+
+    @Override
+    public void die(DamageSource damageSource) {
+        if (damageSource.is(net.minecraft.tags.DamageTypeTags.IS_PLAYER_ATTACK) && this.random.nextDouble() < this.level().paperConfig().kiocgConfig.entity.monster.zombiesSkinnedChance) {
+            if (!this.isRemoved() && !this.dead) {
+                Entity entity = damageSource.getEntity();
+                Level world = this.level();
+
+                if (world instanceof ServerLevel) {
+                    ServerLevel worldserver = (ServerLevel) world;
+
+                    skipEquipmentLoot = true; // 僵尸剥皮: 不要掉落护甲
+                    org.bukkit.event.entity.EntityDeathEvent deathEvent = this.dropAllDeathLoot(worldserver, damageSource);
+                    skipEquipmentLoot = false; // 僵尸剥皮: 不要掉落护甲
+                    if (deathEvent == null || !deathEvent.isCancelled()) {
+                        if (this.isSleeping()) {
+                            this.stopSleeping();
+                        }
+
+                        this.getCombatTracker().recheckStatus();
+                        if (entity != null) {
+                            entity.killedEntity((ServerLevel) this.level(), this);
+                        }
+                        this.gameEvent(net.minecraft.world.level.gameevent.GameEvent.ENTITY_DIE);
+                    } else {
+                        this.setHealth((float) deathEvent.getReviveHealth());
+                        return;
+                    }
+
+                    Skeleton skeleton = this.convertTo(EntityType.SKELETON, true, EntityTransformEvent.TransformReason.PEELING, CreatureSpawnEvent.SpawnReason.PEELING);
+                    if (skeleton != null) {
+                        skeleton.setDeltaMovement(this.getDeltaMovement());
+                        skeleton.setTarget(this.getTarget(), null, false);
+                        skeleton.getNavigation().moveTo(this.getNavigation().getPath(), 1.2D);
+                        skeleton.setAggressive(this.isAggressive());
+                    }
+
+                    if (!this.isSilent()) {
+                        this.level().levelEvent((Player) null, net.minecraft.world.level.block.LevelEvent.SOUND_SKELETON_TO_STRAY, this.blockPosition(), 0);
+                    }
+                }
+            }
+        } else {
+            super.die(damageSource);
+        }
+    }
+    // KioCG end
+
     public boolean isSunSensitive() {
         return this.shouldBurnInDay; // Paper - Add more Zombie API
     }

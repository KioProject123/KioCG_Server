From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Fri, 15 Mar 2024 10:48:31 +0800
Subject: [PATCH] Auto discard rider display entity


diff --git a/src/main/java/net/minecraft/world/entity/Display.java b/src/main/java/net/minecraft/world/entity/Display.java
index a658943669cdfd49f66ba713505d11b33306ed86..cadb601efa9ea300c4ec4ac1ddb9ef6746061854 100644
--- a/src/main/java/net/minecraft/world/entity/Display.java
+++ b/src/main/java/net/minecraft/world/entity/Display.java
@@ -97,6 +97,19 @@ public abstract class Display extends Entity {
     private Display.RenderState renderState;
     @Nullable
     private Display.PosRotInterpolationTarget posRotInterpolationTarget;
+    // KioCG start
+    @Nullable
+    private Integer riderPriority = null;
+
+    @Nullable
+    public Integer getRiderPriority() {
+        return this.riderPriority;
+    }
+
+    public void setRiderPriority(@Nullable Integer riderPriority) {
+        this.riderPriority = riderPriority;
+    }
+    // KioCG end
 
     public Display(EntityType<?> type, Level world) {
         super(type, world);
@@ -180,6 +193,22 @@ public abstract class Display extends Entity {
         }
     }
 
+    // KioCG start
+    @Override
+    public void stopRiding(boolean suppressCancellation) {
+        if (this.riderPriority != null) {
+            Entity entity = this.getVehicle();
+            super.stopRiding(suppressCancellation);
+            if (entity != null && this.getVehicle() == null) {
+                this.discard();
+            }
+            return;
+        }
+
+        super.stopRiding(suppressCancellation);
+    }
+    // KioCG end
+
     protected abstract void updateRenderSubState(boolean shouldLerp, float lerpProgress);
 
     @Override
@@ -264,6 +293,8 @@ public abstract class Display extends Entity {
         } else {
             this.setBrightnessOverride(null);
         }
+
+        if (nbt.contains("KioCG.RiderPriority")) this.riderPriority = nbt.getInt("KioCG.RiderPriority"); // KioCG
     }
 
     public void setTransformation(Transformation transformation) {
@@ -291,6 +322,8 @@ public abstract class Display extends Entity {
         if (brightness != null) {
             Brightness.CODEC.encodeStart(NbtOps.INSTANCE, brightness).ifSuccess(brightnessx -> nbt.put("brightness", brightnessx));
         }
+
+        if (this.riderPriority != null) nbt.putInt("KioCG.RiderPriority", this.riderPriority); // KioCG
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 38f3f368a50cc0e1f0638424e4e92b264ee64abd..b6d1e52690e02031f4c078fdfd5b075758379017 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -4762,6 +4762,46 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         return null;
     }
 
+    // KioCG start
+    @Nullable
+    public <T extends Display> T addRiderDisplay(EntityType<T> type, java.util.function.Consumer<T> function) {
+        return addRiderDisplay(type, 0, function);
+    }
+
+    @Nullable
+    public <T extends Display> T addRiderDisplay(EntityType<T> type, int priority, java.util.function.Consumer<T> function) {
+        final Entity firstPassenger = this.getFirstPassenger();
+        if (firstPassenger == null || firstPassenger instanceof Display display && Objects.requireNonNullElse(display.getRiderPriority(), Integer.MAX_VALUE) < priority) {
+            if (firstPassenger != null) firstPassenger.discard();
+
+            T display = type.create(this.level());
+            if (display != null) {
+                display.moveTo(this.position());
+                display.persist = false;
+                display.setRiderPriority(priority);
+                display.startRiding(this);
+                function.accept(display);
+                this.level().addFreshEntity(display);
+            }
+            return display;
+        }
+        return null;
+    }
+
+    public boolean removeRiderDisplay() {
+        return this.removeRiderDisplay(null);
+    }
+
+    public boolean removeRiderDisplay(@Nullable UUID uuid) {
+        final Entity firstPassenger = this.getFirstPassenger();
+        if (firstPassenger instanceof Display display && (uuid == null && display.getRiderPriority() != null || display.getUUID().equals(uuid))) {
+            firstPassenger.discard();
+            return true;
+        }
+        return false;
+    }
+    // KioCG end
+
     public static enum RemovalReason {
 
         KILLED(true, false), DISCARDED(true, false), UNLOADED_TO_CHUNK(false, true), UNLOADED_WITH_PLAYER(false, false), CHANGED_DIMENSION(false, false);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 2cde808bfa797256409879505ba205a71f381981..5da985512e9bdd3a536e6f7b6efb563a9b45ca8e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1297,4 +1297,30 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return this.getHandle().getScoreboardName();
     }
     // Paper end - entity scoreboard name
+
+    // KioCG start
+    @Override
+    public <T extends org.bukkit.entity.Display> T addRiderDisplay(Class<T> clazz, int priority, java.util.function.Consumer<T> function) {
+        return (T) this.getHandle().addRiderDisplay(getNMSDisplayType(clazz), priority, nmsEntity -> {
+            function.accept((T) nmsEntity.getBukkitEntity());
+        }).getBukkitEntity();
+    }
+
+    @Override
+    public boolean removeRiderDisplay(UUID uuid) {
+        return this.getHandle().removeRiderDisplay(uuid);
+    }
+
+    private net.minecraft.world.entity.EntityType<? extends net.minecraft.world.entity.Display> getNMSDisplayType(Class<? extends org.bukkit.entity.Display> clazz) {
+        if (org.bukkit.entity.BlockDisplay.class.isAssignableFrom(clazz)) {
+            return net.minecraft.world.entity.EntityType.BLOCK_DISPLAY;
+        } else if (org.bukkit.entity.ItemDisplay.class.isAssignableFrom(clazz)) {
+            return net.minecraft.world.entity.EntityType.ITEM_DISPLAY;
+        } else if (org.bukkit.entity.TextDisplay.class.isAssignableFrom(clazz)) {
+            return net.minecraft.world.entity.EntityType.TEXT_DISPLAY;
+        } else {
+            throw new IllegalArgumentException("");
+        }
+    }
+    // KioCG end
 }

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Mon, 3 Jun 2024 17:38:22 +0800
Subject: [PATCH] Chunk hot


diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/ChunkSystem.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/ChunkSystem.java
index c2ff037e180393de6576f12c32c665ef640d6f50..83c6c53c165490eef98105e7e6db357f919d06c2 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/ChunkSystem.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/ChunkSystem.java
@@ -116,6 +116,7 @@ public final class ChunkSystem {
     }
 
     public static void onChunkNotTicking(final LevelChunk chunk, final ChunkHolder holder) {
+        chunk.getChunkHot().clear(); // KioCG
         // TODO move hook
         io.papermc.paper.chunk.system.ChunkSystem.onChunkNotTicking(chunk, holder);
     }
diff --git a/src/main/java/com/kiocg/ChunkHot.java b/src/main/java/com/kiocg/ChunkHot.java
new file mode 100644
index 0000000000000000000000000000000000000000..80ccbe11768b3da176987c31be13bc35b9d85200
--- /dev/null
+++ b/src/main/java/com/kiocg/ChunkHot.java
@@ -0,0 +1,86 @@
+package com.kiocg;
+
+import java.util.Arrays;
+
+public class ChunkHot {
+    // 热度统计总区间数量
+    private static final int TIMES_LENGTH = 10;
+    // 当前统计区间下标
+    private static int index = -1;
+
+    // 热度统计区间
+    private final long[] times = new long[TIMES_LENGTH];
+    // 存放临时的区间数值
+    // 用于修正正在统计的当前区间热度没有计入总值的问题
+    private long temp;
+    // 所有区间的热度总值
+    private long total;
+
+    // 用于每个具体统计的计算
+    private long nanos;
+    // 当前统计是否进行中
+    private boolean started = false;
+
+    /**
+     * 更新区间下标
+     */
+    public static void nextTick() {
+        index = ++index % TIMES_LENGTH;
+    }
+
+    /**
+     * 开始统计一个新区间
+     */
+    public void start() {
+        started = true;
+        temp = times[index];
+        times[index] = 0L;
+    }
+
+    /**
+     * 结束当前区间的统计
+     * 将统计值更新入热度总值
+     */
+    public void stop() {
+        started = false;
+        total -= temp;
+        total += times[index];
+    }
+
+    /**
+     * 开始一个具体统计
+     */
+    public void startTicking() {
+        if (!started) return;
+        nanos = System.nanoTime();
+    }
+
+    /**
+     * 结束一个具体统计
+     * 将统计值计入当前热度区间
+     */
+    public void stopTickingAndCount() {
+        if (!started) return;
+        // 定义一个具体统计的最大值为 1,000,000
+        // 有时候某个具体统计的计算值会在某1刻飙升，可能是由于保存数据到磁盘？
+        times[index] += Math.min(System.nanoTime() - nanos, 1000000L);
+    }
+
+    /**
+     * 清空统计 (当区块卸载时)
+     */
+    public void clear() {
+        started = false;
+        Arrays.fill(times, 0L);
+        temp = 0L;
+        total = 0L;
+        nanos = 0L;
+    }
+
+    /**
+     * @return 获取区块热度平均值
+     */
+    public long getAverage() {
+        return total / ((long) TIMES_LENGTH * 20L);
+    }
+}
diff --git a/src/main/java/com/kiocg/command/ChunkHotCommand.java b/src/main/java/com/kiocg/command/ChunkHotCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..18c72bfa84798a866fe4ff3a03f044c1bf419a1a
--- /dev/null
+++ b/src/main/java/com/kiocg/command/ChunkHotCommand.java
@@ -0,0 +1,36 @@
+package com.kiocg.command;
+
+import com.kiocg.task.TPSBarTask;
+import com.mojang.brigadier.CommandDispatcher;
+import io.papermc.paper.adventure.PaperAdventure;
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import net.kyori.adventure.text.minimessage.tag.resolver.Placeholder;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.commands.Commands;
+import net.minecraft.commands.arguments.EntityArgument;
+import net.minecraft.server.level.ServerPlayer;
+
+import java.util.Collection;
+import java.util.Collections;
+
+public class ChunkHotCommand {
+    public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
+        dispatcher.register(Commands.literal("chunkhot")
+                                    .requires(listener -> listener.hasPermission(2, "bukkit.command.chunkhot"))
+                                    .executes(context -> execute(context.getSource(), Collections.singleton(context.getSource().getPlayerOrException())))
+                                    .then(Commands.argument("targets", EntityArgument.players())
+                                                  .requires(listener -> listener.hasPermission(2, "bukkit.command.chunkhot.other"))
+                                                  .executes(context -> execute(context.getSource(), EntityArgument.getPlayers(context, "targets")))
+                                         )
+                           );
+    }
+
+    private static int execute(CommandSourceStack sender, Collection<ServerPlayer> targets) {
+        for (ServerPlayer player : targets) {
+            sender.sendSuccess(() -> PaperAdventure.asVanilla(MiniMessage.miniMessage().deserialize("<green>[<aqua>豆渣子<green>] <gold>玩家<target>的区域热度: <chunkhot>",
+                                                                                                    Placeholder.parsed("target", player.getGameProfile().getName()),
+                                                                                                    Placeholder.component("chunkhot", TPSBarTask.getChunkHotColor(player)))), false);
+        }
+        return targets.size();
+    }
+}
diff --git a/src/main/java/com/kiocg/task/TPSBarTask.java b/src/main/java/com/kiocg/task/TPSBarTask.java
index 9db217ef0351e899e76b768e2f35f563ee843b5a..4d86f2fb41140715aa0bb13dcf91b4dc8afd30a6 100644
--- a/src/main/java/com/kiocg/task/TPSBarTask.java
+++ b/src/main/java/com/kiocg/task/TPSBarTask.java
@@ -31,6 +31,7 @@ public class TPSBarTask extends BossBarTask {
         bossbar.progress(getBossBarProgress());
         bossbar.color(getBossBarColor());
         bossbar.name(MiniMessage.miniMessage().deserialize(GlobalConfiguration.get().kiocgConfig.commandTPSBarTitle,
+                                                           Placeholder.component("chunkhot", getChunkHotColor(((org.bukkit.craftbukkit.entity.CraftPlayer) player).getHandle())),
                                                            Placeholder.component("tps", getTPSColor()),
                                                            Placeholder.component("mspt", getMSPTColor()),
                                                            Placeholder.component("ping", getPingColor(player.getPing()))
@@ -132,6 +133,19 @@ public class TPSBarTask extends BossBarTask {
         return MiniMessage.miniMessage().deserialize(color, Placeholder.parsed("text", String.format("%s", ping)));
     }
 
+    public static Component getChunkHotColor(net.minecraft.server.level.ServerPlayer player) {
+        long hot = player.getNearbyChunkHot();
+        String color;
+        if (hot < player.level().paperConfig().kiocgConfig.chunkHot.phaseOne) {
+            color = GlobalConfiguration.get().kiocgConfig.commandTPSBarTextColorGood;
+        } else if (hot < player.level().paperConfig().kiocgConfig.chunkHot.phaseTwo) {
+            color = GlobalConfiguration.get().kiocgConfig.commandTPSBarTextColorMedium;
+        } else {
+            color = GlobalConfiguration.get().kiocgConfig.commandTPSBarTextColorLow;
+        }
+        return MiniMessage.miniMessage().deserialize(color, Placeholder.parsed("text", String.format("%s", hot)));
+    }
+
     public enum FillMode {
         TPS, MSPT, PING
     }
diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index eff54cbda952edeb0505cd5765bcfbcf771bdb38..e36dfa38204a3b28c0236c108adc0ed6357c7ed7 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -614,6 +614,12 @@ public class WorldConfiguration extends ConfigurationPart {
         public double sleepHealingRegenRate = 20;
         public double saplingsWitheredChance = 0.025;
         public boolean flowersAndGrassesSpreadNaturally = true;
+
+        public ChunkHot chunkHot;
+        public class ChunkHot extends ConfigurationPart {
+            public long phaseOne = 300000L;
+            public long phaseTwo = 500000L;
+        }
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index d26aecbfbd1930e2c6938d049e45b700b3197230..71c4291b90e5bbe2fb60f2a637e9e727e332b670 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -251,6 +251,7 @@ public class Commands {
             TransferCommand.register(this.dispatcher);
             WhitelistCommand.register(this.dispatcher);
             com.kiocg.command.TPSBarCommand.register(this.dispatcher); // KioCG
+            com.kiocg.command.ChunkHotCommand.register(this.dispatcher); // KioCG
         }
 
         if (environment.includeIntegrated) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index ed313384080ce4eb452880b40eef2a252e2e7dc9..36d3c8a2912001cdb1e33f80c7db7465c5d48d95 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1598,6 +1598,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.tickCount+1).callEvent(); // Paper - Server Tick Events
 
         ++this.tickCount;
+        if (this.tickCount % 20 == 1) { com.kiocg.ChunkHot.nextTick(); this.startChunkHotTick(); } // KioCG
         this.tickRateManager.tick();
         this.tickChildren(shouldKeepTicking);
         if (i - this.lastServerStatus >= MinecraftServer.STATUS_EXPIRE_TIME_NANOS) {
@@ -1627,6 +1628,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         long remaining = (TICK_TIME - (endTime - lastTick)) - catchupTime;
         new com.destroystokyo.paper.event.server.ServerTickEndEvent(this.tickCount, ((double)(endTime - lastTick) / 1000000D), remaining).callEvent();
         // Paper end - Server Tick Events
+        if (this.tickCount % 20 == 0) this.stopChunkHotTick(); // KioCG
         this.profiler.push("tallying");
         long j = Util.getNanos() - i;
         int k = this.tickCount % 100;
@@ -1646,6 +1648,26 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper
     }
 
+    // KioCG start
+    private void startChunkHotTick() {
+        this.getAllLevels().forEach(level -> {
+            final Iterator<net.minecraft.world.level.chunk.LevelChunk> iterator = level.getChunkSource().tickingChunks.unsafeIterator();
+            while (iterator.hasNext()) {
+                iterator.next().getChunkHot().start();
+            }
+        });
+    }
+
+    private void stopChunkHotTick() {
+        this.getAllLevels().forEach(level -> {
+            final Iterator<net.minecraft.world.level.chunk.LevelChunk> iterator = level.getChunkSource().tickingChunks.unsafeIterator();
+            while (iterator.hasNext()) {
+                iterator.next().getChunkHot().stop();
+            }
+        });
+    }
+    // KioCG end
+
     private void logTickMethodTime(long tickStartTime) {
         if (this.isTickTimeLoggingEnabled()) {
             this.getTickTimeLogger().logPartialSample(Util.getNanos() - tickStartTime, TpsDebugDimensions.TICK_SERVER_METHOD.ordinal());
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index d5f5637c0d8f7b9d2fdab6d2e25dc45790bee0d0..a03c187c990ad712557fa743a8d25afc3ae36aad 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1263,6 +1263,8 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         // Paper start- timings
         final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(entity);
         timer = isActive ? entity.getType().tickTimer.startTiming() : entity.getType().inactiveTickTimer.startTiming(); // Paper
+        LevelChunk levelChunk = entity.shouldTickHot() ? this.getChunkIfLoaded(entity.blockPosition()) : null; // KioCG
+        if (levelChunk != null) levelChunk.getChunkHot().startTicking(); try { // KioCG
         try {
         // Paper end - timings
         entity.setOldPosAndRot();
@@ -1280,6 +1282,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         } else { entity.inactiveTick(); } // Paper - EAR 2
         this.getProfiler().pop();
         } finally { timer.stopTiming(); } // Paper - timings
+        } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
         Iterator iterator = entity.getPassengers().iterator();
 
         while (iterator.hasNext()) {
@@ -1297,6 +1300,8 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                 // Paper - EAR 2
                 final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(passenger);
                 co.aikar.timings.Timing timer = isActive ? passenger.getType().passengerTickTimer.startTiming() : passenger.getType().passengerInactiveTickTimer.startTiming(); // Paper
+                LevelChunk levelChunk = !(passenger instanceof Player) ? this.getChunkIfLoaded(passenger.blockPosition()) : null; // KioCG
+                if (levelChunk != null) levelChunk.getChunkHot().startTicking(); try { // KioCG
                 try {
                 // Paper end
                 passenger.setOldPosAndRot();
@@ -1328,6 +1333,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                 }
 
             } finally { timer.stopTiming(); }// Paper - EAR2 timings
+            } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
             }
         } else {
             passenger.stopRiding();
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index a75e3b43fdeb9539d729287051d2880308df4c3c..fde2b7656038f5f09f5b07b8b6d163ae892ae958 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -302,6 +302,7 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
     public @Nullable String clientBrandName = null; // Paper - Brand support
     public boolean inStructure; // KioCG
     public org.bukkit.event.player.PlayerQuitEvent.QuitReason quitReason = null; // Paper - Add API for quit reason; there are a lot of changes to do if we change all methods leading to the event
+    private long nearbyChunkHot = 0; public long getNearbyChunkHot() { return this.nearbyChunkHot; } // KioCG
 
     // Paper start - rewrite chunk system
     private ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.PlayerChunkLoaderData chunkLoader;
@@ -806,6 +807,37 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
         this.trackEnteredOrExitedLavaOnVehicle();
         this.updatePlayerAttributes();
         this.advancements.flushDirty(this);
+
+        // KioCG start
+        if (this.server.getTickCount() % 20 == 1) {
+            this.nearbyChunkHot = this.refreshNearbyChunkHot();
+            this.hasVisualFire = false;
+            if (this.nearbyChunkHot >= this.level().paperConfig().kiocgConfig.chunkHot.phaseTwo) {
+                this.hasVisualFire = true;
+                this.hurt(this.damageSources().generic(), 2.0F);
+                this.sendSystemMessage(io.papermc.paper.adventure.PaperAdventure.asVanilla(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize("<red><italic>你所在的区域太热辣!")), true);
+            } else if (this.nearbyChunkHot >= this.level().paperConfig().kiocgConfig.chunkHot.phaseOne) {
+                this.sendSystemMessage(io.papermc.paper.adventure.PaperAdventure.asVanilla(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize("<red><italic>你所在的区域有点热.")), true);
+            }
+        }
+    }
+
+    private long refreshNearbyChunkHot() {
+        net.minecraft.world.level.chunk.LevelChunk chunk = this.level().getChunkAt(this.blockPosition());
+        int x = chunk.locX;
+        int z = chunk.locZ;
+        net.minecraft.world.level.Level world = chunk.getLevel();
+        long total = 0L;
+        for (int i = x - 4; i <= x + 4; ++i) {
+            for (int j = z - 4; j <= z + 4; ++j) {
+                net.minecraft.world.level.chunk.LevelChunk chunk0 = world.getChunkIfLoaded(i, j);
+                if (chunk0 != null) {
+                    total += chunk0.getChunkHot().getAverage();
+                }
+            }
+        }
+        return total;
+        // KioCG end
     }
 
     private void updatePlayerAttributes() {
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 7796e191747be545e744564a2b0b65790f69114d..048c324ba344d168ced8569771b67627ee57530d 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -400,6 +400,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
         if (this.player.getLastActionTime() > 0L && this.server.getPlayerIdleTimeout() > 0 && Util.getMillis() - this.player.getLastActionTime() > (long) this.server.getPlayerIdleTimeout() * 1000L * 60L && !this.player.wonGame) { // Paper - Prevent AFK kick while watching end credits
             this.player.resetLastActionTime(); // CraftBukkit - SPIGOT-854
+            if (this.player.getNearbyChunkHot() >= this.player.level().paperConfig().kiocgConfig.chunkHot.phaseTwo || this.player.getNearbyChunkHot() >= this.player.level().paperConfig().kiocgConfig.chunkHot.phaseOne && MinecraftServer.getServer().recentTps[1] < 18.0) // KioCG
             this.disconnect((Component) Component.translatable("multiplayer.disconnect.idling"), org.bukkit.event.player.PlayerKickEvent.Cause.IDLING); // Paper - kick event cause
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
index 1859477e96709368683fe5707327e92f56fbfc8e..4c4814094552fa4382b1cbe649f24f473cdbf22e 100644
--- a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
+++ b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
@@ -449,4 +449,11 @@ public class AreaEffectCloud extends Entity implements TraceableEntity {
     public EntityDimensions getDimensions(Pose pose) {
         return EntityDimensions.scalable(this.getRadius() * 2.0F, 0.5F);
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 597e277481b26178b25f287f005715c86ad360ff..fcc9cefff084ecdac983253ea3539e4b118af58a 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -4859,4 +4859,10 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         return ((net.minecraft.server.level.ServerChunkCache) level.getChunkSource()).isPositionTicking(this);
     }
     // Paper end - Expose entity id counter
+
+    // KioCG start
+    public boolean shouldTickHot() {
+        return this.tickCount > 20 * 10 && this.isAlive();
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/LightningBolt.java b/src/main/java/net/minecraft/world/entity/LightningBolt.java
index f3b78df6bdd2f3fd833f63948594d0eebc9f717d..aa76cdbd5bd0574b7ec430bbbdc62daf82252c20 100644
--- a/src/main/java/net/minecraft/world/entity/LightningBolt.java
+++ b/src/main/java/net/minecraft/world/entity/LightningBolt.java
@@ -315,4 +315,11 @@ public class LightningBolt extends Entity {
     public Stream<Entity> getHitEntities() {
         return this.hitEntities.stream().filter(Entity::isAlive);
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 6da0922e221b4b7afe8265c842a78ae155e843ed..41f36499774589982977dda68fcb8bfb3578efd2 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -1879,4 +1879,11 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
         }
     }
     // KioCG end
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return super.shouldTickHot() && (!this.removeWhenFarAway(0.0) || this.isPersistenceRequired() || this.requiresCustomPersistence());
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
index bbfc94237bbd546361cc4a7bde773c810e8c5d49..d9f48fe2bcf1a2e317e97046618c056b05643268 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
@@ -166,4 +166,11 @@ public class TraderLlama extends Llama {
             super.start();
         }
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return super.shouldTickHot() && !this.canDespawn();
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
index 9323e2c92f4fe1268352121c960e2507de8c7aed..c7694429755160edcf8ef293d29e6dcda02e6952 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
@@ -330,4 +330,11 @@ public class WanderingTrader extends net.minecraft.world.entity.npc.AbstractVill
             return !pos.closerToCenterThan(this.trader.position(), proximityDistance);
         }
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 07cd4ebd9420d8aca34aebd92a15040deb995059..df335124ab0ed3b4104e62c9cb34c07a6d7a5362 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -2517,4 +2517,11 @@ public abstract class Player extends LivingEntity {
             return this.message;
         }
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
index 5f7d152f41eb85f17bcded4bc8099b998e5a338b..3b833418b5d9b2b93658e6fd11bd1054a50f735c 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
@@ -378,4 +378,11 @@ public abstract class Projectile extends Entity implements TraceableEntity {
 
         return DoubleDoubleImmutablePair.of(d0, d1);
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index d144810dd8f8719582975ef69e69b6215f4de4e3..eab44362bbbccee2261baf35b0d37335a457cc42 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -85,6 +85,7 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
     private final Int2ObjectMap<GameEventListenerRegistry> gameEventListenerRegistrySections;
     private final LevelChunkTicks<Block> blockTicks;
     private final LevelChunkTicks<Fluid> fluidTicks;
+    private final com.kiocg.ChunkHot chunkHot = new com.kiocg.ChunkHot(); public com.kiocg.ChunkHot getChunkHot() { return this.chunkHot; } // KioCG
 
     public LevelChunk(Level world, ChunkPos pos) {
         this(world, pos, UpgradeData.EMPTY, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, 0, (LevelChunkSection[]) null, (LevelChunk.PostLoadProcessor) null, (BlendingData) null); // KioCG - CropDays
@@ -989,6 +990,7 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
 
                         gameprofilerfiller.push(this::getType);
                         this.blockEntity.tickTimer.startTiming(); // Spigot
+                        LevelChunk.this.chunkHot.startTicking(); // KioCG
                         BlockState iblockdata = LevelChunk.this.getBlockState(blockposition);
 
                         if (this.blockEntity.getType().isValid(iblockdata)) {
@@ -1016,6 +1018,7 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
                         // Spigot start
                     } finally {
                         this.blockEntity.tickTimer.stopTiming();
+                        LevelChunk.this.chunkHot.stopTickingAndCount(); // KioCG
                         // Spigot end
                     }
                 }

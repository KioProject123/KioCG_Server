From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Sun, 24 Mar 2024 09:51:12 +0800
Subject: [PATCH] Crops grow every day


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index c56346d4c204299df97ea6bce15abf4c131e3f13..31b621d2d16f1a73727b33931714a6223f2bf857 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -873,6 +873,16 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
         gameprofilerfiller.popPush("tickBlocks");
         timings.chunkTicksBlocks.startTiming(); // Paper
+
+        // KioCG start - 农作物每天生长
+        int daysSpent = 0;
+        int days = (int) this.getDays();
+        if (days != chunk.cropDays) {
+            daysSpent = Mth.clamp(days - chunk.cropDays, 0, 7);
+            chunk.cropDays = days;
+        }
+        // KioCG end - 农作物每天生长
+
         if (randomTickSpeed > 0) {
             // Paper start - optimize random block ticking
             LevelChunkSection[] sections = chunk.getSections();
@@ -903,6 +913,36 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
                 // We drop the fluid tick since LAVA is ALREADY TICKED by the above method (See LiquidBlock).
                 // TODO CHECK ON UPDATE (ping the Canadian)
             }
+
+            // KioCG start - 农作物每天生长
+            for (int sectionIndex = 0; sectionIndex < sections.length; sectionIndex++) {
+                LevelChunkSection section = sections[sectionIndex];
+                if (section == null || section.cropsList.size() == 0) continue;
+
+                int yPos = (sectionIndex + minSection) << 4;
+                for (int i = 0; i < daysSpent; ++i) {
+                    int cropBlocks = section.cropsList.size();
+                    if (cropBlocks == 0) break;
+
+                    List<Pair<BlockPos, BlockState>> tickCrops = new ArrayList<>(cropBlocks);
+                    for (int a = 0; a < cropBlocks; ++a) {
+                        long raw = section.cropsList.getRaw(a);
+                        int location = com.destroystokyo.paper.util.maplist.IBlockDataList.getLocationFromRaw(raw);
+                        int x = location & 15;
+                        int y = ((location >>> (4 + 4)) & 255) | yPos;
+                        int z = (location >>> 4) & 15;
+
+                        BlockPos blockposition2 = new BlockPos(j + x, y, k + z);
+                        BlockState iblockdata = com.destroystokyo.paper.util.maplist.IBlockDataList.getBlockDataFromRaw(raw);
+
+                        tickCrops.add(Pair.of(blockposition2, iblockdata));
+                    }
+                    for (Pair<BlockPos, BlockState> pair : tickCrops) {
+                        pair.getSecond().randomTick(this, pair.getFirst(), this.randomTickRandom);
+                    }
+                }
+            }
+            // KioCG end - 农作物每天生长
         }
         // Paper end - optimise random block ticking
 
diff --git a/src/main/java/net/minecraft/world/item/HoeItem.java b/src/main/java/net/minecraft/world/item/HoeItem.java
index 06497b5141e611cc7a1b6030a7b9c54b5c4eda06..30776cf07429b150362c21c0423b5dd8ab7a4c69 100644
--- a/src/main/java/net/minecraft/world/item/HoeItem.java
+++ b/src/main/java/net/minecraft/world/item/HoeItem.java
@@ -26,11 +26,11 @@ public class HoeItem extends DiggerItem {
     protected static final Map<Block, Pair<Predicate<UseOnContext>, Consumer<UseOnContext>>> TILLABLES = Maps.newHashMap(
         ImmutableMap.of(
             Blocks.GRASS_BLOCK,
-            Pair.of(HoeItem::onlyIfAirAbove, changeIntoState(Blocks.FARMLAND.defaultBlockState())),
+            Pair.of(HoeItem::onlyIfAirAbove, changeIntoState(Blocks.FARMLAND.defaultBlockState().setValue(net.minecraft.world.level.block.FarmBlock.MOISTURE, 1))), // KioCG
             Blocks.DIRT_PATH,
-            Pair.of(HoeItem::onlyIfAirAbove, changeIntoState(Blocks.FARMLAND.defaultBlockState())),
+            Pair.of(HoeItem::onlyIfAirAbove, changeIntoState(Blocks.FARMLAND.defaultBlockState().setValue(net.minecraft.world.level.block.FarmBlock.MOISTURE, 1))), // KioCG
             Blocks.DIRT,
-            Pair.of(HoeItem::onlyIfAirAbove, changeIntoState(Blocks.FARMLAND.defaultBlockState())),
+            Pair.of(HoeItem::onlyIfAirAbove, changeIntoState(Blocks.FARMLAND.defaultBlockState().setValue(net.minecraft.world.level.block.FarmBlock.MOISTURE, 1))), // KioCG
             Blocks.COARSE_DIRT,
             Pair.of(HoeItem::onlyIfAirAbove, changeIntoState(Blocks.DIRT.defaultBlockState())),
             Blocks.ROOTED_DIRT,
diff --git a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
index ac0881f64ef98ea92d32b600c08c77aa3442a410..b1be268d99bd6617c5ff664624efa29407f3325f 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
@@ -43,9 +43,16 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
         return BambooSaplingBlock.SAPLING_SHAPE.move(vec3d.x, vec3d.y, vec3d.z);
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             this.growBamboo(world, pos);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
index e2951dd077441fe9cda461a2d3ef0c0671308316..962e13ffa3cd82c95e9b4bc0582a6f7c6682f741 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
@@ -131,10 +131,17 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
         return (Integer) state.getValue(BambooStalkBlock.STAGE) == 0;
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if ((Integer) state.getValue(BambooStalkBlock.STAGE) == 0) {
-            if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
+            if (world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                 int i = this.getHeightBelowUpToMax(world, pos) + 1;
 
                 if (i < world.paperConfig().maxGrowthHeight.bamboo.max) { // Paper - Configurable cactus/bamboo/reed growth height
diff --git a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
index 0ac0efc1a744774521298307b973c6f2a28a8aaf..41f163432174afcf6a53f2ebe17e53c732dbf291 100644
--- a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
@@ -53,7 +53,7 @@ public class BeetrootBlock extends CropBlock {
 
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (random.nextInt(3) != 0) {
+        if (true || random.nextInt(3) != 0) { // KioCG - 农作物每天生长
             super.randomTick(state, world, pos, random);
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 45704653310efe9cb755a644674b54b8722c2c84..673e0ca115dbb760085186f6096b19770ad80330 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -228,6 +228,12 @@ public class Block extends BlockBehaviour implements ItemLike {
         return state.getBlock() instanceof LeavesBlock || state.is(Blocks.BARRIER) || state.is(Blocks.CARVED_PUMPKIN) || state.is(Blocks.JACK_O_LANTERN) || state.is(Blocks.MELON) || state.is(Blocks.PUMPKIN) || state.is(BlockTags.SHULKER_BOXES);
     }
 
+    // KioCG start
+    public boolean isDayTicking() {
+        return false;
+    }
+    // KioCG end
+
     public static boolean shouldRenderFace(BlockState state, BlockGetter world, BlockPos pos, Direction side, BlockPos otherPos) {
         BlockState iblockdata1 = world.getBlockState(otherPos);
 
diff --git a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
index 8920855b07a31715327b8102c7faafc9f916825d..0d7f5a81c7db2c6b204929761319dd975c0b0cc8 100644
--- a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
@@ -24,6 +24,13 @@ public class BuddingAmethystBlock extends AmethystBlock {
         super(settings);
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (random.nextInt(5) == 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/CactusBlock.java b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
index ff4dda48116a2969704b355ff96407ba869b466e..ce9d86c3e19806da52181a4fff3a8a4c8888087e 100644
--- a/src/main/java/net/minecraft/world/level/block/CactusBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
@@ -50,6 +50,13 @@ public class CactusBlock extends Block {
 
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         BlockPos blockposition1 = pos.above();
@@ -65,7 +72,7 @@ public class CactusBlock extends Block {
                 int j = (Integer) state.getValue(CactusBlock.AGE);
 
                 int modifier = world.spigotConfig.cactusModifier; // Spigot - SPIGOT-7159: Better modifier resolution
-                if (j >= 15 || (modifier != 100 && random.nextFloat() < (modifier / (100.0f * 16)))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                if (true) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                     CraftEventFactory.handleBlockGrowEvent(world, blockposition1, this.defaultBlockState()); // CraftBukkit
                     BlockState iblockdata1 = (BlockState) state.setValue(CactusBlock.AGE, 0);
 
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
index 6709cb6b657a8612781c2fe4dd76ee38f329c5ba..d8d1b51dee39c97e6f5848afa3eb7cfc67129c2a 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
@@ -60,6 +60,13 @@ public class ChorusFlowerBlock extends Block {
         return (Integer) state.getValue(ChorusFlowerBlock.AGE) < 5;
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public VoxelShape getBlockSupportShape(BlockState state, BlockGetter world, BlockPos pos) {
         return ChorusFlowerBlock.BLOCK_SUPPORT_SHAPE;
@@ -154,8 +161,12 @@ public class ChorusFlowerBlock extends Block {
     }
 
     private void placeGrownFlower(Level world, BlockPos pos, int age) {
-        world.setBlock(pos, (BlockState) this.defaultBlockState().setValue(ChorusFlowerBlock.AGE, age), 2);
+        // KioCG start
+        BlockState blockState = this.defaultBlockState().setValue(ChorusFlowerBlock.AGE, age);
+        world.setBlock(pos, blockState, 2);
+        // KioCG end
         world.levelEvent(1033, pos, 0);
+        if (world.random.nextDouble() < 0.8) blockState.randomTick((ServerLevel) world, pos, world.random); // KioCG - 随机继续生长
     }
 
     private void placeDeadFlower(Level world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
index fe4237b40af32415f8635ab769edc0f948a3e12d..4a31f5582453db1ff3c741efb886dd294593d4e4 100644
--- a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
@@ -56,9 +56,16 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
         return (Integer) state.getValue(CocoaBlock.AGE) < 2;
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (world.random.nextFloat() < (world.spigotConfig.cocoaModifier / (100.0f * 5))) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (true) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             int i = (Integer) state.getValue(CocoaBlock.AGE);
 
             if (i < 2) {
diff --git a/src/main/java/net/minecraft/world/level/block/CropBlock.java b/src/main/java/net/minecraft/world/level/block/CropBlock.java
index 112d2feba5f75a2a873b595617780515945c10e4..b7883a4cf326fbf4532bc373e09d04e03cd9f9f7 100644
--- a/src/main/java/net/minecraft/world/level/block/CropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CropBlock.java
@@ -75,6 +75,24 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
         return !this.isMaxAge(state);
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+
+    public static boolean tickFarmland(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        BlockPos blockposition1 = pos.below();
+        BlockState iblockdata = world.getBlockState(blockposition1);
+        if (iblockdata.is(Blocks.FARMLAND)) {
+            boolean moisture = (Integer) iblockdata.getValue(FarmBlock.MOISTURE) > 1; // 湿度1代表刚放置的耕地
+            ((FarmBlock) iblockdata.getBlock()).randomTick0(iblockdata, world, blockposition1, random);
+            return moisture || (Integer) world.getBlockState(blockposition1).getValue(FarmBlock.MOISTURE) > 1;
+        }
+        return false;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.getRawBrightness(pos, 0) >= 9) {
@@ -99,7 +117,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
                     modifier = world.spigotConfig.wheatModifier;
                 }
 
-                if (random.nextFloat() < (modifier / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                if (tickFarmland(state, world, pos, random)) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG - 农作物每天生长
                     // Spigot end
                     CraftEventFactory.handleBlockGrowEvent(world, pos, this.getStateForAge(i + 1), 2); // CraftBukkit
                 }
@@ -124,6 +142,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
     }
 
     protected static float getGrowthSpeed(Block block, BlockGetter world, BlockPos pos) {
+        if (true) return 1.0F; // KioCG - 已弃用, 跳过繁重的运算
         float f = 1.0F;
         BlockPos blockposition1 = pos.below();
 
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index 3cef3bb49175d259ca9fc37d32c585190424e950..7f468a58344c570da1ff20ed22eb6c339974fda6 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -90,14 +90,33 @@ public class FarmBlock extends Block {
 
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+    // KioCG start - 使农作物来运算耕地
+        if (!shouldMaintainFarmland(world, pos)) {
+            randomTick0(state, world, pos, random);
+        }
+    }
+    public void randomTick0(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+    // KioCG end - 使农作物来运算耕地
         int i = (Integer) state.getValue(FarmBlock.MOISTURE);
+        // KioCG start
+        /*
         if (i > 0 && world.paperConfig().tickRates.wetFarmland != 1 && (world.paperConfig().tickRates.wetFarmland < 1 || (net.minecraft.server.MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.wetFarmland != 0)) { return; } // Paper - Configurable random tick rates for blocks
         if (i == 0 && world.paperConfig().tickRates.dryFarmland != 1 && (world.paperConfig().tickRates.dryFarmland < 1 || (net.minecraft.server.MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.dryFarmland != 0)) { return; } // Paper - Configurable random tick rates for blocks
+        */
+        // KioCG end
 
-        if (!FarmBlock.isNearWater(world, pos) && !world.isRainingAt(pos.above())) {
+        if (!world.isRainingAt(pos.above())) { // KioCG - 水源不要湿润耕地
             if (i > 0) {
+                i = 1; // KioCG - 强制干燥
                 org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, pos, (BlockState) state.setValue(FarmBlock.MOISTURE, i - 1), 2); // CraftBukkit
             } else if (!FarmBlock.shouldMaintainFarmland(world, pos)) {
                 FarmBlock.turnToDirt((Entity) null, state, world, pos);
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
index cf05da1c86e3018db11dc079bf50317b6639e5cc..3afa150cbf0b626ab16eed1971f03ac645a243f2 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
@@ -20,7 +20,7 @@ import net.minecraft.world.phys.shapes.VoxelShape;
 public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements BonemealableBlock {
 
     public static final IntegerProperty AGE = BlockStateProperties.AGE_25;
-    public static final int MAX_AGE = 25;
+    public static final int MAX_AGE = 15; // KioCG
     private final double growPerTickProbability;
 
     protected GrowingPlantHeadBlock(BlockBehaviour.Properties settings, Direction growthDirection, VoxelShape outlineShape, boolean tickWater, double growthChance) {
@@ -34,14 +34,21 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
 
     @Override
     public BlockState getStateForPlacement(LevelAccessor world) {
-        return (BlockState) this.defaultBlockState().setValue(GrowingPlantHeadBlock.AGE, world.getRandom().nextInt(25));
+        return (BlockState) this.defaultBlockState().setValue(GrowingPlantHeadBlock.AGE, world.getRandom().nextInt(this.MAX_AGE)); // KioCG
     }
 
     @Override
     protected boolean isRandomlyTicking(BlockState state) {
-        return (Integer) state.getValue(GrowingPlantHeadBlock.AGE) < 25;
+        return (Integer) state.getValue(GrowingPlantHeadBlock.AGE) < this.MAX_AGE; // KioCG
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         // Spigot start
@@ -55,7 +62,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
         } else {
             modifier = world.spigotConfig.caveVinesModifier;
         }
-        if ((Integer) state.getValue(GrowingPlantHeadBlock.AGE) < 25 && random.nextDouble() < ((modifier / 100.0D) * this.growPerTickProbability)) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if ((Integer) state.getValue(GrowingPlantHeadBlock.AGE) < this.MAX_AGE) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             // Spigot end
             BlockPos blockposition1 = pos.relative(this.growthDirection);
 
@@ -77,11 +84,11 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     }
 
     public BlockState getMaxAgeState(BlockState state) {
-        return (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, 25);
+        return (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, this.MAX_AGE); // KioCG
     }
 
     public boolean isMaxAge(BlockState state) {
-        return (Integer) state.getValue(GrowingPlantHeadBlock.AGE) == 25;
+        return (Integer) state.getValue(GrowingPlantHeadBlock.AGE) == this.MAX_AGE; // KioCG
     }
 
     protected BlockState updateBodyAfterConvertedFromHead(BlockState from, BlockState to) {
@@ -123,13 +130,13 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
         BlockPos blockposition1 = pos.relative(this.growthDirection);
-        int i = Math.min((Integer) state.getValue(GrowingPlantHeadBlock.AGE) + 1, 25);
+        int i = Math.min((Integer) state.getValue(GrowingPlantHeadBlock.AGE) + 1, this.MAX_AGE); // KioCG
         int j = this.getBlocksToGrowWhenBonemealed(random);
 
         for (int k = 0; k < j && this.canGrowInto(world.getBlockState(blockposition1)); ++k) {
             world.setBlockAndUpdate(blockposition1, (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, i));
             blockposition1 = blockposition1.relative(this.growthDirection);
-            i = Math.min(i + 1, 25);
+            i = Math.min(i + 1, this.MAX_AGE); // KioCG
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
index b98e17d21d43610fb7a7ce1641c518598ff48cb0..f270e5aa7dfd722a44fd717c9a7186b6f1fe695e 100644
--- a/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
@@ -111,10 +111,17 @@ public class MangrovePropaguleBlock extends SaplingBlock implements SimpleWaterl
         return state.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!isHanging(state)) {
-            if (random.nextFloat() < (world.spigotConfig.saplingModifier / (100.0F * 7))) { // Paper - Fix Spigot growth modifiers
+            if (true) { // Paper - Fix Spigot growth modifiers // KioCG
                 this.advanceTree(world, pos, state, random);
             }
         } else {
diff --git a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
index 1172d85c5c26ab2142343d91149766e5993cb36a..b0a4879c7497131712c1f674db61e9bea1d19d70 100644
--- a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
@@ -49,9 +49,16 @@ public class MushroomBlock extends BushBlock implements BonemealableBlock {
         return MushroomBlock.SHAPE;
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (random.nextFloat() < (world.spigotConfig.mushroomModifier / (100.0f * 25))) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (true) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             int i = 5;
             boolean flag = true;
             Iterator iterator = BlockPos.betweenClosed(pos.offset(-4, -1, -4), pos.offset(4, 1, 4)).iterator();
diff --git a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
index acbd60a2f162fe0e254e36d0e8e7face3fc8a7b3..5b7b03db604011e5aa3519b31a67b4e2fa92a9dc 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
@@ -48,11 +48,18 @@ public class NetherWartBlock extends BushBlock {
         return (Integer) state.getValue(NetherWartBlock.AGE) < 3;
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         int i = (Integer) state.getValue(NetherWartBlock.AGE);
 
-        if (i < 3 && random.nextFloat() < (world.spigotConfig.wartModifier / (100.0f * 10))) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (i < 3) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG - 农作物每天生长
             state = (BlockState) state.setValue(NetherWartBlock.AGE, i + 1);
             org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, pos, state, 2); // CraftBukkit
         }
diff --git a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
index 5f1ec3f69295760b7b8097916c82cbf9ddd49700..3d66bf5abb57ccda2ac637680ab7459c812e1915 100644
--- a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
@@ -120,11 +120,18 @@ public class PitcherCropBlock extends DoublePlantBlock implements BonemealableBl
         return state.getValue(HALF) == DoubleBlockHalf.LOWER && !this.isMaxAge(state);
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         float f = CropBlock.getGrowthSpeed(this, world, pos);
         boolean bl = random.nextFloat() < (world.spigotConfig.pitcherPlantModifier / (100.0F * (Math.floor(25.0F / f) + 1))); // Paper - Fix Spigot growth modifiers
-        if (bl) {
+        if (CropBlock.tickFarmland(state, world, pos, random)) { // KioCG - 农作物每天生长
             this.grow(world, state, pos, 1);
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
index d262a5a6da57ef9ba9a6fe0dfbc88f577105e74f..f9a94734c87cdda19f283f6a25a6a016fb354be9 100644
--- a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
@@ -53,9 +53,16 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
         return SaplingBlock.SHAPE;
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(net.minecraft.world.level.block.state.BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (world.getMaxLocalRawBrightness(pos.above()) >= 9 && random.nextFloat() < (world.spigotConfig.saplingModifier / (100.0f * 7))) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (world.getMaxLocalRawBrightness(pos.above()) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             this.advanceTree(world, pos, state, random);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/StemBlock.java b/src/main/java/net/minecraft/world/level/block/StemBlock.java
index 924d80eb41d9a71d1e521c40742557251cf51832..bf21bfb894164e2228a781ab6552ab1692ab7d8e 100644
--- a/src/main/java/net/minecraft/world/level/block/StemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StemBlock.java
@@ -70,12 +70,19 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
         return floor.is(Blocks.FARMLAND);
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.getRawBrightness(pos, 0) >= 9) {
             float f = CropBlock.getGrowthSpeed(this, world, pos);
 
-            if (random.nextFloat() < ((this == Blocks.PUMPKIN_STEM ? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier) / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+            if (CropBlock.tickFarmland(state, world, pos, random)) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG - 农作物每天生长
                 int i = (Integer) state.getValue(StemBlock.AGE);
 
                 if (i < 7) {
@@ -128,7 +135,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
 
         CraftEventFactory.handleBlockGrowEvent(world, pos, iblockdata1, 2); // CraftBukkit
         if (i == 7) {
-            iblockdata1.randomTick(world, pos, world.random);
+            // iblockdata1.randomTick(world, pos, world.random); // KioCG
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
index c48c622e92cedeaa46b929c7adfedec98dd5a3fb..91d7268a35666ff1df995e37086f9c1f2707d322 100644
--- a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
@@ -50,6 +50,13 @@ public class SugarCaneBlock extends Block {
 
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.isEmptyBlock(pos.above())) {
@@ -63,7 +70,7 @@ public class SugarCaneBlock extends Block {
                 int j = (Integer) state.getValue(SugarCaneBlock.AGE);
 
                 int modifier = world.spigotConfig.caneModifier; // Spigot - SPIGOT-7159: Better modifier resolution
-                if (j >= 15 || (modifier != 100 && random.nextFloat() < (modifier / (100.0f * 16)))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                if (true) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                     org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, pos.above(), this.defaultBlockState()); // CraftBukkit
                     world.setBlock(pos, (BlockState) state.setValue(SugarCaneBlock.AGE, 0), 4);
                 } else if (modifier == 100 || random.nextFloat() < (modifier / (100.0f * 16))) { // Spigot - SPIGOT-7159: Better modifier resolution
diff --git a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
index 6008c634c408c4eed563815da4d57b2eef69835c..621eaa4c66be74cabbaecc928135b2c7cb7b1650 100644
--- a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
@@ -70,11 +70,18 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
         return (Integer) state.getValue(SweetBerryBushBlock.AGE) < 3;
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         int i = (Integer) state.getValue(SweetBerryBushBlock.AGE);
 
-        if (i < 3 && random.nextFloat() < (world.spigotConfig.sweetBerryModifier / (100.0f * 5)) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (i < 3 && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             BlockState iblockdata1 = (BlockState) state.setValue(SweetBerryBushBlock.AGE, i + 1);
 
             if (!CraftEventFactory.handleBlockGrowEvent(world, pos, iblockdata1, 2)) return; // CraftBukkit
diff --git a/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java b/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
index 3bb1ed8423e7f18eae8967d4bee5bd48720a689e..faca60be26a5b91b59f758d651bb9dec68dfd1b6 100644
--- a/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
@@ -65,7 +65,7 @@ public class TorchflowerCropBlock extends CropBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (random.nextInt(3) != 0) {
+        if (true || random.nextInt(3) != 0) { // KioCG - 农作物每天生长
             super.randomTick(state, world, pos, random);
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/VineBlock.java b/src/main/java/net/minecraft/world/level/block/VineBlock.java
index 57e7f275ffd6202ef578d64857cfdace6f1c760d..b9523aa0ad018a8624a9496f3908e9080213381f 100644
--- a/src/main/java/net/minecraft/world/level/block/VineBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/VineBlock.java
@@ -182,10 +182,17 @@ public class VineBlock extends Block {
         }
     }
 
+    // KioCG start
+    @Override
+    public boolean isDayTicking() {
+        return true;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.getGameRules().getBoolean(GameRules.RULE_DO_VINES_SPREAD)) {
-            if (random.nextFloat() < (world.spigotConfig.vineModifier / (100.0f * 4))) { // Spigot - SPIGOT-7159: Better modifier resolution
+            if (true) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                 Direction enumdirection = Direction.getRandom(random);
                 BlockPos blockposition1 = pos.above();
                 BlockPos blockposition2;
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index a768b07dae4bf75b68e3bc1d3de4b68fc7d23842..3bc0e37335e45fac2d24cdf31852a5f0a2104588 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -1254,6 +1254,12 @@ public abstract class BlockBehaviour implements FeatureElement {
             return this.isRandomlyTicking;
         }
 
+        // KioCG start
+        public final boolean isDayTicking() {
+            return this.getBlock().isDayTicking();
+        }
+        // KioCG end
+
         public long getSeed(BlockPos pos) {
             return this.getBlock().getSeed(this.asState(), pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index 97f8ef86a0e398b7e4aa3445d5e413addbe3a9e3..2fe43bab79f52080cfd2c1f406469a9eef67d962 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -67,6 +67,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     private volatile boolean isLightCorrect;
     protected final ChunkPos chunkPos; public final long coordinateKey; public final int locX; public final int locZ; // Paper - cache coordinate key
     private long inhabitedTime;
+    public int cropDays; // KioCG
     /** @deprecated */
     @Nullable
     @Deprecated
@@ -137,13 +138,14 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     }
     // Paper end - rewrite chunk system
 
-    public ChunkAccess(ChunkPos pos, UpgradeData upgradeData, LevelHeightAccessor heightLimitView, Registry<Biome> biomeRegistry, long inhabitedTime, @Nullable LevelChunkSection[] sectionArray, @Nullable BlendingData blendingData) {
+    public ChunkAccess(ChunkPos pos, UpgradeData upgradeData, LevelHeightAccessor heightLimitView, Registry<Biome> biomeRegistry, long inhabitedTime, int cropDays, @Nullable LevelChunkSection[] sectionArray, @Nullable BlendingData blendingData) { // KioCG - CropDays
         this.locX = pos.x; this.locZ = pos.z; // Paper - reduce need for field lookups
         this.chunkPos = pos; this.coordinateKey = ChunkPos.asLong(locX, locZ); // Paper - cache long key
         this.upgradeData = upgradeData;
         this.levelHeightAccessor = heightLimitView;
         this.sections = new LevelChunkSection[heightLimitView.getSectionsCount()];
         this.inhabitedTime = inhabitedTime;
+        this.cropDays = cropDays; // KioCG
         this.postProcessing = new ShortList[heightLimitView.getSectionsCount()];
         this.blendingData = blendingData;
         // Paper - rewrite chunk system
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index d388fbcbff63928f0e9140c02400a63ba8f19d9c..d144810dd8f8719582975ef69e69b6215f4de4e3 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -87,11 +87,11 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
     private final LevelChunkTicks<Fluid> fluidTicks;
 
     public LevelChunk(Level world, ChunkPos pos) {
-        this(world, pos, UpgradeData.EMPTY, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, (LevelChunkSection[]) null, (LevelChunk.PostLoadProcessor) null, (BlendingData) null);
+        this(world, pos, UpgradeData.EMPTY, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, 0, (LevelChunkSection[]) null, (LevelChunk.PostLoadProcessor) null, (BlendingData) null); // KioCG - CropDays
     }
 
-    public LevelChunk(Level world, ChunkPos pos, UpgradeData upgradeData, LevelChunkTicks<Block> blockTickScheduler, LevelChunkTicks<Fluid> fluidTickScheduler, long inhabitedTime, @Nullable LevelChunkSection[] sectionArrayInitializer, @Nullable LevelChunk.PostLoadProcessor entityLoader, @Nullable BlendingData blendingData) {
-        super(pos, upgradeData, world, net.minecraft.server.MinecraftServer.getServer().registryAccess().registryOrThrow(Registries.BIOME), inhabitedTime, sectionArrayInitializer, blendingData); // Paper - Anti-Xray - The world isn't ready yet, use server singleton for registry
+    public LevelChunk(Level world, ChunkPos pos, UpgradeData upgradeData, LevelChunkTicks<Block> blockTickScheduler, LevelChunkTicks<Fluid> fluidTickScheduler, long inhabitedTime, int cropDays, @Nullable LevelChunkSection[] sectionArrayInitializer, @Nullable LevelChunk.PostLoadProcessor entityLoader, @Nullable BlendingData blendingData) { // KioCG - CropDays
+        super(pos, upgradeData, world, net.minecraft.server.MinecraftServer.getServer().registryAccess().registryOrThrow(Registries.BIOME), inhabitedTime, cropDays, sectionArrayInitializer, blendingData); // Paper - Anti-Xray - The world isn't ready yet, use server singleton for registry // KioCG - CropDays
         this.tickersInLevel = Maps.newHashMap();
         this.level = (ServerLevel) world; // CraftBukkit - type
         this.gameEventListenerRegistrySections = new Int2ObjectOpenHashMap();
@@ -129,7 +129,7 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
     // Paper end - rewrite chunk system
 
     public LevelChunk(ServerLevel world, ProtoChunk protoChunk, @Nullable LevelChunk.PostLoadProcessor entityLoader) {
-        this(world, protoChunk.getPos(), protoChunk.getUpgradeData(), protoChunk.unpackBlockTicks(), protoChunk.unpackFluidTicks(), protoChunk.getInhabitedTime(), protoChunk.getSections(), entityLoader, protoChunk.getBlendingData());
+        this(world, protoChunk.getPos(), protoChunk.getUpgradeData(), protoChunk.unpackBlockTicks(), protoChunk.unpackFluidTicks(), protoChunk.getInhabitedTime(), protoChunk.cropDays, protoChunk.getSections(), entityLoader, protoChunk.getBlendingData()); // KioCG - CropDays
         Iterator iterator = protoChunk.getBlockEntities().values().iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index 8cd6c1d838e0332125fde3fc36475034aa4effa0..49f2d36e07f155d47940dfb86a39ebd1e79be970 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -26,6 +26,7 @@ public class LevelChunkSection {
     // CraftBukkit start - read/write
     private PalettedContainer<Holder<Biome>> biomes;
     public final com.destroystokyo.paper.util.maplist.IBlockDataList tickingList = new com.destroystokyo.paper.util.maplist.IBlockDataList(); // Paper
+    public final com.destroystokyo.paper.util.maplist.IBlockDataList cropsList = new com.destroystokyo.paper.util.maplist.IBlockDataList(); // KioCG
 
     public LevelChunkSection(PalettedContainer<BlockState> datapaletteblock, PalettedContainer<Holder<Biome>> palettedcontainerro) {
         // CraftBukkit end
@@ -77,10 +78,12 @@ public class LevelChunkSection {
         if (!iblockdata1.isAir()) {
             --this.nonEmptyBlockCount;
             if (iblockdata1.isRandomlyTicking()) {
+                if (iblockdata1.isDayTicking()) { this.cropsList.remove(x, y, z); } else { // KioCG
                 --this.tickingBlockCount;
                 // Paper start
                 this.tickingList.remove(x, y, z);
                 // Paper end
+                } // KioCG
             }
         }
 
@@ -91,10 +94,12 @@ public class LevelChunkSection {
         if (!state.isAir()) {
             ++this.nonEmptyBlockCount;
             if (state.isRandomlyTicking()) {
+                if (state.isDayTicking()) { this.cropsList.add(x, y, z, state); } else { // KioCG
                 ++this.tickingBlockCount;
                 // Paper start
                 this.tickingList.add(x, y, z, state);
                 // Paper end
+                } // KioCG
             }
         }
 
@@ -124,6 +129,7 @@ public class LevelChunkSection {
     public void recalcBlockCounts() {
         // Paper start - unfuck this
         this.tickingList.clear();
+        this.cropsList.clear(); // KioCG
         this.nonEmptyBlockCount = 0;
         this.tickingBlockCount = 0;
         this.tickingFluidCount = 0;
@@ -135,8 +141,10 @@ public class LevelChunkSection {
                 if (!iblockdata.isAir()) {
                     this.nonEmptyBlockCount = (short) (this.nonEmptyBlockCount + 1);
                     if (iblockdata.isRandomlyTicking()) {
+                        if (iblockdata.isDayTicking()) { this.cropsList.add(i, iblockdata); } else { // KioCG
                         this.tickingBlockCount = (short)(this.tickingBlockCount + 1);
                         this.tickingList.add(i, iblockdata);
+                        } // KioCG
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java b/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
index 082eae7032d5a8055a0f67b8a5583bbbf6fa9916..d8055797f9ac72df57d3343e14f9bf024b5850ed 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
@@ -63,7 +63,7 @@ public class ProtoChunk extends ChunkAccess {
         Registry<Biome> biomeRegistry,
         @Nullable BlendingData blendingData
     ) {
-        super(pos, upgradeData, world, biomeRegistry, 0L, sections, blendingData);
+        super(pos, upgradeData, world, biomeRegistry, 0L, 0, sections, blendingData); // KioCG - CropDays
         this.blockTicks = blockTickScheduler;
         this.fluidTicks = fluidTickScheduler;
     }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 6d461849da76894244e6212a75da0c6e4fb459c3..13e9066abccd4190faa32d214b588e12333aa412 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -192,6 +192,7 @@ public class ChunkSerializer {
         }
 
         long l = nbt.getLong("InhabitedTime");
+        int cropDays = nbt.getInt("KioCG.CropDays"); // KioCG
         ChunkType chunktype = ChunkSerializer.getChunkTypeFromTag(nbt);
         DataResult dataresult;
         Logger logger;
@@ -216,7 +217,7 @@ public class ChunkSerializer {
                 return BuiltInRegistries.FLUID.getOptional(ResourceLocation.tryParse(s));
             }, chunkPos);
 
-            object1 = new LevelChunk(world.getLevel(), chunkPos, chunkconverter, levelchunkticks, levelchunkticks1, l, achunksection, ChunkSerializer.postLoadChunk(world, nbt), blendingdata);
+            object1 = new LevelChunk(world.getLevel(), chunkPos, chunkconverter, levelchunkticks, levelchunkticks1, l, cropDays, achunksection, ChunkSerializer.postLoadChunk(world, nbt), blendingdata); // KioCG - CropDays
         } else {
             ProtoChunkTicks<Block> protochunkticklist = ProtoChunkTicks.load(nbt.getList("block_ticks", 10), (s) -> {
                 return BuiltInRegistries.BLOCK.getOptional(ResourceLocation.tryParse(s));
@@ -228,6 +229,7 @@ public class ChunkSerializer {
 
             object1 = protochunk;
             protochunk.setInhabitedTime(l);
+            protochunk.cropDays = cropDays; // KioCG
             if (nbt.contains("below_zero_retrogen", 10)) {
                 dataresult = BelowZeroRetrogen.CODEC.parse(new Dynamic(NbtOps.INSTANCE, nbt.getCompound("below_zero_retrogen")));
                 logger = ChunkSerializer.LOGGER;
@@ -386,6 +388,7 @@ public class ChunkSerializer {
         nbttagcompound.putInt("zPos", chunkcoordintpair.z);
         nbttagcompound.putLong("LastUpdate", asyncsavedata != null ? asyncsavedata.worldTime() : world.getGameTime()); // Paper - async chunk saving
         nbttagcompound.putLong("InhabitedTime", chunk.getInhabitedTime());
+        nbttagcompound.putInt("KioCG.CropDays", chunk.cropDays); // KioCG
         nbttagcompound.putString("Status", BuiltInRegistries.CHUNK_STATUS.getKey(chunk.getPersistedStatus()).toString());
         BlendingData blendingdata = chunk.getBlendingData();
         DataResult<Tag> dataresult; // CraftBukkit - decompile error

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Fri, 1 Mar 2024 05:02:37 +0800
Subject: [PATCH] Vanilla recipe excludes model items


diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index eb47dd2417f2892a57d0ee9ddcdd75b37fb1cb3a..91931b1cf06ad489a5c3acd19f6d8706954f8997 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -359,6 +359,66 @@ public class GlobalConfiguration extends ConfigurationPart {
 
     public class KiocgConfig extends ConfigurationPart {
         public String feedbackForwardingSenderName = "MOSS";
+
+        public ModelItems modelItems;
+        public class ModelItems extends ConfigurationPart {
+
+            public VanillaRecipeCanUse vanillaRecipeCanUse;
+            public class VanillaRecipeCanUse extends ConfigurationPart {
+                private java.util.Set<Integer> advancements = java.util.Set.of();
+                private java.util.Set<Integer> anvil = java.util.Set.of();
+                private java.util.Set<Integer> beacon = java.util.Set.of();
+                private java.util.Set<Integer> cartographyTable = java.util.Set.of();
+                private java.util.Set<Integer> crafting = java.util.Set.of();
+                private java.util.Set<Integer> enchantment = java.util.Set.of();
+                private java.util.Set<Integer> grindstone = java.util.Set.of();
+                private java.util.Set<Integer> loom = java.util.Set.of();
+                private java.util.Set<Integer> smithing = java.util.Set.of();
+                private java.util.Set<Integer> stonecutter = java.util.Set.of();
+                private java.util.Set<Integer> furnace = java.util.Set.of();
+                private java.util.Set<Integer> brewingStand = java.util.Set.of();
+
+                public boolean allowed(net.minecraft.world.inventory.MenuType<?> menuType, net.minecraft.world.item.ItemStack itemStack) {
+                    if (menuType == net.minecraft.world.inventory.MenuType.ANVIL) {
+                        return include(anvil, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.BEACON) {
+                        return include(beacon, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.CARTOGRAPHY_TABLE) {
+                        return include(cartographyTable, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.CRAFTING) {
+                        return include(crafting, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.ENCHANTMENT) {
+                        return include(enchantment, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.GRINDSTONE) {
+                        return include(grindstone, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.LOOM) {
+                        return include(loom, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.SMITHING) {
+                        return include(smithing, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.STONECUTTER) {
+                        return include(stonecutter, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.FURNACE
+                               || menuType == net.minecraft.world.inventory.MenuType.BLAST_FURNACE
+                               || menuType == net.minecraft.world.inventory.MenuType.SMOKER) {
+                        return include(furnace, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.BREWING_STAND) {
+                        return include(brewingStand, itemStack);
+                    } else {
+                        LOGGER.error("无效的面板类型 {}", menuType);
+                    }
+                    return true;
+                }
+
+                public boolean canTriggerAdvancements(net.minecraft.world.item.ItemStack itemStack) {
+                    return include(advancements, itemStack);
+                }
+
+                private boolean include(java.util.Set<Integer> set, net.minecraft.world.item.ItemStack itemStack) {
+                    net.minecraft.world.item.component.CustomModelData customModelData = itemStack.get(net.minecraft.core.component.DataComponents.CUSTOM_MODEL_DATA);
+                    return customModelData == null || set.contains(customModelData.value());
+                }
+            }
+        }
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java b/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
index c3a0b91516c04a417f6093d3f8e30de6acc5d0ca..4c4dee793a075f6a00f0933364cd733e2e7971aa 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
@@ -32,6 +32,7 @@ public record ItemPredicate(
 
     @Override
     public boolean test(ItemStack stack) {
+        if (!io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeCanUse.canTriggerAdvancements(stack)) return false; // KioCG
         if (this.items.isPresent() && !stack.is(this.items.get())) {
             return false;
         } else if (!this.count.matches(stack.getCount())) {
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index 32910f677b0522ac8ec513fa0d00b714b52cfae4..cbcb0e4507a3ef26a73e4118dd6b4ad3a1f7659b 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -1020,6 +1020,16 @@ public abstract class AbstractContainerMenu {
         return this.stateId;
     }
 
+    // KioCG start
+    boolean allowModelItem(ItemStack itemStack) {
+        return allowModelItem(getType(), itemStack);
+    }
+
+    static boolean allowModelItem(MenuType<?> menuType, ItemStack itemStack) {
+        return io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeCanUse.allowed(menuType, itemStack);
+    }
+    // KioCG end
+
     // Paper start - Add missing InventoryHolders
     // The reason this is a supplier, is that the createHolder method uses the bukkit InventoryView#getTopInventory to get the inventory in question
     // and that can't be obtained safely until the AbstractContainerMenu has been fully constructed. Using a supplier lazily
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
index 6474b6063992d2c643c21187663de499f37b32d6..fc252b5b137c472a5610a78650aa7f3f03208280 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
@@ -149,7 +149,7 @@ public abstract class AbstractFurnaceMenu extends RecipeBookMenu<SingleRecipeInp
                     if (!this.moveItemStackTo(itemstack1, 0, 1, false)) {
                         return ItemStack.EMPTY;
                     }
-                } else if (this.isFuel(itemstack1)) {
+                } else if (this.isFuel(itemstack1) && this.allowModelItem(itemstack1)) { // KioCG
                     if (!this.moveItemStackTo(itemstack1, 1, 2, false)) {
                         return ItemStack.EMPTY;
                     }
diff --git a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
index 7198dc9ffc9a37dab3654e12aa497c442a9993c5..03ce932a285a4183c4023a84618a4b8460815dbf 100644
--- a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
@@ -159,9 +159,11 @@ public class AnvilMenu extends ItemCombinerMenu {
 
                 if (itemstack1.isDamageableItem() && itemstack1.getItem().isValidRepairItem(itemstack, itemstack2)) {
                     k = Math.min(itemstack1.getDamageValue(), itemstack1.getMaxDamage() / 4);
-                    if (k <= 0) {
+                    boolean refresh = false; // KioCG
+                    if (k <= 0 || (refresh = !this.allowModelItem(itemstack2))) { // KioCG - 模型物品: 防止材料用于修复装备
                         org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareAnvilEvent(this.getBukkitView(), ItemStack.EMPTY); // CraftBukkit
                         this.cost.set(AnvilMenu.DEFAULT_DENIED_COST); // CraftBukkit - use a variable for set a cost for denied item
+                        if (refresh) sendAllDataToRemote(); // KioCG
                         return;
                     }
 
@@ -174,9 +176,11 @@ public class AnvilMenu extends ItemCombinerMenu {
 
                     this.repairItemCountCost = i1;
                 } else {
-                    if (!flag && (!itemstack1.is(itemstack2.getItem()) || !itemstack1.isDamageableItem())) {
+                    boolean refresh = false; // KioCG
+                    if (!flag && (!itemstack1.is(itemstack2.getItem()) || !itemstack1.isDamageableItem() || (refresh = !this.allowModelItem(itemstack2)))) { // KioCG - 模型物品: 防止装备被消耗 (不包括有效附魔书)
                         org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareAnvilEvent(this.getBukkitView(), ItemStack.EMPTY); // CraftBukkit
                         this.cost.set(AnvilMenu.DEFAULT_DENIED_COST); // CraftBukkit - use a variable for set a cost for denied item
+                        if (refresh) sendAllDataToRemote(); // KioCG
                         return;
                     }
 
diff --git a/src/main/java/net/minecraft/world/inventory/BeaconMenu.java b/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
index 7f513e8c4f81524aee9326ddbbc6bec0b3fa1b27..3ab3e2a81d528a49b91081c2bcbdd944328bc57d 100644
--- a/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
@@ -45,6 +45,7 @@ public class BeaconMenu extends AbstractContainerMenu {
         this.beacon = new SimpleContainer(this.createBlockHolder(context), 1) { // CraftBukkit - decompile error // Paper - Add missing InventoryHolders
             @Override
             public boolean canPlaceItem(int slot, ItemStack stack) {
+                if (!BeaconMenu.this.allowModelItem(stack)) return false; // KioCG
                 return stack.is(ItemTags.BEACON_PAYMENT_ITEMS);
             }
 
@@ -217,6 +218,7 @@ public class BeaconMenu extends AbstractContainerMenu {
 
         @Override
         public boolean mayPlace(ItemStack stack) {
+            if (!BeaconMenu.this.allowModelItem(stack)) return false; // KioCG
             return stack.is(ItemTags.BEACON_PAYMENT_ITEMS);
         }
 
diff --git a/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java b/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java
index 93c4657f345b6d3442b1f2ab17b2703ded86b525..d7be1e1f3144073a2be7a5393a62f8571e53d586 100644
--- a/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java
@@ -177,6 +177,7 @@ public class BrewingStandMenu extends AbstractContainerMenu {
         }
 
         public static boolean mayPlaceItem(ItemStack stack, PotionBrewing potionBrewing) { // Paper - custom potion mixes
+            if (stack.is(Items.GLASS_BOTTLE) && !BrewingStandMenu.allowModelItem(net.minecraft.world.inventory.MenuType.BREWING_STAND, stack)) return potionBrewing.isCustomInput(stack); // KioCG
             return stack.is(Items.POTION) || stack.is(Items.SPLASH_POTION) || stack.is(Items.LINGERING_POTION) || stack.is(Items.GLASS_BOTTLE) || potionBrewing.isCustomInput(stack); // Paper - Custom Potion Mixes
         }
     }
@@ -192,6 +193,7 @@ public class BrewingStandMenu extends AbstractContainerMenu {
 
         @Override
         public boolean mayPlace(ItemStack stack) {
+            if (!BrewingStandMenu.allowModelItem(net.minecraft.world.inventory.MenuType.BREWING_STAND, stack)) return this.potionBrewing.isCustomIngredient(stack); // KioCG
             return this.potionBrewing.isIngredient(stack);
         }
     }
@@ -208,6 +210,7 @@ public class BrewingStandMenu extends AbstractContainerMenu {
         }
 
         public static boolean mayPlaceItem(ItemStack stack) {
+            if (!BrewingStandMenu.allowModelItem(net.minecraft.world.inventory.MenuType.BREWING_STAND, stack)) return false; // KioCG
             return stack.is(Items.BLAZE_POWDER);
         }
     }
diff --git a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
index a90e2c56c54797b2fec40eb3865835c5f640a544..3b8c71d56497dde62bef0440d3b376f6e2726ada 100644
--- a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
@@ -86,12 +86,14 @@ public class CartographyTableMenu extends AbstractContainerMenu {
         this.addSlot(new Slot(this.container, 0, 15, 15) { // CraftBukkit - decompile error
             @Override
             public boolean mayPlace(ItemStack stack) {
+                if (!CartographyTableMenu.this.allowModelItem(stack)) return false; // KioCG
                 return stack.is(Items.FILLED_MAP);
             }
         });
         this.addSlot(new Slot(this.container, 1, 15, 52) { // CraftBukkit - decompile error
             @Override
             public boolean mayPlace(ItemStack stack) {
+                if (!CartographyTableMenu.this.allowModelItem(stack)) return false; // KioCG
                 return stack.is(Items.PAPER) || stack.is(Items.MAP) || stack.is(Items.GLASS_PANE);
             }
         });
@@ -212,11 +214,11 @@ public class CartographyTableMenu extends AbstractContainerMenu {
 
                 slot1.onQuickCraft(itemstack1, itemstack);
             } else if (slot != 1 && slot != 0) {
-                if (itemstack1.is(Items.FILLED_MAP)) {
+                if (itemstack1.is(Items.FILLED_MAP) && this.allowModelItem(itemstack1)) { // KioCG
                     if (!this.moveItemStackTo(itemstack1, 0, 1, false)) {
                         return ItemStack.EMPTY;
                     }
-                } else if (!itemstack1.is(Items.PAPER) && !itemstack1.is(Items.MAP) && !itemstack1.is(Items.GLASS_PANE)) {
+                } else if (!itemstack1.is(Items.PAPER) && !itemstack1.is(Items.MAP) && !itemstack1.is(Items.GLASS_PANE) || !this.allowModelItem(itemstack1)) { // KioCG
                     if (slot >= 3 && slot < 30) {
                         if (!this.moveItemStackTo(itemstack1, 30, 39, false)) {
                             return ItemStack.EMPTY;
diff --git a/src/main/java/net/minecraft/world/inventory/CraftingMenu.java b/src/main/java/net/minecraft/world/inventory/CraftingMenu.java
index f9e4714cb0ee74505ed72200abed7756aa68dc90..6dea980f8be3e3e0ca8f7a7f47d9bbc2553e128b 100644
--- a/src/main/java/net/minecraft/world/inventory/CraftingMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/CraftingMenu.java
@@ -92,6 +92,13 @@ public class CraftingMenu extends RecipeBookMenu<CraftingInput, CraftingRecipe>
 
                     if (itemstack1.isItemEnabled(world.enabledFeatures())) {
                         itemstack = itemstack1;
+                        // KioCG start
+                        if (recipeholder1.id().getNamespace().equals(org.bukkit.NamespacedKey.MINECRAFT)) {
+                            if (craftingInventory.hasAnyMatching(itemStack -> !itemStack.isEmpty() && !allowModelItem(MenuType.CRAFTING, itemStack))) { // 玩家背包的合成栏无法getType()
+                                itemstack = ItemStack.EMPTY;
+                            }
+                        }
+                        // KioCG end
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
index 07223046761cb2186d75de8edc03a91d2e8e8b2f..ae64e05a72b4fc6c898c0fbb47cff7eeadeb1f44 100644
--- a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -95,6 +95,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
         this.addSlot(new Slot(this.enchantSlots, 1, 35, 47) { // CraftBukkit - decompile error
             @Override
             public boolean mayPlace(ItemStack stack) {
+                if (!EnchantmentMenu.this.allowModelItem(stack)) return false; // KioCG
                 return stack.is(Items.LAPIS_LAZULI);
             }
 
@@ -186,6 +187,13 @@ public class EnchantmentMenu extends AbstractContainerMenu {
 
                     PrepareItemEnchantEvent event = new PrepareItemEnchantEvent(this.player, this.getBukkitView(), this.access.getLocation().getBlock(), item, offers, i);
                     event.setCancelled(!itemstack.isEnchantable());
+                    // KioCG start
+                    if (!event.isCancelled()) {
+                        if (itemstack.is(Items.BOOK) && !this.allowModelItem(itemstack)) {
+                            event.setCancelled(true);
+                        }
+                    }
+                    // KioCG end
                     world.getCraftServer().getPluginManager().callEvent(event);
 
                     if (event.isCancelled()) {
@@ -371,7 +379,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
                 if (!this.moveItemStackTo(itemstack1, 2, 38, true)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (itemstack1.is(Items.LAPIS_LAZULI)) {
+            } else if (itemstack1.is(Items.LAPIS_LAZULI) && this.allowModelItem(itemstack1)) { // KioCG
                 if (!this.moveItemStackTo(itemstack1, 1, 2, true)) {
                     return ItemStack.EMPTY;
                 }
diff --git a/src/main/java/net/minecraft/world/inventory/FurnaceFuelSlot.java b/src/main/java/net/minecraft/world/inventory/FurnaceFuelSlot.java
index 4e656268de1058e179cd18f15228276ff5accba5..2c1e8fc56f09ca834c5edbb3c5a650202f77130e 100644
--- a/src/main/java/net/minecraft/world/inventory/FurnaceFuelSlot.java
+++ b/src/main/java/net/minecraft/world/inventory/FurnaceFuelSlot.java
@@ -14,6 +14,7 @@ public class FurnaceFuelSlot extends Slot {
 
     @Override
     public boolean mayPlace(ItemStack stack) {
+        if (!this.menu.allowModelItem(stack)) return false; // KioCG
         return this.menu.isFuel(stack) || isBucket(stack);
     }
 
diff --git a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
index 1678f6c8b2c7db761783e53043169bf12bc2cb29..914eef0cf1944de0b4bb23460a62aafd99d63002 100644
--- a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
@@ -184,6 +184,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
 
                 return !EnchantmentHelper.hasAnyEnchantments(itemstack2) ? ItemStack.EMPTY : this.removeNonCursesFrom(itemstack2.copy());
             } else {
+                if (!this.allowModelItem(secondInput)) return ItemStack.EMPTY; // KioCG - 模型物品: 防止第二槽位装备被消耗
                 return this.mergeItems(firstInput, secondInput);
             }
         } else {
diff --git a/src/main/java/net/minecraft/world/inventory/LoomMenu.java b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
index 531336c44c46555fef8c001fe8ca00c93624ad42..6469b367b53051df0fefcd2b90c4bc5c54fedab3 100644
--- a/src/main/java/net/minecraft/world/inventory/LoomMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
@@ -106,18 +106,21 @@ public class LoomMenu extends AbstractContainerMenu {
         this.bannerSlot = this.addSlot(new Slot(this.inputContainer, 0, 13, 26) { // CraftBukkit - decompile error
             @Override
             public boolean mayPlace(ItemStack stack) {
+                if (!LoomMenu.this.allowModelItem(stack)) return false; // KioCG
                 return stack.getItem() instanceof BannerItem;
             }
         });
         this.dyeSlot = this.addSlot(new Slot(this.inputContainer, 1, 33, 26) { // CraftBukkit - decompile error
             @Override
             public boolean mayPlace(ItemStack stack) {
+                if (!LoomMenu.this.allowModelItem(stack)) return false; // KioCG
                 return stack.getItem() instanceof DyeItem;
             }
         });
         this.patternSlot = this.addSlot(new Slot(this.inputContainer, 2, 23, 45) { // CraftBukkit - decompile error
             @Override
             public boolean mayPlace(ItemStack stack) {
+                if (!LoomMenu.this.allowModelItem(stack)) return false; // KioCG
                 return stack.getItem() instanceof BannerPatternItem;
             }
         });
@@ -326,15 +329,15 @@ public class LoomMenu extends AbstractContainerMenu {
 
                 slot1.onQuickCraft(itemstack1, itemstack);
             } else if (slot != this.dyeSlot.index && slot != this.bannerSlot.index && slot != this.patternSlot.index) {
-                if (itemstack1.getItem() instanceof BannerItem) {
+                if (itemstack1.getItem() instanceof BannerItem && this.allowModelItem(itemstack1)) { // KioCG
                     if (!this.moveItemStackTo(itemstack1, this.bannerSlot.index, this.bannerSlot.index + 1, false)) {
                         return ItemStack.EMPTY;
                     }
-                } else if (itemstack1.getItem() instanceof DyeItem) {
+                } else if (itemstack1.getItem() instanceof DyeItem && this.allowModelItem(itemstack1)) { // KioCG
                     if (!this.moveItemStackTo(itemstack1, this.dyeSlot.index, this.dyeSlot.index + 1, false)) {
                         return ItemStack.EMPTY;
                     }
-                } else if (itemstack1.getItem() instanceof BannerPatternItem) {
+                } else if (itemstack1.getItem() instanceof BannerPatternItem && this.allowModelItem(itemstack1)) { // KioCG
                     if (!this.moveItemStackTo(itemstack1, this.patternSlot.index, this.patternSlot.index + 1, false)) {
                         return ItemStack.EMPTY;
                     }
diff --git a/src/main/java/net/minecraft/world/inventory/SmithingMenu.java b/src/main/java/net/minecraft/world/inventory/SmithingMenu.java
index 86e51fcce767d265ee0d3beb611be2119085830b..c8ff5c4180f8a93455b26665668397f1f45c8db4 100644
--- a/src/main/java/net/minecraft/world/inventory/SmithingMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/SmithingMenu.java
@@ -115,6 +115,13 @@ public class SmithingMenu extends ItemCombinerMenu {
             if (itemstack.isItemEnabled(this.level.enabledFeatures())) {
                 this.selectedRecipe = recipeholder;
                 this.resultSlots.setRecipeUsed(recipeholder);
+                // KioCG start
+                if (recipeholder.id().getNamespace().equals(org.bukkit.NamespacedKey.MINECRAFT)) {
+                    if (this.inputSlots.hasAnyMatching(itemStack -> !itemStack.isEmpty() && !this.allowModelItem(itemStack))) {
+                        itemstack = ItemStack.EMPTY;
+                    }
+                }
+                // KioCG end
                 // CraftBukkit start
                 org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareSmithingEvent(this.getBukkitView(), itemstack);
                 // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
index 5ddae1afab0a68465ea60395c84b0997ee994f88..92349284a8bf14beab0556c4fbb7a5c232db95ab 100644
--- a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
@@ -200,7 +200,7 @@ public class StonecutterMenu extends AbstractContainerMenu {
     public void slotsChanged(Container inventory) {
         ItemStack itemstack = this.inputSlot.getItem();
 
-        if (!itemstack.is(this.input.getItem())) {
+        if (!ItemStack.isSameItemSameComponents(itemstack, this.input)) { // KioCG - 更准确的判断
             this.input = itemstack.copy();
             this.setupRecipeList(inventory, itemstack);
         }
@@ -218,6 +218,11 @@ public class StonecutterMenu extends AbstractContainerMenu {
         this.resultSlot.set(ItemStack.EMPTY);
         if (!stack.isEmpty()) {
             this.recipes = this.level.getRecipeManager().getRecipesFor(RecipeType.STONECUTTING, StonecutterMenu.createRecipeInput(input), this.level);
+            // KioCG start
+            if (!this.allowModelItem(stack)) {
+                this.recipes.removeIf(recipeholder -> recipeholder.id().getNamespace().equals(org.bukkit.NamespacedKey.MINECRAFT));
+            }
+            // KioCG end
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/item/trading/ItemCost.java b/src/main/java/net/minecraft/world/item/trading/ItemCost.java
index 5b365afe523c6f07f156a594737dd58b60ab3d7f..93aacabb410b77ddb57ad41a3a9625609ec3c4a0 100644
--- a/src/main/java/net/minecraft/world/item/trading/ItemCost.java
+++ b/src/main/java/net/minecraft/world/item/trading/ItemCost.java
@@ -57,6 +57,7 @@ public record ItemCost(Holder<Item> item, int count, DataComponentPredicate comp
     }
 
     public boolean test(ItemStack stack) {
+        if (this.itemStack.has(net.minecraft.core.component.DataComponents.CUSTOM_MODEL_DATA) != stack.has(net.minecraft.core.component.DataComponents.CUSTOM_MODEL_DATA)) return false; // KioCG
         return stack.is(this.item) && this.components.test((DataComponentHolder)stack);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index 730aca233f6e7564d4cb85b5b628d23c4f01d2f4..4546b7d36d031647098db967c675579fcbe86c5c 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -425,6 +425,13 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
 
     private static boolean canBurn(RegistryAccess registryManager, @Nullable RecipeHolder<?> recipe, NonNullList<ItemStack> slots, int count) {
         if (!((ItemStack) slots.get(0)).isEmpty() && recipe != null) {
+            // KioCG start
+            if (recipe.id().getNamespace().equals(org.bukkit.NamespacedKey.MINECRAFT)) {
+                if (!AbstractFurnaceBlockEntity.allowModelItem(net.minecraft.world.inventory.MenuType.FURNACE, slots.getFirst())) {
+                    return false;
+                }
+            }
+            // KioCG end
             ItemStack itemstack = recipe.value().getResultItem(registryManager);
 
             if (itemstack.isEmpty()) {
@@ -567,6 +574,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         } else {
             ItemStack itemstack1 = (ItemStack) this.items.get(1);
 
+            if (!AbstractFurnaceBlockEntity.allowModelItem(net.minecraft.world.inventory.MenuType.FURNACE, stack)) return false; // KioCG
             return AbstractFurnaceBlockEntity.isFuel(stack) || stack.is(Items.BUCKET) && !itemstack1.is(Items.BUCKET);
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
index 15fd1fe1b55b6421d2c09e8385c9f69fa0152e56..38cf831b3b9e991c42ca36ab3c518a7502b98754 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
@@ -206,6 +206,12 @@ public abstract class BaseContainerBlockEntity extends BlockEntity implements Co
         nbt.remove("Items");
     }
 
+    // KioCG start
+    static boolean allowModelItem(net.minecraft.world.inventory.MenuType<?> menuType, ItemStack itemStack) {
+        return io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeCanUse.allowed(menuType, itemStack);
+    }
+    // KioCG end
+
     // CraftBukkit start
     @Override
     public org.bukkit.Location getLocation() {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
index a2fafef89d5354e2cb02f5672810909950a57777..0026bee282e49ce983563b58c3117eee01846b66 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -239,6 +239,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
                 ItemStack itemstack1 = (ItemStack) slots.get(i);
 
                 if (!itemstack1.isEmpty() && brewingRecipeRegistry.hasMix(itemstack1, itemstack)) {
+                    if (!brewingRecipeRegistry.isCustomInput(itemstack1) && !BrewingStandBlockEntity.allowModelItem(net.minecraft.world.inventory.MenuType.BREWING_STAND, itemstack1)) continue; // KioCG - 模型物品: 判断药水能否酿造
                     return true;
                 }
             }
@@ -255,7 +256,11 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
         InventoryHolder owner = tileentitybrewingstand.getOwner();
         List<org.bukkit.inventory.ItemStack> brewResults = new ArrayList<>(3);
         for (int i = 0; i < 3; ++i) {
-            brewResults.add(i, CraftItemStack.asCraftMirror(potionbrewer.mix(itemstack, (ItemStack) nonnulllist.get(i))));
+            // KioCG start - 模型物品: 防止药水被酿造
+            ItemStack itemstack1 = (ItemStack) nonnulllist.get(i);
+            boolean isModelItem = !itemstack1.isEmpty() && !potionbrewer.isCustomInput(itemstack1) && !BrewingStandBlockEntity.allowModelItem(net.minecraft.world.inventory.MenuType.BREWING_STAND, itemstack1);
+            brewResults.add(i, CraftItemStack.asCraftMirror(isModelItem ? itemstack1 : potionbrewer.mix(itemstack, itemstack1)));
+            // KioCG end - 模型物品: 防止药水被酿造
         }
 
         if (owner != null) {
@@ -317,9 +322,10 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
     public boolean canPlaceItem(int slot, ItemStack stack) {
         PotionBrewing potionbrewer = this.level != null ? this.level.potionBrewing() : PotionBrewing.EMPTY; // Paper - move up
         if (slot == 3) {
-
+            if (!potionbrewer.isCustomIngredient(stack) && !BrewingStandBlockEntity.allowModelItem(net.minecraft.world.inventory.MenuType.BREWING_STAND, stack)) return false; // KioCG
             return potionbrewer.isIngredient(stack);
         } else {
+            if ((slot == 4 || stack.is(Items.GLASS_BOTTLE) && !potionbrewer.isCustomInput(stack)) && !BrewingStandBlockEntity.allowModelItem(net.minecraft.world.inventory.MenuType.BREWING_STAND, stack)) return false; // KioCG
             return slot == 4 ? stack.is(Items.BLAZE_POWDER) : (stack.is(Items.POTION) || stack.is(Items.SPLASH_POTION) || stack.is(Items.LINGERING_POTION) || stack.is(Items.GLASS_BOTTLE) || potionbrewer.isCustomInput(stack)) && this.getItem(slot).isEmpty(); // Paper - Custom Potion Mixes
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
index 6d58a30a588ec98bc343ab0ab82be82d9cf0618c..665a1dd59cd65e1b3e0739c7075106e767def41a 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -84,10 +84,18 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
                         org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
 
                         BlockCookEvent blockCookEvent = new BlockCookEvent(CraftBlock.at(world, pos), source, result, (org.bukkit.inventory.CookingRecipe<?>) recipeHolderOptional.map(RecipeHolder::toBukkitRecipe).orElse(null)); // Paper - Add recipe to cook events
+                        // KioCG start
+                        if (blockCookEvent.getRecipe() != null && blockCookEvent.getRecipe().getKey().getNamespace().equals(org.bukkit.NamespacedKey.MINECRAFT)) {
+                            if (!AbstractFurnaceBlockEntity.allowModelItem(net.minecraft.world.inventory.MenuType.FURNACE, itemstack)) {
+                                blockCookEvent.setCancelled(true);
+                            }
+                        }
+                        // KioCG end
                         world.getCraftServer().getPluginManager().callEvent(blockCookEvent);
 
                         if (blockCookEvent.isCancelled()) {
-                            return;
+                            campfire.cookingProgress[i] = 0; // KioCG - 重置烹饪进度
+                            continue; // KioCG - 应该正常循环下一个物品
                         }
 
                         result = blockCookEvent.getResult();
@@ -231,6 +239,13 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
             if (itemstack1.isEmpty()) {
                 // CraftBukkit start
                 CampfireStartEvent event = new CampfireStartEvent(CraftBlock.at(this.level,this.worldPosition), CraftItemStack.asCraftMirror(stack), (CampfireRecipe) this.getCookableRecipe(stack).get().toBukkitRecipe());
+                // KioCG start
+                if (event.getRecipe().getKey().getNamespace().equals(org.bukkit.NamespacedKey.MINECRAFT)) {
+                    if (!AbstractFurnaceBlockEntity.allowModelItem(net.minecraft.world.inventory.MenuType.FURNACE, stack)) {
+                        return false;
+                    }
+                }
+                // KioCG end
                 this.level.getCraftServer().getPluginManager().callEvent(event);
                 this.cookingTime[j] = event.getTotalCookTime(); // i -> event.getTotalCookTime()
                 // CraftBukkit end

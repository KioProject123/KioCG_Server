From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Fri, 29 Mar 2024 23:28:23 +0800
Subject: [PATCH] Default max stack size


diff --git a/src/main/java/net/minecraft/core/component/DataComponents.java b/src/main/java/net/minecraft/core/component/DataComponents.java
index 60757f8df706cba92350d73503b73913cff3bcfc..194dc9b7831d2cfaf054bc4a40d8192715f78b5f 100644
--- a/src/main/java/net/minecraft/core/component/DataComponents.java
+++ b/src/main/java/net/minecraft/core/component/DataComponents.java
@@ -56,7 +56,7 @@ public class DataComponents {
     static final EncoderCache ENCODER_CACHE = new EncoderCache(512);
     public static final DataComponentType<CustomData> CUSTOM_DATA = register("custom_data", builder -> builder.persistent(CustomData.CODEC));
     public static final DataComponentType<Integer> MAX_STACK_SIZE = register(
-        "max_stack_size", builder -> builder.persistent(ExtraCodecs.intRange(1, 99)).networkSynchronized(ByteBufCodecs.VAR_INT)
+        "max_stack_size", builder -> builder.persistent(ExtraCodecs.intRange(1, 999)).networkSynchronized(ByteBufCodecs.VAR_INT) // KioCG
     );
     public static final DataComponentType<Integer> MAX_DAMAGE = register(
         "max_damage", builder -> builder.persistent(ExtraCodecs.POSITIVE_INT).networkSynchronized(ByteBufCodecs.VAR_INT)
@@ -224,7 +224,7 @@ public class DataComponents {
         "container_loot", builder -> builder.persistent(SeededContainerLoot.CODEC)
     );
     public static final DataComponentMap COMMON_ITEM_COMPONENTS = DataComponentMap.builder()
-        .set(MAX_STACK_SIZE, 64)
+        .set(MAX_STACK_SIZE, 999) // KioCG
         .set(LORE, ItemLore.EMPTY)
         .set(ENCHANTMENTS, ItemEnchantments.EMPTY)
         .set(REPAIR_COST, 0)
diff --git a/src/main/java/net/minecraft/world/Container.java b/src/main/java/net/minecraft/world/Container.java
index 5db5ba026462ca642dcee718af732f80fadabef5..c53a99e9c06b07c595086d0571c41050efe87bd7 100644
--- a/src/main/java/net/minecraft/world/Container.java
+++ b/src/main/java/net/minecraft/world/Container.java
@@ -109,6 +109,6 @@ public interface Container extends Clearable {
 
     org.bukkit.Location getLocation();
 
-    int MAX_STACK = 99;
+    int MAX_STACK = 999; // KioCG
     // CraftBukkit end
 }
diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index 8fd54bccb7af59da9113d8a289d12d8fad1fb467..a09b7fbcdcb0f1f321c625d112a0d9b3a451d066 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -62,7 +62,7 @@ public class Item implements FeatureElement, ItemLike {
     public static final ResourceLocation BASE_ATTACK_DAMAGE_ID = ResourceLocation.withDefaultNamespace("base_attack_damage");
     public static final ResourceLocation BASE_ATTACK_SPEED_ID = ResourceLocation.withDefaultNamespace("base_attack_speed");
     public static final int DEFAULT_MAX_STACK_SIZE = 64;
-    public static final int ABSOLUTE_MAX_STACK_SIZE = 99;
+    public static final int ABSOLUTE_MAX_STACK_SIZE = 999; // KioCG
     public static final int MAX_BAR_WIDTH = 13;
     private final Holder.Reference<Item> builtInRegistryHolder = BuiltInRegistries.ITEM.createIntrusiveHolder(this);
     private final DataComponentMap components;
@@ -354,6 +354,7 @@ public class Item implements FeatureElement, ItemLike {
         }
 
         public Item.Properties stacksTo(int maxCount) {
+            if (maxCount == 16) maxCount = 99; // KioCG
             return this.component(DataComponents.MAX_STACK_SIZE, maxCount);
         }
 
diff --git a/src/main/java/net/minecraft/world/item/Items.java b/src/main/java/net/minecraft/world/item/Items.java
index 07315232192f6e09910a028c4643d7f0544c62e3..6cef99bc8ff178f86b0e0ea6c66b70efe30e75f1 100644
--- a/src/main/java/net/minecraft/world/item/Items.java
+++ b/src/main/java/net/minecraft/world/item/Items.java
@@ -1363,7 +1363,7 @@ public class Items {
     public static final Item GOLD_NUGGET = registerItem("gold_nugget", new Item(new Item.Properties()));
     public static final Item NETHER_WART = registerItem("nether_wart", new ItemNameBlockItem(Blocks.NETHER_WART, new Item.Properties()));
     public static final Item POTION = registerItem(
-        "potion", new PotionItem(new Item.Properties().stacksTo(1).component(DataComponents.POTION_CONTENTS, PotionContents.EMPTY))
+        "potion", new PotionItem(new Item.Properties().stacksTo(16).component(DataComponents.POTION_CONTENTS, PotionContents.EMPTY)) // KioCG
     );
     public static final Item GLASS_BOTTLE = registerItem("glass_bottle", new BottleItem(new Item.Properties()));
     public static final Item SPIDER_EYE = registerItem("spider_eye", new Item(new Item.Properties().food(Foods.SPIDER_EYE)));
@@ -1767,14 +1767,14 @@ public class Items {
     public static final Item BEETROOT_SOUP = registerItem("beetroot_soup", new Item(new Item.Properties().stacksTo(1).food(Foods.BEETROOT_SOUP)));
     public static final Item DRAGON_BREATH = registerItem("dragon_breath", new Item(new Item.Properties().craftRemainder(GLASS_BOTTLE).rarity(Rarity.UNCOMMON)));
     public static final Item SPLASH_POTION = registerItem(
-        "splash_potion", new SplashPotionItem(new Item.Properties().stacksTo(1).component(DataComponents.POTION_CONTENTS, PotionContents.EMPTY))
+        "splash_potion", new SplashPotionItem(new Item.Properties().stacksTo(16).component(DataComponents.POTION_CONTENTS, PotionContents.EMPTY)) // KioCG
     );
     public static final Item SPECTRAL_ARROW = registerItem("spectral_arrow", new SpectralArrowItem(new Item.Properties()));
     public static final Item TIPPED_ARROW = registerItem(
         "tipped_arrow", new TippedArrowItem(new Item.Properties().component(DataComponents.POTION_CONTENTS, PotionContents.EMPTY))
     );
     public static final Item LINGERING_POTION = registerItem(
-        "lingering_potion", new LingeringPotionItem(new Item.Properties().stacksTo(1).component(DataComponents.POTION_CONTENTS, PotionContents.EMPTY))
+        "lingering_potion", new LingeringPotionItem(new Item.Properties().stacksTo(16).component(DataComponents.POTION_CONTENTS, PotionContents.EMPTY)) // KioCG
     );
     public static final Item SHIELD = registerItem(
         "shield", new ShieldItem(new Item.Properties().durability(336).component(DataComponents.BANNER_PATTERNS, BannerPatternLayers.EMPTY))
diff --git a/src/main/java/net/minecraft/world/item/PotionItem.java b/src/main/java/net/minecraft/world/item/PotionItem.java
index d147b24bb57b322d3f5f4a9eb8cfef2acdd9e0f5..eb93202f1087ec06055918e78132892e0ab3e4f7 100644
--- a/src/main/java/net/minecraft/world/item/PotionItem.java
+++ b/src/main/java/net/minecraft/world/item/PotionItem.java
@@ -91,7 +91,9 @@ public class PotionItem extends Item {
             }
 
             if (entityhuman != null) {
+                boolean add = // KioCG
                 entityhuman.getInventory().add(new ItemStack(Items.GLASS_BOTTLE));
+                if (!add) entityhuman.drop(new ItemStack(Items.GLASS_BOTTLE), false); // KioCG
             }
         }
 

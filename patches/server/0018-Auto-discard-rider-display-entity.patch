From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Fri, 15 Mar 2024 10:48:31 +0800
Subject: [PATCH] Auto discard rider display entity


diff --git a/src/main/java/net/minecraft/world/entity/Display.java b/src/main/java/net/minecraft/world/entity/Display.java
index 2ecd3ed5b36475125c6f63af2612011fc8fba8a5..05a0c6804036b8cf6fabcf21d21a8c6653868d05 100644
--- a/src/main/java/net/minecraft/world/entity/Display.java
+++ b/src/main/java/net/minecraft/world/entity/Display.java
@@ -82,6 +82,10 @@ public abstract class Display extends Entity {
     private Display.RenderState renderState;
     @Nullable
     private Display.PosRotInterpolationTarget posRotInterpolationTarget;
+    // KioCG start
+    private boolean riderDisplay = false; public boolean isRiderDisplay() { return this.riderDisplay; } public void setRiderDisplay(boolean riderDisplay) { this.riderDisplay = riderDisplay; }
+    private int riderPriority = 0; public int getRiderPriority() { return this.riderPriority; } public void setRiderPriority(int riderPriority) { this.riderPriority = riderPriority; }
+    // KioCG end
 
     public Display(EntityType<?> type, Level world) {
         super(type, world);
@@ -126,6 +130,16 @@ public abstract class Display extends Entity {
             this.stopRiding();
         }
 
+        // KioCG start
+        if (this.riderDisplay) {
+            if (!this.hasPassenger(passenger -> !(passenger instanceof Display display) || !display.riderDisplay)) {
+                if (entity == null || entity instanceof Display display && display.riderDisplay) {
+                    this.discard();
+                }
+            }
+        }
+        // KioCG end
+
         if (this.level().isClientSide) {
             if (this.updateStartTick) {
                 this.updateStartTick = false;
@@ -249,6 +263,14 @@ public abstract class Display extends Entity {
             this.setBrightnessOverride((Brightness)null);
         }
 
+        // KioCG start
+        if (nbt.contains("KioCG.RiderDisplay")) {
+            this.riderDisplay = nbt.getBoolean("KioCG.RiderDisplay");
+        }
+        if (nbt.contains("KioCG.RiderPriority")) {
+            this.riderPriority = nbt.getInt("KioCG.RiderPriority");
+        }
+        // KioCG end
     }
 
     public void setTransformation(Transformation transformation) {
@@ -281,6 +303,10 @@ public abstract class Display extends Entity {
             });
         }
 
+        // KioCG start
+        nbt.putBoolean("KioCG.RiderDisplay", this.riderDisplay);
+        nbt.putInt("KioCG.RiderPriority", this.riderPriority);
+        // KioCG end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 5c6424a3800344c7fc5f3a0cbdf36a4b57e0a12c..599b8c2d29af288a65ba9bb21d3fdb25d257e6a3 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -4877,6 +4877,36 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
         this.setRot(f, f1);
     }
 
+    // KioCG start
+    public boolean canAddRiderDisplay(int priority) {
+        final Entity firstPassenger = this.getFirstPassenger();
+        return firstPassenger == null || firstPassenger instanceof Display display && display.isRiderDisplay() && display.getRiderPriority() < priority;
+    }
+
+    public Display addRiderDisplay(ItemStack itemStack) {
+        return addRiderDisplay(0, itemStack);
+    }
+
+    public Display addRiderDisplay(int priority, ItemStack itemStack) {
+        this.ejectPassengers();
+
+        Display.ItemDisplay display = EntityType.ITEM_DISPLAY.create(this.level());
+        if (display != null) {
+            display.moveTo(this.position());
+            display.persist = false;
+            display.setRiderDisplay(true);
+            display.setRiderPriority(priority);
+            display.setItemStack(itemStack);
+            display.setItemTransform(net.minecraft.world.item.ItemDisplayContext.GROUND);
+            display.setBillboardConstraints(Display.BillboardConstraints.VERTICAL);
+            display.setTransformation(new com.mojang.math.Transformation(new org.joml.Vector3f(0.0F, 0.5F, 0.0F), null, null, null));
+            display.startRiding(this);
+            this.level().addFreshEntity(display);
+        }
+        return display;
+    }
+    // KioCG end
+
     public static enum RemovalReason {
 
         KILLED(true, false), DISCARDED(true, false), UNLOADED_TO_CHUNK(false, true), UNLOADED_WITH_PLAYER(false, false), CHANGED_DIMENSION(false, false);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDisplay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDisplay.java
index 48eeb1d9ba0ad6f895bfe507a6fbe4b9c9530e47..b58d22c40d071f2ab90fc6069f4dfa35d93682c1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDisplay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDisplay.java
@@ -167,4 +167,6 @@ public class CraftDisplay extends CraftEntity implements Display {
             this.getHandle().setBrightnessOverride(null);
         }
     }
+
+    public boolean isRiderDisplay() { return this.getHandle().isRiderDisplay(); } public void setRiderDisplay(boolean riderDisplay) { this.getHandle().setRiderDisplay(riderDisplay); } // KioCG
 }

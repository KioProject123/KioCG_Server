From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Sun, 24 Mar 2024 09:51:12 +0800
Subject: [PATCH] Crops grow every day


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index cd3cc2ba3480fc08920a74efb0fc24c1bf0bed6b..e5b306e33b67cfce99e41e56df673733f809b2fe 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -853,6 +853,50 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             }
         }
 
+        // KioCG start - 农作物每天生长
+        int daysSpent = 0;
+        int days = (int) this.getDays();
+        if (days != chunk.cropDays) {
+            daysSpent = Mth.clamp(days - chunk.cropDays, 0, 7);
+            chunk.cropDays = days;
+        }
+
+        if (daysSpent == 0) {
+            return;
+        }
+
+        for (int sectionIndex = 0, sectionsLen = sections.length; sectionIndex < sectionsLen; sectionIndex++) {
+            final int offsetY = (sectionIndex + minSection) << 4;
+            final LevelChunkSection section = sections[sectionIndex];
+            final net.minecraft.world.level.chunk.PalettedContainer<net.minecraft.world.level.block.state.BlockState> states = section.states;
+            if (section == null || section.cropsBlocks.size() == 0) {
+                continue;
+            }
+
+            for (int i = 0; i < daysSpent; ++i) {
+                final int cropBlocks = section.cropsBlocks.size();
+                if (cropBlocks == 0) break;
+
+                List<Pair<BlockPos, BlockState>> tickCrops = new ArrayList<>(cropBlocks);
+                for (int a = 0; a < cropBlocks; ++a) {
+                    final long raw = section.cropsBlocks.getRaw(a);
+                    final int location = ca.spottedleaf.moonrise.common.list.IBlockDataList.getLocationFromRaw(raw);
+                    final int x = (location & 15);
+                    final int y = ((location >>> (4 + 4)) & 255);
+                    final int z = ((location >>> 4) & 15);
+                    final BlockState state = states.get(x | (z << 4) | (y << 8));
+
+                    final BlockPos pos = new BlockPos(x | offsetX, y | offsetY, z | offsetZ);
+
+                    tickCrops.add(Pair.of(pos, state));
+                }
+                for (Pair<BlockPos, BlockState> pair : tickCrops) {
+                    pair.getSecond().dayTick(this, pair.getFirst(), random);
+                }
+            }
+        }
+        // KioCG end - 农作物每天生长
+
         return;
     }
     // Paper end - optimise random ticking
diff --git a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
index ac0881f64ef98ea92d32b600c08c77aa3442a410..eb7352941ba038be9ddf02da21b61159d1c19448 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
@@ -43,9 +43,16 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
         return BambooSaplingBlock.SAPLING_SHAPE.move(vec3d.x, vec3d.y, vec3d.z);
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (random.nextFloat() < (world.spigotConfig.bambooModifier / 100.0f) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             this.growBamboo(world, pos);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
index e2951dd077441fe9cda461a2d3ef0c0671308316..6117f648071071b3c5e5ea005a4890b1c5899bda 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
@@ -131,10 +131,17 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
         return (Integer) state.getValue(BambooStalkBlock.STAGE) == 0;
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if ((Integer) state.getValue(BambooStalkBlock.STAGE) == 0) {
-            if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
+            if (random.nextFloat() < (world.spigotConfig.bambooModifier / 100.0f) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                 int i = this.getHeightBelowUpToMax(world, pos) + 1;
 
                 if (i < world.paperConfig().maxGrowthHeight.bamboo.max) { // Paper - Configurable cactus/bamboo/reed growth height
diff --git a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
index 0ac0efc1a744774521298307b973c6f2a28a8aaf..74027c0dc89e57bdc703d250f6f915afd06123a7 100644
--- a/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeetrootBlock.java
@@ -53,7 +53,7 @@ public class BeetrootBlock extends CropBlock {
 
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (random.nextInt(3) != 0) {
+        if (true || random.nextInt(3) != 0) { // KioCG
             super.randomTick(state, world, pos, random);
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
index 8920855b07a31715327b8102c7faafc9f916825d..dfccd01bed458b57e8bfe910edab54d90873dcb9 100644
--- a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
@@ -24,6 +24,13 @@ public class BuddingAmethystBlock extends AmethystBlock {
         super(settings);
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (random.nextInt(5) == 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/CactusBlock.java b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
index ff4dda48116a2969704b355ff96407ba869b466e..83eb8078d12df8bb3cad0df7924bc68839c3fe71 100644
--- a/src/main/java/net/minecraft/world/level/block/CactusBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
@@ -50,6 +50,13 @@ public class CactusBlock extends Block {
 
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         BlockPos blockposition1 = pos.above();
@@ -65,13 +72,13 @@ public class CactusBlock extends Block {
                 int j = (Integer) state.getValue(CactusBlock.AGE);
 
                 int modifier = world.spigotConfig.cactusModifier; // Spigot - SPIGOT-7159: Better modifier resolution
-                if (j >= 15 || (modifier != 100 && random.nextFloat() < (modifier / (100.0f * 16)))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                if (random.nextFloat() < (modifier / 100.0f)) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                     CraftEventFactory.handleBlockGrowEvent(world, blockposition1, this.defaultBlockState()); // CraftBukkit
                     BlockState iblockdata1 = (BlockState) state.setValue(CactusBlock.AGE, 0);
 
                     world.setBlock(pos, iblockdata1, 4);
                     world.neighborChanged(iblockdata1, blockposition1, this, pos, false);
-                } else if (modifier == 100 || random.nextFloat() < (modifier / (100.0f * 16))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                } else if (false) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                     world.setBlock(pos, (BlockState) state.setValue(CactusBlock.AGE, j + 1), 4);
                 }
 
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
index 6709cb6b657a8612781c2fe4dd76ee38f329c5ba..dc020ffeab66280b1baa4e5b559f454e3f1dd197 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
@@ -60,6 +60,13 @@ public class ChorusFlowerBlock extends Block {
         return (Integer) state.getValue(ChorusFlowerBlock.AGE) < 5;
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     public VoxelShape getBlockSupportShape(BlockState state, BlockGetter world, BlockPos pos) {
         return ChorusFlowerBlock.BLOCK_SUPPORT_SHAPE;
@@ -154,8 +161,12 @@ public class ChorusFlowerBlock extends Block {
     }
 
     private void placeGrownFlower(Level world, BlockPos pos, int age) {
-        world.setBlock(pos, (BlockState) this.defaultBlockState().setValue(ChorusFlowerBlock.AGE, age), 2);
+        // KioCG start
+        BlockState blockState = this.defaultBlockState().setValue(ChorusFlowerBlock.AGE, age);
+        world.setBlock(pos, blockState, 2);
+        // KioCG end
         world.levelEvent(1033, pos, 0);
+        if (world.random.nextDouble() < 0.8) blockState.randomTick((ServerLevel) world, pos, world.random); // KioCG - 随机继续生长
     }
 
     private void placeDeadFlower(Level world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
index fe4237b40af32415f8635ab769edc0f948a3e12d..d714d04c9ab95dc590d445ef339d13307038939a 100644
--- a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
@@ -56,9 +56,16 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
         return (Integer) state.getValue(CocoaBlock.AGE) < 2;
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (world.random.nextFloat() < (world.spigotConfig.cocoaModifier / (100.0f * 5))) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (world.random.nextFloat() < (world.spigotConfig.cocoaModifier / 100.0f)) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             int i = (Integer) state.getValue(CocoaBlock.AGE);
 
             if (i < 2) {
diff --git a/src/main/java/net/minecraft/world/level/block/CropBlock.java b/src/main/java/net/minecraft/world/level/block/CropBlock.java
index 55ee9da5bde921d4e509202751d5228f4dbfc5c8..fc5fdc3172f493a206946d2177c181046e0a27c2 100644
--- a/src/main/java/net/minecraft/world/level/block/CropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CropBlock.java
@@ -75,6 +75,13 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
         return !this.isMaxAge(state);
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.getRawBrightness(pos, 0) >= 9) {
@@ -99,7 +106,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
                     modifier = world.spigotConfig.wheatModifier;
                 }
 
-                if (random.nextFloat() < (modifier / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                if (modifier > 0 && FarmBlock.isMoisture(world, pos.below(), random) && random.nextFloat() < (modifier / 100.0f)) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                     // Spigot end
                     CraftEventFactory.handleBlockGrowEvent(world, pos, this.getStateForAge(i + 1), 2); // CraftBukkit
                 }
@@ -124,6 +131,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
     }
 
     protected static float getGrowthSpeed(Block block, BlockGetter world, BlockPos pos) {
+        if (true) return 1.0F; // KioCG - 已弃用, 跳过繁重的运算
         float f = 1.0F;
         BlockPos blockposition1 = pos.below();
 
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index c33a777db6a4cffcc21ea92e5a9fca6f9825bbc8..fff05f0d10d5f68d0ff927a49b81cffb9f840804 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -108,6 +108,13 @@ public class FarmBlock extends Block {
 
     }
 
+    // KioCG start
+    public static boolean isMoisture(ServerLevel world, BlockPos pos, RandomSource random) {
+        BlockState iblockdata = world.getBlockState(pos);
+        return iblockdata.is(Blocks.FARMLAND) && (Integer) iblockdata.getValue(FarmBlock.MOISTURE) > 0;
+    }
+    // KioCG end
+
     @Override
     public void fallOn(Level world, BlockState state, BlockPos pos, Entity entity, float fallDistance) {
         super.fallOn(world, state, pos, entity, fallDistance); // CraftBukkit - moved here as game rules / events shouldn't affect fall damage.
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
index cf05da1c86e3018db11dc079bf50317b6639e5cc..2e45bc0ffe23db1fe87056b3bcd7e337e36354a6 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
@@ -20,7 +20,7 @@ import net.minecraft.world.phys.shapes.VoxelShape;
 public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements BonemealableBlock {
 
     public static final IntegerProperty AGE = BlockStateProperties.AGE_25;
-    public static final int MAX_AGE = 25;
+    public static final int MAX_AGE = 15; // KioCG
     private final double growPerTickProbability;
 
     protected GrowingPlantHeadBlock(BlockBehaviour.Properties settings, Direction growthDirection, VoxelShape outlineShape, boolean tickWater, double growthChance) {
@@ -34,14 +34,21 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
 
     @Override
     public BlockState getStateForPlacement(LevelAccessor world) {
-        return (BlockState) this.defaultBlockState().setValue(GrowingPlantHeadBlock.AGE, world.getRandom().nextInt(25));
+        return (BlockState) this.defaultBlockState().setValue(GrowingPlantHeadBlock.AGE, world.getRandom().nextInt(this.MAX_AGE)); // KioCG
     }
 
     @Override
     protected boolean isRandomlyTicking(BlockState state) {
-        return (Integer) state.getValue(GrowingPlantHeadBlock.AGE) < 25;
+        return (Integer) state.getValue(GrowingPlantHeadBlock.AGE) < this.MAX_AGE; // KioCG
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         // Spigot start
@@ -55,7 +62,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
         } else {
             modifier = world.spigotConfig.caveVinesModifier;
         }
-        if ((Integer) state.getValue(GrowingPlantHeadBlock.AGE) < 25 && random.nextDouble() < ((modifier / 100.0D) * this.growPerTickProbability)) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if ((Integer) state.getValue(GrowingPlantHeadBlock.AGE) < this.MAX_AGE && random.nextFloat() < (modifier / 100.0f)) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             // Spigot end
             BlockPos blockposition1 = pos.relative(this.growthDirection);
 
@@ -77,11 +84,11 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     }
 
     public BlockState getMaxAgeState(BlockState state) {
-        return (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, 25);
+        return (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, this.MAX_AGE); // KioCG
     }
 
     public boolean isMaxAge(BlockState state) {
-        return (Integer) state.getValue(GrowingPlantHeadBlock.AGE) == 25;
+        return (Integer) state.getValue(GrowingPlantHeadBlock.AGE) == this.MAX_AGE; // KioCG
     }
 
     protected BlockState updateBodyAfterConvertedFromHead(BlockState from, BlockState to) {
@@ -123,13 +130,13 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
         BlockPos blockposition1 = pos.relative(this.growthDirection);
-        int i = Math.min((Integer) state.getValue(GrowingPlantHeadBlock.AGE) + 1, 25);
+        int i = Math.min((Integer) state.getValue(GrowingPlantHeadBlock.AGE) + 1, this.MAX_AGE); // KioCG
         int j = this.getBlocksToGrowWhenBonemealed(random);
 
         for (int k = 0; k < j && this.canGrowInto(world.getBlockState(blockposition1)); ++k) {
             world.setBlockAndUpdate(blockposition1, (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, i));
             blockposition1 = blockposition1.relative(this.growthDirection);
-            i = Math.min(i + 1, 25);
+            i = Math.min(i + 1, this.MAX_AGE); // KioCG
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
index b98e17d21d43610fb7a7ce1641c518598ff48cb0..ff3fbca8d1e6c731e9441c4f4a6e5dc657ce5403 100644
--- a/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
@@ -114,7 +114,7 @@ public class MangrovePropaguleBlock extends SaplingBlock implements SimpleWaterl
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!isHanging(state)) {
-            if (random.nextFloat() < (world.spigotConfig.saplingModifier / (100.0F * 7))) { // Paper - Fix Spigot growth modifiers
+            if (random.nextFloat() < (world.spigotConfig.saplingModifier / 100.0F)) { // Paper - Fix Spigot growth modifiers // KioCG
                 this.advanceTree(world, pos, state, random);
             }
         } else {
diff --git a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
index 1172d85c5c26ab2142343d91149766e5993cb36a..38cf1684ca439f085eabcc7351e752c0337669c3 100644
--- a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
@@ -49,9 +49,16 @@ public class MushroomBlock extends BushBlock implements BonemealableBlock {
         return MushroomBlock.SHAPE;
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (random.nextFloat() < (world.spigotConfig.mushroomModifier / (100.0f * 25))) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (random.nextFloat() < (world.spigotConfig.mushroomModifier / 100.0f)) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             int i = 5;
             boolean flag = true;
             Iterator iterator = BlockPos.betweenClosed(pos.offset(-4, -1, -4), pos.offset(4, 1, 4)).iterator();
diff --git a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
index acbd60a2f162fe0e254e36d0e8e7face3fc8a7b3..f81d2d4afeee07e932fc638fe292d8c80987d45a 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
@@ -48,11 +48,18 @@ public class NetherWartBlock extends BushBlock {
         return (Integer) state.getValue(NetherWartBlock.AGE) < 3;
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         int i = (Integer) state.getValue(NetherWartBlock.AGE);
 
-        if (i < 3 && random.nextFloat() < (world.spigotConfig.wartModifier / (100.0f * 10))) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (i < 3 && random.nextFloat() < (world.spigotConfig.wartModifier / 100.0f)) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             state = (BlockState) state.setValue(NetherWartBlock.AGE, i + 1);
             org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, pos, state, 2); // CraftBukkit
         }
diff --git a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
index b4cf9b3b814d951819b8e7ca07b61a65f9835c94..2d80619bbbc0dbc2823fc54a62f8fe18c28c3073 100644
--- a/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PitcherCropBlock.java
@@ -120,11 +120,18 @@ public class PitcherCropBlock extends DoublePlantBlock implements BonemealableBl
         return state.getValue(HALF) == DoubleBlockHalf.LOWER && !this.isMaxAge(state);
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         float f = CropBlock.getGrowthSpeed(this, world, pos);
-        boolean bl = random.nextFloat() < (world.spigotConfig.pitcherPlantModifier / (100.0F * (Math.floor(25.0F / f) + 1))); // Paper - Fix Spigot growth modifiers
-        if (bl) {
+        boolean bl = random.nextFloat() < (world.spigotConfig.pitcherPlantModifier / 100.0F); // Paper - Fix Spigot growth modifiers // KioCG
+        if (world.spigotConfig.pitcherPlantModifier > 0 && FarmBlock.isMoisture(world, pos.below(), world.random) && bl) { // KioCG
             this.grow(world, state, pos, 1);
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
index d262a5a6da57ef9ba9a6fe0dfbc88f577105e74f..d8a8e040e2f7e7488d8ae1699e9ad4702e4e395a 100644
--- a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
@@ -53,9 +53,16 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
         return SaplingBlock.SHAPE;
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(net.minecraft.world.level.block.state.BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (world.getMaxLocalRawBrightness(pos.above()) >= 9 && random.nextFloat() < (world.spigotConfig.saplingModifier / (100.0f * 7))) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (world.getMaxLocalRawBrightness(pos.above()) >= 9 && random.nextFloat() < (world.spigotConfig.saplingModifier / 100.0f)) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             this.advanceTree(world, pos, state, random);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/StemBlock.java b/src/main/java/net/minecraft/world/level/block/StemBlock.java
index 924d80eb41d9a71d1e521c40742557251cf51832..2e2f787521f960728d0c6d898b59a6303c399f82 100644
--- a/src/main/java/net/minecraft/world/level/block/StemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StemBlock.java
@@ -70,12 +70,20 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
         return floor.is(Blocks.FARMLAND);
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.getRawBrightness(pos, 0) >= 9) {
             float f = CropBlock.getGrowthSpeed(this, world, pos);
 
-            if (random.nextFloat() < ((this == Blocks.PUMPKIN_STEM ? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier) / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+            int modifier = this == Blocks.PUMPKIN_STEM ? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier; // KioCG
+            if (modifier > 0 && FarmBlock.isMoisture(world, pos.below(), random) && random.nextFloat() < (modifier / 100.0f)) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                 int i = (Integer) state.getValue(StemBlock.AGE);
 
                 if (i < 7) {
@@ -128,7 +136,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
 
         CraftEventFactory.handleBlockGrowEvent(world, pos, iblockdata1, 2); // CraftBukkit
         if (i == 7) {
-            iblockdata1.randomTick(world, pos, world.random);
+            // iblockdata1.randomTick(world, pos, world.random); // KioCG
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
index c48c622e92cedeaa46b929c7adfedec98dd5a3fb..0154a3f64dad1530ea146adf915e27f36f35fa5b 100644
--- a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
@@ -50,6 +50,13 @@ public class SugarCaneBlock extends Block {
 
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.isEmptyBlock(pos.above())) {
@@ -63,10 +70,10 @@ public class SugarCaneBlock extends Block {
                 int j = (Integer) state.getValue(SugarCaneBlock.AGE);
 
                 int modifier = world.spigotConfig.caneModifier; // Spigot - SPIGOT-7159: Better modifier resolution
-                if (j >= 15 || (modifier != 100 && random.nextFloat() < (modifier / (100.0f * 16)))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                if (random.nextFloat() < (modifier / 100.0f)) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                     org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, pos.above(), this.defaultBlockState()); // CraftBukkit
                     world.setBlock(pos, (BlockState) state.setValue(SugarCaneBlock.AGE, 0), 4);
-                } else if (modifier == 100 || random.nextFloat() < (modifier / (100.0f * 16))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                } else if (false) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                     world.setBlock(pos, (BlockState) state.setValue(SugarCaneBlock.AGE, j + 1), 4);
                 }
             }
diff --git a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
index 6008c634c408c4eed563815da4d57b2eef69835c..3adcd7ebeb3c5f1340961cb99e59003ebd5bbd9a 100644
--- a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
@@ -70,11 +70,18 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
         return (Integer) state.getValue(SweetBerryBushBlock.AGE) < 3;
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         int i = (Integer) state.getValue(SweetBerryBushBlock.AGE);
 
-        if (i < 3 && random.nextFloat() < (world.spigotConfig.sweetBerryModifier / (100.0f * 5)) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (i < 3 && world.spigotConfig.sweetBerryModifier > 0 && world.getRawBrightness(pos.above(), 0) >= 9 && random.nextFloat() < (world.spigotConfig.sweetBerryModifier / 100.0f)) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
             BlockState iblockdata1 = (BlockState) state.setValue(SweetBerryBushBlock.AGE, i + 1);
 
             if (!CraftEventFactory.handleBlockGrowEvent(world, pos, iblockdata1, 2)) return; // CraftBukkit
diff --git a/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java b/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
index 3bb1ed8423e7f18eae8967d4bee5bd48720a689e..d31def82b03951414713f1080e304d36610b8b66 100644
--- a/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TorchflowerCropBlock.java
@@ -65,7 +65,7 @@ public class TorchflowerCropBlock extends CropBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (random.nextInt(3) != 0) {
+        if (true || random.nextInt(3) != 0) { // KioCG
             super.randomTick(state, world, pos, random);
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/VineBlock.java b/src/main/java/net/minecraft/world/level/block/VineBlock.java
index 57e7f275ffd6202ef578d64857cfdace6f1c760d..4c2af621e526f469df8192910675e35575d8ab56 100644
--- a/src/main/java/net/minecraft/world/level/block/VineBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/VineBlock.java
@@ -182,10 +182,17 @@ public class VineBlock extends Block {
         }
     }
 
+    // KioCG start
+    @Override
+    public byte dayTicking() {
+        return 1;
+    }
+    // KioCG end
+
     @Override
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.getGameRules().getBoolean(GameRules.RULE_DO_VINES_SPREAD)) {
-            if (random.nextFloat() < (world.spigotConfig.vineModifier / (100.0f * 4))) { // Spigot - SPIGOT-7159: Better modifier resolution
+            if (random.nextFloat() < (world.spigotConfig.vineModifier / 100.0f)) { // Spigot - SPIGOT-7159: Better modifier resolution // KioCG
                 Direction enumdirection = Direction.getRandom(random);
                 BlockPos blockposition1 = pos.above();
                 BlockPos blockposition2;
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index d0109633e8bdf109cfc9178963d7b6cf92f8b189..515eac1d14840ce79672a7ff5772012dbd05e54d 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -334,6 +334,16 @@ public abstract class BlockBehaviour implements FeatureElement {
 
     protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {}
 
+    // KioCG start
+    public byte dayTicking() {
+        return 0; // 0代表仅randomTicking, 1代表仅dayTicking, 2代表两者皆有
+    }
+
+    protected void dayTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        this.randomTick(state, world, pos, random);
+    }
+    // KioCG end
+
     protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {}
 
     protected float getDestroyProgress(BlockState state, Player player, BlockGetter world, BlockPos pos) {
@@ -1226,6 +1236,24 @@ public abstract class BlockBehaviour implements FeatureElement {
             this.getBlock().randomTick(this.asState(), world, pos, random);
         }
 
+        // KioCG start
+        private byte dayTicking() {
+            return this.getBlock().dayTicking();
+        }
+
+        public boolean hasDayTicking() {
+            return this.dayTicking() > 0;
+        }
+
+        public boolean isDayTickingOnly() {
+            return this.dayTicking() == 1;
+        }
+
+        public void dayTick(ServerLevel world, BlockPos pos, RandomSource random) {
+            this.getBlock().dayTick(this.asState(), world, pos, random);
+        }
+        // KioCG end
+
         public void entityInside(Level world, BlockPos pos, Entity entity) {
             this.getBlock().entityInside(this.asState(), world, pos, entity);
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index 75c8125e20b70433fe9d143a3193d821043327c3..d3803ca4f380bf3b1dbdf102e139a55edd40f7ea 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -67,6 +67,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     private volatile boolean isLightCorrect;
     protected final ChunkPos chunkPos; public final long coordinateKey; public final int locX; public final int locZ; // Paper - cache coordinate key
     private long inhabitedTime;
+    public int cropDays; // KioCG
     /** @deprecated */
     @Nullable
     @Deprecated
@@ -141,13 +142,14 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     private final int maxSection;
     // Paper end - get block chunk optimisation
 
-    public ChunkAccess(ChunkPos pos, UpgradeData upgradeData, LevelHeightAccessor heightLimitView, Registry<Biome> biomeRegistry, long inhabitedTime, @Nullable LevelChunkSection[] sectionArray, @Nullable BlendingData blendingData) {
+    public ChunkAccess(ChunkPos pos, UpgradeData upgradeData, LevelHeightAccessor heightLimitView, Registry<Biome> biomeRegistry, long inhabitedTime, int cropDays, @Nullable LevelChunkSection[] sectionArray, @Nullable BlendingData blendingData) { // KioCG - CropDays
         this.locX = pos.x; this.locZ = pos.z; // Paper - reduce need for field lookups
         this.chunkPos = pos; this.coordinateKey = ChunkPos.asLong(locX, locZ); // Paper - cache long key
         this.upgradeData = upgradeData;
         this.levelHeightAccessor = heightLimitView;
         this.sections = new LevelChunkSection[heightLimitView.getSectionsCount()];
         this.inhabitedTime = inhabitedTime;
+        this.cropDays = cropDays; // KioCG
         this.postProcessing = new ShortList[heightLimitView.getSectionsCount()];
         this.blendingData = blendingData;
         // Paper - rewrite chunk system
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 7c11853c5090fbc4fa5b3e73a69acf166158fdec..57e7de5f573e0afc5cb45bad7fb759a3bcdc245b 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -87,11 +87,11 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
     private final LevelChunkTicks<Fluid> fluidTicks;
 
     public LevelChunk(Level world, ChunkPos pos) {
-        this(world, pos, UpgradeData.EMPTY, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, (LevelChunkSection[]) null, (LevelChunk.PostLoadProcessor) null, (BlendingData) null);
+        this(world, pos, UpgradeData.EMPTY, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, 0, (LevelChunkSection[]) null, (LevelChunk.PostLoadProcessor) null, (BlendingData) null); // KioCG - CropDays
     }
 
-    public LevelChunk(Level world, ChunkPos pos, UpgradeData upgradeData, LevelChunkTicks<Block> blockTickScheduler, LevelChunkTicks<Fluid> fluidTickScheduler, long inhabitedTime, @Nullable LevelChunkSection[] sectionArrayInitializer, @Nullable LevelChunk.PostLoadProcessor entityLoader, @Nullable BlendingData blendingData) {
-        super(pos, upgradeData, world, net.minecraft.server.MinecraftServer.getServer().registryAccess().registryOrThrow(Registries.BIOME), inhabitedTime, sectionArrayInitializer, blendingData); // Paper - Anti-Xray - The world isn't ready yet, use server singleton for registry
+    public LevelChunk(Level world, ChunkPos pos, UpgradeData upgradeData, LevelChunkTicks<Block> blockTickScheduler, LevelChunkTicks<Fluid> fluidTickScheduler, long inhabitedTime, int cropDays, @Nullable LevelChunkSection[] sectionArrayInitializer, @Nullable LevelChunk.PostLoadProcessor entityLoader, @Nullable BlendingData blendingData) { // KioCG - CropDays
+        super(pos, upgradeData, world, net.minecraft.server.MinecraftServer.getServer().registryAccess().registryOrThrow(Registries.BIOME), inhabitedTime, cropDays, sectionArrayInitializer, blendingData); // Paper - Anti-Xray - The world isn't ready yet, use server singleton for registry // KioCG - CropDays
         this.tickersInLevel = Maps.newHashMap();
         this.level = (ServerLevel) world; // CraftBukkit - type
         this.gameEventListenerRegistrySections = new Int2ObjectOpenHashMap();
@@ -162,7 +162,7 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
     // Paper end - get block chunk optimisation
 
     public LevelChunk(ServerLevel world, ProtoChunk protoChunk, @Nullable LevelChunk.PostLoadProcessor entityLoader) {
-        this(world, protoChunk.getPos(), protoChunk.getUpgradeData(), protoChunk.unpackBlockTicks(), protoChunk.unpackFluidTicks(), protoChunk.getInhabitedTime(), protoChunk.getSections(), entityLoader, protoChunk.getBlendingData());
+        this(world, protoChunk.getPos(), protoChunk.getUpgradeData(), protoChunk.unpackBlockTicks(), protoChunk.unpackFluidTicks(), protoChunk.getInhabitedTime(), protoChunk.cropDays, protoChunk.getSections(), entityLoader, protoChunk.getBlendingData()); // KioCG - CropDays
         Iterator iterator = protoChunk.getBlockEntities().values().iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index c3b1caa352b988ec44fa2b2eb0536517711f5460..d6eb35a918f33d80299540a244d8fb5aa9b19423 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -36,6 +36,7 @@ public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_
 
     private int specialCollidingBlocks;
     private final ca.spottedleaf.moonrise.common.list.IBlockDataList tickingBlocks = new ca.spottedleaf.moonrise.common.list.IBlockDataList();
+    public final ca.spottedleaf.moonrise.common.list.IBlockDataList cropsBlocks = new ca.spottedleaf.moonrise.common.list.IBlockDataList(); // KioCG
 
     @Override
     public final int moonrise$getSpecialCollidingBlocks() {
@@ -97,7 +98,7 @@ public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_
 
         if (!iblockdata1.isAir()) {
             --this.nonEmptyBlockCount;
-            if (iblockdata1.isRandomlyTicking()) {
+            if (iblockdata1.isRandomlyTicking() && !iblockdata1.isDayTickingOnly()) { // KioCG
                 --this.tickingBlockCount;
             }
         }
@@ -108,7 +109,7 @@ public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_
 
         if (!state.isAir()) {
             ++this.nonEmptyBlockCount;
-            if (state.isRandomlyTicking()) {
+            if (state.isRandomlyTicking() && !state.isDayTickingOnly()) { // KioCG
                 ++this.tickingBlockCount;
             }
         }
@@ -126,10 +127,20 @@ public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_
         }
 
         if (iblockdata1.isRandomlyTicking()) {
+            // KioCG start
+            if (iblockdata1.hasDayTicking()) this.cropsBlocks.remove(x, y, z);
+            if (!iblockdata1.isDayTickingOnly()) {
+            // KioCG end
             this.tickingBlocks.remove(x, y, z);
+            } // KioCG
         }
         if (state.isRandomlyTicking()) {
+            // KioCG start
+            if (state.hasDayTicking()) this.cropsBlocks.add(x, y, z, state);
+            if (!state.isDayTickingOnly()) {
+            // KioCG end
             this.tickingBlocks.add(x, y, z, state);
+            } // KioCG
         }
         // Paper end - block counting
 
@@ -160,6 +171,7 @@ public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_
         this.tickingFluidCount = (short)0;
         this.specialCollidingBlocks = (short)0;
         this.tickingBlocks.clear();
+        this.cropsBlocks.clear(); // KioCG
 
         if (this.maybeHas((final BlockState state) -> !state.isAir())) {
             final PalettedContainer.Data<BlockState> data = this.states.data;
@@ -192,12 +204,18 @@ public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_
                 }
                 this.nonEmptyBlockCount += paletteCount;
                 if (state.isRandomlyTicking()) {
+                    if (!state.isDayTickingOnly()) // KioCG
                     this.tickingBlockCount += paletteCount;
                     final int[] raw = coordinates.elements();
 
                     java.util.Objects.checkFromToIndex(0, paletteCount, raw.length);
                     for (int i = 0; i < paletteCount; ++i) {
+                        // KioCG start
+                        if (state.hasDayTicking()) this.cropsBlocks.add(raw[i], state);
+                        if (!state.isDayTickingOnly()) {
+                        // KioCG end
                         this.tickingBlocks.add(raw[i], state);
+                        } // KioCG
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java b/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
index 082eae7032d5a8055a0f67b8a5583bbbf6fa9916..d8055797f9ac72df57d3343e14f9bf024b5850ed 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
@@ -63,7 +63,7 @@ public class ProtoChunk extends ChunkAccess {
         Registry<Biome> biomeRegistry,
         @Nullable BlendingData blendingData
     ) {
-        super(pos, upgradeData, world, biomeRegistry, 0L, sections, blendingData);
+        super(pos, upgradeData, world, biomeRegistry, 0L, 0, sections, blendingData); // KioCG - CropDays
         this.blockTicks = blockTickScheduler;
         this.fluidTicks = fluidTickScheduler;
     }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 4bd048387651250135f963303c78c17f8473cfee..ecdfe963d29f67c895b078e8755b88aa4671a4a3 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -204,6 +204,7 @@ public class ChunkSerializer {
         }
 
         long l = nbt.getLong("InhabitedTime");
+        int cropDays = nbt.getInt("KioCG.CropDays"); // KioCG
         ChunkType chunktype = ChunkSerializer.getChunkTypeFromTag(nbt);
         DataResult dataresult;
         Logger logger;
@@ -228,7 +229,7 @@ public class ChunkSerializer {
                 return BuiltInRegistries.FLUID.getOptional(ResourceLocation.tryParse(s));
             }, chunkPos);
 
-            object1 = new LevelChunk(world.getLevel(), chunkPos, chunkconverter, levelchunkticks, levelchunkticks1, l, achunksection, ChunkSerializer.postLoadChunk(world, nbt), blendingdata);
+            object1 = new LevelChunk(world.getLevel(), chunkPos, chunkconverter, levelchunkticks, levelchunkticks1, l, cropDays, achunksection, ChunkSerializer.postLoadChunk(world, nbt), blendingdata); // KioCG - CropDays
         } else {
             ProtoChunkTicks<Block> protochunkticklist = ProtoChunkTicks.load(nbt.getList("block_ticks", 10), (s) -> {
                 return BuiltInRegistries.BLOCK.getOptional(ResourceLocation.tryParse(s));
@@ -240,6 +241,7 @@ public class ChunkSerializer {
 
             object1 = protochunk;
             protochunk.setInhabitedTime(l);
+            protochunk.cropDays = cropDays; // KioCG
             if (nbt.contains("below_zero_retrogen", 10)) {
                 dataresult = BelowZeroRetrogen.CODEC.parse(new Dynamic(NbtOps.INSTANCE, nbt.getCompound("below_zero_retrogen")));
                 logger = ChunkSerializer.LOGGER;
@@ -398,6 +400,7 @@ public class ChunkSerializer {
         nbttagcompound.putInt("zPos", chunkcoordintpair.z);
         nbttagcompound.putLong("LastUpdate", asyncsavedata != null ? asyncsavedata.worldTime() : world.getGameTime()); // Paper - async chunk saving // Paper - diff on change
         nbttagcompound.putLong("InhabitedTime", chunk.getInhabitedTime());
+        nbttagcompound.putInt("KioCG.CropDays", chunk.cropDays); // KioCG
         nbttagcompound.putString("Status", BuiltInRegistries.CHUNK_STATUS.getKey(chunk.getPersistedStatus()).toString());
         BlendingData blendingdata = chunk.getBlendingData();
         DataResult<Tag> dataresult; // CraftBukkit - decompile error
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 2c408fa4abcbe1171c58aee8799c8cf7867d0f0a..d15fb512b4f7d1caf819739ef858ad7714ab49b9 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -112,7 +112,7 @@ public class SpigotWorldConfig
     private int getAndValidateGrowth(String crop)
     {
         int modifier = this.getInt( "growth." + crop.toLowerCase(java.util.Locale.ENGLISH) + "-modifier", 100 );
-        if ( modifier == 0 )
+        if ( false && modifier == 0 ) // KioCG
         {
             this.log( "Cannot set " + crop + " growth to zero, defaulting to 100" );
             modifier = 100;

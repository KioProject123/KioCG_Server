From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Sun, 17 Mar 2024 14:39:32 +0800
Subject: [PATCH] Sleep any time


diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index e386b41931f3d1f0d8c6429d05e9b2684519e38b..8558e7e869e7afd1a438d5f2eddf507c3d339e30 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -590,6 +590,8 @@ public class WorldConfiguration extends ConfigurationPart {
 
         public boolean betterMobGriefingSetting = true;
         public double dirtPathSpeedBoost = 0.02;
+        public boolean sleepAnyTime = true;
+        public double sleepHealingRegenRate = 20;
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index cfa5499df1e50563d7cb8605fa56c9a28db1a9c0..51bad1d177a65c74372c04e93c5c06053258fabe 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -825,6 +825,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
         long j;
 
+        if (!this.paperConfig().kiocgConfig.sleepAnyTime) { // KioCG
         if (this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
             // CraftBukkit start
             j = this.levelData.getDayTime() + 24000L;
@@ -844,6 +845,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 this.resetWeatherCycle();
             }
         }
+        } // KioCG
 
         this.updateSkyBrightness();
         if (flag) {
@@ -1178,6 +1180,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     }
 
     private void announceSleepStatus() {
+        if (this.paperConfig().kiocgConfig.sleepAnyTime) return; // KioCG
         if (this.canSleepThroughNights()) {
             if (!this.getServer().isSingleplayer() || this.getServer().isPublished()) {
                 int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index d58f7a30342125a7938d4c34d9e9a1aa3950aeb1..7d2d1e174902dbfd774beb6c4128d294b78a0835 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1488,7 +1488,7 @@ public class ServerPlayer extends Player {
                 return Either.left(Player.BedSleepingProblem.OBSTRUCTED);
             } else {
                 this.setRespawnPosition(this.level().dimension(), blockposition, this.getYRot(), false, true, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.BED); // Paper - Add PlayerSetSpawnEvent
-                if (this.level().isDay()) {
+                if (this.level().isDay() && !this.level().paperConfig().kiocgConfig.sleepAnyTime) { // KioCG
                     return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
                 } else {
                     if (!this.isCreative()) {
@@ -1538,7 +1538,7 @@ public class ServerPlayer extends Player {
                         CriteriaTriggers.SLEPT_IN_BED.trigger(this);
                     });
 
-                    if (!this.serverLevel().canSleepThroughNights()) {
+                    if (!this.serverLevel().canSleepThroughNights() && !this.level().paperConfig().kiocgConfig.sleepAnyTime) { // KioCG
                         this.displayClientMessage(Component.translatable("sleep.not_possible"), true);
                     }
 
@@ -2539,7 +2539,7 @@ public class ServerPlayer extends Player {
             // Paper end - Add PlayerSetSpawnEvent
 
             if (event.willNotifyPlayer() && event.getNotification() != null) { // Paper - Add PlayerSetSpawnEvent
-                this.sendSystemMessage(PaperAdventure.asVanilla(event.getNotification())); // Paper - Add PlayerSetSpawnEvent
+                this.sendSystemMessage(PaperAdventure.asVanilla(event.getNotification()), this.level().paperConfig().kiocgConfig.sleepAnyTime); // Paper - Add PlayerSetSpawnEvent // KioCG
             }
 
             this.respawnPosition = pos;
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index b0e53c572bf318b3eb51f55c8d821b287c961f71..4cf17228d53c0ddb6a21f4a191980019e665ca68 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -274,7 +274,7 @@ public abstract class Player extends LivingEntity {
                 this.sleepCounter = 100;
             }
 
-            if (!this.level().isClientSide && this.level().isDay()) {
+            if (!this.level().isClientSide && this.level().isDay() && !this.level().paperConfig().kiocgConfig.sleepAnyTime) { // KioCG
                 this.stopSleepInBed(false, true);
             }
         } else if (this.sleepCounter > 0) {
diff --git a/src/main/java/net/minecraft/world/food/FoodData.java b/src/main/java/net/minecraft/world/food/FoodData.java
index cdc2690b81dc938ae559cf98d34a0b467e1ebb5d..8086e9795b0cd5b6a93a9d3dc7dcc1e6f4b66337 100644
--- a/src/main/java/net/minecraft/world/food/FoodData.java
+++ b/src/main/java/net/minecraft/world/food/FoodData.java
@@ -84,6 +84,30 @@ public class FoodData {
 
         boolean flag = player.level().getGameRules().getBoolean(GameRules.RULE_NATURAL_REGENERATION);
 
+        // KioCG start
+        if (player.level().paperConfig().kiocgConfig.sleepHealingRegenRate >= 0 && this.foodLevel > 6 && player.isSleeping() && player.isHurt()) {
+            ++this.tickTimer;
+            if (this.tickTimer >= player.level().paperConfig().kiocgConfig.sleepHealingRegenRate) {
+                final float health = player.getHealth();
+                player.heal(1.0F);
+                if (player.getHealth() > health) {
+                    final java.util.ArrayList<org.bukkit.entity.Player> receivers = new java.util.ArrayList<>(player.getBukkitEntity().getTrackedBy());
+                    receivers.add(((ServerPlayer) player).getBukkitEntity());
+                    player.getBukkitEntity().getWorld().spawnParticle(org.bukkit.Particle.HEART,
+                                                                      receivers,
+                                                                      ((ServerPlayer) player).getBukkitEntity(),
+                                                                      player.getX(), player.getY(), player.getZ(),
+                                                                      5,
+                                                                      0.3, 0.3, 0.3,
+                                                                      1.0,
+                                                                      null,
+                                                                      true);
+                }
+
+                this.tickTimer = 0;
+            }
+        } else
+        // KioCG end
         if (flag && this.saturationLevel > 0.0F && player.isHurt() && this.foodLevel >= 20) {
             ++this.tickTimer;
             if (this.tickTimer >= this.saturatedRegenRate) { // CraftBukkit

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Tue, 5 Mar 2024 10:34:43 +0800
Subject: [PATCH] The Long Dark


diff --git a/src/main/java/com/kiocg/java/NamespacedKeys.java b/src/main/java/com/kiocg/java/NamespacedKeys.java
index e3a9806f9972007b732032fd137741a5d14a7e63..98dc3e8d5bddc008c25a72a47aaa6916d1a72053 100644
--- a/src/main/java/com/kiocg/java/NamespacedKeys.java
+++ b/src/main/java/com/kiocg/java/NamespacedKeys.java
@@ -5,4 +5,5 @@ import org.bukkit.NamespacedKey;
 public class NamespacedKeys {
     public static final String KIOCG = "kiocg";
 
+    public static NamespacedKey kiocgColdValue = new NamespacedKey(KIOCG, "cold_value");
 }
diff --git a/src/main/java/com/kiocg/java/player/ColdData.java b/src/main/java/com/kiocg/java/player/ColdData.java
new file mode 100644
index 0000000000000000000000000000000000000000..7f837e983256952fa779bd9a3fe06d1147327dc7
--- /dev/null
+++ b/src/main/java/com/kiocg/java/player/ColdData.java
@@ -0,0 +1,95 @@
+package com.kiocg.java.player;
+
+import com.kiocg.java.NamespacedKeys;
+import io.papermc.paper.configuration.WorldConfiguration;
+import net.minecraft.core.BlockPos;
+import net.minecraft.network.protocol.game.ClientboundSetExperiencePacket;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.util.Mth;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LightLayer;
+import org.bukkit.persistence.PersistentDataType;
+
+public class ColdData {
+    public static final int MAX_VALUE = 60 * 20 * 10;
+
+    private Player entityhuman;
+    private int tempColdValue;
+    private int coldValueCache;
+
+    public ColdData(Player entityhuman) {
+        org.apache.commons.lang.Validate.notNull(entityhuman);
+        this.entityhuman = entityhuman;
+    }
+
+    public int getColdValue() {
+        return coldValueCache;
+    }
+
+    private int getColdValue0() {
+        return entityhuman.getBukkitEntity().getPersistentDataContainer().getOrDefault(NamespacedKeys.kiocgColdValue, PersistentDataType.INTEGER, MAX_VALUE);
+    }
+
+    public void setColdValue(int value) {
+        entityhuman.getBukkitEntity().getPersistentDataContainer().set(NamespacedKeys.kiocgColdValue, PersistentDataType.INTEGER, value);
+        tempColdValue = 0;
+    }
+
+    public void addColdValue(int add) {
+        tempColdValue += add;
+    }
+
+    public float getColdProgress() {
+        return (float) coldValueCache / MAX_VALUE;
+    }
+
+    public boolean isFrozen() {
+        return coldValueCache <= 0;
+    }
+
+    public void tick() {
+        if (!entityhuman.getAbilities().invulnerable) {
+            final Level world = entityhuman.level();
+            final BlockPos pos = entityhuman.blockPosition();
+            final WorldConfiguration.KiocgConfig.TheLongDark theLongDark = world.paperConfig().kiocgConfig.theLongDark;
+
+            final float temperature = (world.getBiome(pos).value().getTemperature(pos) + theLongDark.coldValue.ambientTemperatureOffset) * theLongDark.coldValue.ambientTemperatureOffsetMultiplier;
+            tempColdValue += theLongDark.coldValue.ambientBase + temperature;
+
+            if (theLongDark.coldValue.lightSimulationMultiplier != 0) {
+                int light = world.getRawBrightness(pos, world.getSkyDarken());
+                tempColdValue += light * theLongDark.coldValue.lightSimulationMultiplier;
+            }
+            if (theLongDark.coldValue.lightBlockMultiplier != 0) {
+                int blockLight = world.getBrightness(LightLayer.BLOCK, pos);
+                tempColdValue += blockLight * theLongDark.coldValue.lightBlockMultiplier;
+            }
+            if (theLongDark.coldValue.lightSkyMultiplier != 0) {
+                int skyLight = world.getBrightness(LightLayer.SKY, pos);
+                tempColdValue += skyLight * theLongDark.coldValue.lightSkyMultiplier;
+            }
+
+            if (theLongDark.coldValue.isInWaterOrBubble != 0 && (entityhuman.isInPowderSnow || entityhuman.isInWaterOrBubble())) {
+                tempColdValue += theLongDark.coldValue.isInWaterOrBubble;
+            } else if (theLongDark.coldValue.isInRain != 0 && entityhuman.isInRain()) {
+                tempColdValue += theLongDark.coldValue.isInRain;
+            }
+
+            if (theLongDark.coldValue.isInLava != 0 && entityhuman.isInLava()) {
+                tempColdValue += theLongDark.coldValue.isInLava;
+            } else if (theLongDark.coldValue.onFireTickDivision != 0) {
+                int remainingFireTicks = entityhuman.getRemainingFireTicks();
+                if (remainingFireTicks > 0) {
+                    tempColdValue += remainingFireTicks / theLongDark.coldValue.onFireTickDivision;
+                }
+            }
+
+            setColdValue(coldValueCache = Mth.clamp(getColdValue0() + tempColdValue, 0, MAX_VALUE));
+            ((ServerPlayer) entityhuman).connection.send(new ClientboundSetExperiencePacket(getColdProgress(), entityhuman.totalExperience, entityhuman.experienceLevel));
+        } else {
+            tempColdValue = 0;
+            coldValueCache = MAX_VALUE;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index 63992c84ec75bd77499cfc921ddc7c4491c7447e..55eb66b3b6dced1d1fcb3812c4e14395a573d444 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -551,6 +551,29 @@ public class WorldConfiguration extends ConfigurationPart {
 
     public class KiocgConfig extends ConfigurationPart {
         public boolean deathItemsOnlyPickedUpByOneself = false;
+
+        public TheLongDark theLongDark;
+        public class TheLongDark extends ConfigurationPart {
+
+            public ColdValue coldValue;
+            public class ColdValue extends ConfigurationPart {
+                public int ambientBase = -10;
+                public float ambientTemperatureOffset = -1.0F;
+                public int ambientTemperatureOffsetMultiplier = 10;
+
+                public int lightSimulationMultiplier = 1;
+                public int lightBlockMultiplier = 2;
+                public int lightSkyMultiplier = 0;
+
+                public int isInWaterOrBubble = -30;
+                public int isInRain = -15;
+                public int isInLava = 50;
+                public int onFireTickDivision = 5;
+            }
+
+            public int campfireExtinguishingOne = -1;
+            public int campfireExtinguishingTwo = -1;
+        }
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index e187d1c65446eb53869921110740c8e559308d5e..247c2343e8f7fbad94f6edc5b9e52a78d0c8147b 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -825,7 +825,7 @@ public class ServerPlayer extends Player {
                 this.updateScoreForCriteria(ObjectiveCriteria.LEVEL, Mth.ceil((float) this.lastRecordedLevel));
             }
 
-            if (this.totalExperience != this.lastSentExp) {
+            if (false && this.totalExperience != this.lastSentExp) { // KioCG - cold system
                 this.lastSentExp = this.totalExperience;
                 this.connection.send(new ClientboundSetExperiencePacket(this.experienceProgress, this.totalExperience, this.experienceLevel));
             }
@@ -2747,6 +2747,7 @@ public class ServerPlayer extends Player {
         this.setRemainingFireTicks(0);
         this.fallDistance = 0;
         this.foodData = new FoodData(this);
+        this.coldData = new com.kiocg.java.player.ColdData(this); // KioCG
         this.experienceLevel = this.newLevel;
         this.totalExperience = this.newTotalExp;
         this.experienceProgress = 0;
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index c5dfa1037dc6ecc18774d55b08dbcc4acb032f7c..e2cf7bd2788b9028c7d786a2bbd3ed64e383cf79 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -951,7 +951,7 @@ public abstract class PlayerList {
         entityplayer1.connection.teleport(CraftLocation.toBukkit(entityplayer1.position(), worldserver2.getWorld(), entityplayer1.getYRot(), entityplayer1.getXRot())); // CraftBukkit
         entityplayer1.connection.send(new ClientboundSetDefaultSpawnPositionPacket(worldserver1.getSharedSpawnPos(), worldserver1.getSharedSpawnAngle()));
         entityplayer1.connection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
-        entityplayer1.connection.send(new ClientboundSetExperiencePacket(entityplayer1.experienceProgress, entityplayer1.totalExperience, entityplayer1.experienceLevel));
+        entityplayer1.connection.send(new ClientboundSetExperiencePacket(entityplayer1.coldData.getColdProgress(), entityplayer1.totalExperience, entityplayer1.experienceLevel)); // KioCG - cold system
         this.sendLevelInfo(entityplayer1, worldserver1);
         this.sendPlayerPermissionLevel(entityplayer1);
         if (!entityplayer.connection.isDisconnected()) {
@@ -995,6 +995,7 @@ public abstract class PlayerList {
         // Paper start
         if (isRespawn) {
             cserver.getPluginManager().callEvent(new com.destroystokyo.paper.event.player.PlayerPostRespawnEvent(entityplayer.getBukkitEntity(), location, isBedSpawn));
+            entityplayer.coldData.setColdValue(com.kiocg.java.player.ColdData.MAX_VALUE); // KioCG
         }
         // Paper end
 
diff --git a/src/main/java/net/minecraft/world/effect/SaturationMobEffect.java b/src/main/java/net/minecraft/world/effect/SaturationMobEffect.java
index b994ae09621934df2cdd6a83a7d8ecb44649fb16..e082df98a69246dd015928e2404fa0faab3ae845 100644
--- a/src/main/java/net/minecraft/world/effect/SaturationMobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/SaturationMobEffect.java
@@ -19,6 +19,8 @@ class SaturationMobEffect extends InstantenousMobEffect {
         if (!entity.level().isClientSide && entity instanceof Player) {
             Player entityhuman = (Player) entity;
 
+            if (true) { entityhuman.coldData.addColdValue(amplifier + 1); return; } // KioCG
+
             // CraftBukkit start
             int oldFoodLevel = entityhuman.getFoodData().foodLevel;
             org.bukkit.event.entity.FoodLevelChangeEvent event = CraftEventFactory.callFoodLevelChangeEvent(entityhuman, amplifier + 1 + oldFoodLevel);
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index bc908b75cb99536df658281ae7f8b4eeedbbedc9..e4c294b84bc44fbc576a52a6a05ecc82679cdbe9 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -3456,7 +3456,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
         if (!this.level().isClientSide && !this.isDeadOrDying() && !this.freezeLocked) { // Paper - Freeze Tick Lock API
             int i = this.getTicksFrozen();
 
-            if (this.isInPowderSnow && this.canFreeze()) {
+            if (this.isInPowderSnow && this.canFreeze() || this instanceof net.minecraft.world.entity.player.Player player && player.coldData.isFrozen()) { // KioCG
                 this.setTicksFrozen(Math.min(this.getTicksRequiredToFreeze(), i + 1));
             } else {
                 this.setTicksFrozen(Math.max(0, i - 2));
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index ccc1caafb0ada52c7b99b7358253826f5390843e..119331022a9741e447ffa51e34b448edf6f258e3 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -152,6 +152,7 @@ public abstract class Player extends LivingEntity {
     public final InventoryMenu inventoryMenu;
     public AbstractContainerMenu containerMenu;
     protected FoodData foodData = new FoodData(this); // CraftBukkit - add "this" to constructor
+    public com.kiocg.java.player.ColdData coldData = new com.kiocg.java.player.ColdData(this); // KioCG
     protected int jumpTriggerTime;
     public float oBob;
     public float bob;
@@ -278,6 +279,7 @@ public abstract class Player extends LivingEntity {
         this.moveCloak();
         if (!this.level().isClientSide) {
             this.foodData.tick(this);
+            this.coldData.tick(); // KioCG
             this.awardStat(Stats.PLAY_TIME);
             this.awardStat(Stats.TOTAL_WORLD_TIME);
             if (this.isAlive()) {
diff --git a/src/main/java/net/minecraft/world/food/FoodData.java b/src/main/java/net/minecraft/world/food/FoodData.java
index c3448707fd8a632b457cc97b35d08a9c6933d5ee..fa3cd24c36af0ff2d355023af78caa3245f94212 100644
--- a/src/main/java/net/minecraft/world/food/FoodData.java
+++ b/src/main/java/net/minecraft/world/food/FoodData.java
@@ -80,6 +80,7 @@ public class FoodData {
 
         if (flag && this.saturationLevel > 0.0F && player.isHurt() && this.foodLevel >= 20) {
             ++this.tickTimer;
+            if (player.coldData.getColdValue() > com.kiocg.java.player.ColdData.MAX_VALUE / 2) // KioCG
             if (this.tickTimer >= this.saturatedRegenRate) { // CraftBukkit
                 float f = Math.min(this.saturationLevel, 6.0F);
 
@@ -90,6 +91,7 @@ public class FoodData {
             }
         } else if (flag && this.foodLevel >= 18 && player.isHurt()) {
             ++this.tickTimer;
+            if (player.coldData.getColdValue() > com.kiocg.java.player.ColdData.MAX_VALUE / 2) // KioCG
             if (this.tickTimer >= this.unsaturatedRegenRate) { // CraftBukkit - add regen rate manipulation
                 player.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.SATIATED); // CraftBukkit - added RegainReason
                 // this.a(6.0F); CraftBukkit - EntityExhaustionEvent
diff --git a/src/main/java/net/minecraft/world/level/block/LavaCauldronBlock.java b/src/main/java/net/minecraft/world/level/block/LavaCauldronBlock.java
index bc099abfda6555cade0a83eddfe1be9c243fa83b..4dcfbf9b7267017229640d0f7f7370118a942e39 100644
--- a/src/main/java/net/minecraft/world/level/block/LavaCauldronBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LavaCauldronBlock.java
@@ -35,6 +35,7 @@ public class LavaCauldronBlock extends AbstractCauldronBlock {
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
         if (this.isEntityInsideContent(state, pos, entity)) {
             entity.lavaHurt();
+            if (entity instanceof net.minecraft.world.entity.player.Player player) player.coldData.addColdValue(world.paperConfig().kiocgConfig.theLongDark.coldValue.isInLava); // KioCG
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java b/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
index 843926beb1edd897724b512ad915894fa4a2da6c..e6505b79bd3a3d4b50a97dd689ae37a30e2550c5 100644
--- a/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
@@ -77,6 +77,7 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
             // CraftBukkit end
         }
 
+        if (entity instanceof net.minecraft.world.entity.player.Player player && this.isEntityInsideContent(state, pos, entity)) player.coldData.addColdValue(world.paperConfig().kiocgConfig.theLongDark.coldValue.isInWaterOrBubble); // KioCG
     }
 
     @Deprecated // Paper - use #handleEntityOnFireInsideWithEvent
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
index f929c90c470bd7fd0b40d915a3101e7e73e7f4f0..237755db6908faf8cdc76a600e6e814c6ab43cd5 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -43,6 +43,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
     public final int[] cookingTime;
     private final RecipeManager.CachedCheck<Container, CampfireCookingRecipe> quickCheck;
     public final boolean[] stopCooking; // Paper
+    @Nullable private Integer extinguishing = null; // KioCG
 
     public CampfireBlockEntity(BlockPos pos, BlockState state) {
         super(BlockEntityType.CAMPFIRE, pos, state);
@@ -129,6 +130,32 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
             }
         }
 
+        // KioCG start
+        if (campfire.extinguishing == null) {
+            int extinguishingTick = state.is(net.minecraft.world.level.block.Blocks.CAMPFIRE) ? world.paperConfig().kiocgConfig.theLongDark.campfireExtinguishingOne : world.paperConfig().kiocgConfig.theLongDark.campfireExtinguishingTwo;
+            if (extinguishingTick > 0) {
+                campfire.extinguishing = extinguishingTick;
+            }
+        }
+
+        if (campfire.extinguishing != null && --campfire.extinguishing <= 0) {
+            if (state.is(net.minecraft.world.level.block.Blocks.CAMPFIRE)) {
+                world.removeBlockEntity(pos); // 移除BlockEntity来保留物品
+                world.setBlock(pos, net.minecraft.world.level.block.Blocks.SOUL_CAMPFIRE.withPropertiesOf(state), 3);
+
+                CampfireBlockEntity soulCampfire = (CampfireBlockEntity) world.getBlockEntity(pos);
+                for (int i = 0; i < campfire.items.size(); i++) {
+                    soulCampfire.items.set(i, campfire.items.get(i));
+                }
+                System.arraycopy(campfire.cookingProgress, 0, soulCampfire.cookingProgress, 0, campfire.cookingProgress.length);
+                System.arraycopy(campfire.cookingTime, 0, soulCampfire.cookingTime, 0, campfire.cookingTime.length);
+                System.arraycopy(campfire.stopCooking, 0, soulCampfire.stopCooking, 0, campfire.stopCooking.length);
+            } else {
+                world.setBlock(pos, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState(), 3);
+            }
+        }
+        // KioCG end
+
         if (flag) {
             setChanged(world, pos, state);
         }
@@ -228,6 +255,8 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
             System.arraycopy(cookingState, 0, this.stopCooking, 0, Math.min(this.stopCooking.length, abyte.length));
         }
         // Paper end
+
+        if (nbt.contains("KioCG.Extinguishing", org.bukkit.craftbukkit.util.CraftMagicNumbers.NBT.TAG_INT)) extinguishing = nbt.getInt("KioCG.Extinguishing"); // KioCG
     }
 
     @Override
@@ -243,6 +272,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
         }
         nbt.putByteArray("Paper.StopCooking", cookingState);
         // Paper end
+        if (extinguishing != null) nbt.putInt("KioCG.Extinguishing", extinguishing); // KioCG
     }
 
     @Override
@@ -298,6 +328,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
         if (this.level != null) {
             this.markUpdated();
             this.cooldownImmediately(this.getLevel(), this.getBlockPos(), this.getBlockState(), (CampfireBlockEntity) this); // KioCG - 优化未燃烧的运算
+            this.extinguishing = null; // KioCG
         }
 
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index da63b4050be25dcb91d04df8c2fcc643cbb0751d..b714186810b3a8a5f9cd3ef0c5e2ad7de2c98a47 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -2120,7 +2120,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         playerList.sendAllPlayerInfo(handle);
 
         // Resend their XP and effects because the respawn packet resets it
-        connection.send(new net.minecraft.network.protocol.game.ClientboundSetExperiencePacket(handle.experienceProgress, handle.totalExperience, handle.experienceLevel));
+        connection.send(new net.minecraft.network.protocol.game.ClientboundSetExperiencePacket(handle.coldData.getColdProgress(), handle.totalExperience, handle.experienceLevel)); // KioCG - cold system
         for (net.minecraft.world.effect.MobEffectInstance mobEffect : handle.getActiveEffects()) {
             connection.send(new net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket(handle.getId(), mobEffect));
         }

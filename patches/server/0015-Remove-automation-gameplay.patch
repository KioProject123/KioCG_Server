From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Sat, 23 Mar 2024 11:28:48 +0800
Subject: [PATCH] Remove automation gameplay


diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index d84f248cb0ac053fe31c6f78c741f9e9f74d6c22..a101d8f5e95f6aa573dfdf4233d5677ee6d928de 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -553,6 +553,7 @@ public class WorldConfiguration extends ConfigurationPart {
 
     public class KiocgConfig extends ConfigurationPart {
         public boolean deathItemsOnlyPickedUpByOneself = false;
+        public boolean removeAutomationGameplay = true;
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
index 6df0db8b4cdab23494ea34236949ece4989110a3..58d35628aff16b7d9d86c4231776e3e07774623d 100644
--- a/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
@@ -77,7 +77,7 @@ public class BoatDispenseItemBehavior extends DefaultDispenseItemBehavior {
             shrink = false; // Paper - shrink below
             // Chain to handler for new item
             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
             if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                 idispensebehavior.dispense(pointer, eventStack);
                 return stack;
diff --git a/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java
index f28705547a62da790f5df071400986aacba39367..0a08d4706d23a3b85c326a114391c1aa251acea2 100644
--- a/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java
@@ -99,7 +99,7 @@ public class DefaultDispenseItemBehavior implements DispenseItemBehavior {
         if (!dropper && !event.getItem().getType().equals(craftItem.getType())) {
             // Chain to handler for new item
             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) sourceblock.state().getBlock()).getDispenseMethod(sourceblock.level(), eventStack); // KioCG
             if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior.getClass() != DefaultDispenseItemBehavior.class) {
                 idispensebehavior.dispense(sourceblock, eventStack);
             } else {
diff --git a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
index 5dab1e10303177e5a4d97a91ee46ede66f30ae35..a0043adf29f469e38849712606facfec6dee1b77 100644
--- a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
@@ -128,7 +128,7 @@ public interface DispenseItemBehavior {
                     shrink = false; // Paper - shrink below
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -187,7 +187,7 @@ public interface DispenseItemBehavior {
                     shrink = false; // Paper - shrink below
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -242,7 +242,7 @@ public interface DispenseItemBehavior {
                         shrink = false; // Paper - shrink below
                         // Chain to handler for new item
                         ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                        DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                        DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                         if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) { // Paper - fix possible StackOverflowError
                             idispensebehavior.dispense(pointer, eventStack);
                             return stack;
@@ -298,7 +298,7 @@ public interface DispenseItemBehavior {
                     shrink = false; // Paper - shrink below
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) { // Paper - fix possible StackOverflowError
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -372,7 +372,7 @@ public interface DispenseItemBehavior {
                     shrink = false; // Paper - shrink below
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) { // Paper - fix possible StackOverflowError
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -441,7 +441,7 @@ public interface DispenseItemBehavior {
                     if (!event.getItem().equals(craftItem)) {
                         // Chain to handler for new item
                         ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                        DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                        DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                         if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                             idispensebehavior.dispense(pointer, eventStack);
                             return stack;
@@ -517,7 +517,7 @@ public interface DispenseItemBehavior {
                         if (!event.getItem().equals(craftItem)) {
                             // Chain to handler for new item
                             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                             if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                                 idispensebehavior.dispense(pointer, eventStack);
                                 return stack;
@@ -564,7 +564,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -627,7 +627,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -699,7 +699,7 @@ public interface DispenseItemBehavior {
                     shrink = false; // Paper - shrink below
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -753,7 +753,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -802,7 +802,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -875,7 +875,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -957,7 +957,7 @@ public interface DispenseItemBehavior {
                     if (!event.getItem().equals(craftItem)) {
                         // Chain to handler for new item
                         ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                        DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                        DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                         if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != ArmorItem.DISPENSE_ITEM_BEHAVIOR) {
                             idispensebehavior.dispense(pointer, eventStack);
                             return stack;
diff --git a/src/main/java/net/minecraft/core/dispenser/ProjectileDispenseBehavior.java b/src/main/java/net/minecraft/core/dispenser/ProjectileDispenseBehavior.java
index e37d2d29f3ba67cfe28abe4847a3dca07121f0be..a16040fe624b53c713f55c5f302d6e5df5540fd6 100644
--- a/src/main/java/net/minecraft/core/dispenser/ProjectileDispenseBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/ProjectileDispenseBehavior.java
@@ -59,7 +59,7 @@ public class ProjectileDispenseBehavior extends DefaultDispenseItemBehavior {
             shrink = false; // Paper - shrink below
             // Chain to handler for new item
             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
             if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                 idispensebehavior.dispense(pointer, eventStack);
                 return stack;
diff --git a/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
index a024c697a65bbab27408da1d6a75e531d9719b47..c6f6ad961dfad4fe802bc6de922f00691aa0b283 100644
--- a/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
@@ -52,7 +52,7 @@ public class ShearsDispenseItemBehavior extends OptionalDispenseItemBehavior {
         if (!event.getItem().equals(craftItem)) {
             // Chain to handler for new item
             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
             if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                 idispensebehavior.dispense(pointer, eventStack);
                 return stack;
diff --git a/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java b/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java
index cb308808906a8cdb127df8284e106e00553473ca..a71af17d5d587b93e3034a195ece254748be5973 100644
--- a/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java
@@ -48,7 +48,7 @@ public class ShulkerBoxDispenseBehavior extends OptionalDispenseItemBehavior {
             if (!event.getItem().equals(craftItem)) {
                 // Chain to handler for new item
                 ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                 if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                     idispensebehavior.dispense(pointer, eventStack);
                     return stack;
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java b/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java
index 8bc841e4958011edc5a0e4ad55a6eff4d39d4cb3..ede8088d1058848d234a97a39f1e2d4a2ad5d648 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java
@@ -86,9 +86,11 @@ public class MinecartHopper extends AbstractMinecartContainer implements Hopper
     @Override
     public void tick() {
         super.tick();
+        if (!this.level().paperConfig().kiocgConfig.removeAutomationGameplay) { // KioCG
         if (!this.level().isClientSide && this.isAlive() && this.isEnabled() && this.suckInItems()) {
             this.setChanged();
         }
+        } // KioCG
     }
 
     public boolean suckInItems() {
diff --git a/src/main/java/net/minecraft/world/item/ArmorItem.java b/src/main/java/net/minecraft/world/item/ArmorItem.java
index 786e4a8700cb84b16dd9b8892a0d1d5803924d81..e63fc0ce56082501f1767933872b4a3793ce4c0c 100644
--- a/src/main/java/net/minecraft/world/item/ArmorItem.java
+++ b/src/main/java/net/minecraft/world/item/ArmorItem.java
@@ -91,7 +91,7 @@ public class ArmorItem extends Item implements Equipable {
                 shrink = false; // Paper - shrink below
                 // Chain to handler for new item
                 ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                 if (idispensebehavior != DispenseItemBehavior.NOOP && (currentBehavior == null || idispensebehavior != currentBehavior)) { // Paper - fix possible StackOverflowError
                     idispensebehavior.dispense(pointer, eventStack);
                     return true;
diff --git a/src/main/java/net/minecraft/world/item/MinecartItem.java b/src/main/java/net/minecraft/world/item/MinecartItem.java
index d524fcc191cb95d6ec7f12ae7fceeb8077bb08fc..ad66ea7bd76c5ae7b43e63c613b521e88d15e29f 100644
--- a/src/main/java/net/minecraft/world/item/MinecartItem.java
+++ b/src/main/java/net/minecraft/world/item/MinecartItem.java
@@ -85,7 +85,7 @@ public class MinecartItem extends Item {
                 shrink = false; // Paper - shrink below
                 // Chain to handler for new item
                 ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) ((DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
                 if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                     idispensebehavior.dispense(pointer, eventStack);
                     return stack;
diff --git a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
index f6edfea463b3725d3a79aca38825e86dbf82175c..7001fe6db48c819ca9f831af14f5dee6a41eb1b5 100644
--- a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
@@ -47,7 +47,7 @@ public class DispenserBlock extends BaseEntityBlock {
     public static final DirectionProperty FACING = DirectionalBlock.FACING;
     public static final BooleanProperty TRIGGERED = BlockStateProperties.TRIGGERED;
     private static final DefaultDispenseItemBehavior DEFAULT_BEHAVIOR = new DefaultDispenseItemBehavior();
-    public static final Map<Item, DispenseItemBehavior> DISPENSER_REGISTRY = (Map) Util.make(new Object2ObjectOpenHashMap(), (object2objectopenhashmap) -> {
+    private static final Map<Item, DispenseItemBehavior> DISPENSER_REGISTRY = (Map) Util.make(new Object2ObjectOpenHashMap(), (object2objectopenhashmap) -> { // KioCG - public -> private
         object2objectopenhashmap.defaultReturnValue(DispenserBlock.DEFAULT_BEHAVIOR);
     });
     private static final int TRIGGER_DURATION = 4;
@@ -119,7 +119,8 @@ public class DispenserBlock extends BaseEntityBlock {
         }
     }
 
-    protected DispenseItemBehavior getDispenseMethod(Level world, ItemStack stack) {
+    public DispenseItemBehavior getDispenseMethod(Level world, ItemStack stack) { // KioCG - protected -> public
+        if (world.paperConfig().kiocgConfig.removeAutomationGameplay) return DispenserBlock.DEFAULT_BEHAVIOR; // KioCG
         return (DispenseItemBehavior) (!stack.isItemEnabled(world.enabledFeatures()) ? DispenserBlock.DEFAULT_BEHAVIOR : (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(stack.getItem()));
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/DropperBlock.java b/src/main/java/net/minecraft/world/level/block/DropperBlock.java
index b4a742e8c513e458b34c216d1e907b47e3aac292..93f7076c81354cd97154d300d7b8a7e90306bc80 100644
--- a/src/main/java/net/minecraft/world/level/block/DropperBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DropperBlock.java
@@ -40,7 +40,7 @@ public class DropperBlock extends DispenserBlock {
     }
 
     @Override
-    protected DispenseItemBehavior getDispenseMethod(Level world, ItemStack stack) {
+    public DispenseItemBehavior getDispenseMethod(Level world, ItemStack stack) { // KioCG - protected -> public
         return DropperBlock.DISPENSE_BEHAVIOUR;
     }
 
@@ -70,7 +70,7 @@ public class DropperBlock extends DispenserBlock {
                     Container iinventory = HopperBlockEntity.getContainerAt(world, pos.relative(enumdirection));
                     ItemStack itemstack1;
 
-                    if (iinventory == null) {
+                    if (iinventory == null || world.paperConfig().kiocgConfig.removeAutomationGameplay) { // KioCG
                         if (!org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockPreDispenseEvent(world, pos, itemstack, i)) return; // Paper - Add BlockPreDispenseEvent
                         itemstack1 = DropperBlock.DISPENSE_BEHAVIOUR.dispense(sourceblock, itemstack);
                     } else {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index a233a6f702a65f5b2ddc18cedb0e2d74bf0ddb55..d3e96a35d1f64c614bd83d26a77999293bdd7946 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -140,6 +140,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     public static void pushItemsTick(Level world, BlockPos pos, BlockState state, HopperBlockEntity blockEntity) {
+        if (world.paperConfig().kiocgConfig.removeAutomationGameplay) return; // KioCG
         --blockEntity.cooldownTime;
         blockEntity.tickedGameTime = world.getGameTime();
         if (!blockEntity.isOnCooldown()) {
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
index e0c62227b279a5fe0f3868fbf9ce8c78c515a09c..ac75586c33d5064a0710ccde55713ac60fc2cbbf 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
@@ -403,8 +403,10 @@ public class PistonBaseBlock extends DirectionalBlock {
             org.bukkit.event.block.BlockPistonEvent event;
             if (retract) {
                 event = new BlockPistonExtendEvent(bblock, blocks, CraftBlock.notchToBlockFace(enumdirection1));
+                if (world.paperConfig().kiocgConfig.removeAutomationGameplay && moved.size() > 1) event.setCancelled(true); // KioCG
             } else {
                 event = new BlockPistonRetractEvent(bblock, blocks, CraftBlock.notchToBlockFace(enumdirection1));
+                if (world.paperConfig().kiocgConfig.removeAutomationGameplay && moved.size() > 1) event.setCancelled(true); // KioCG
             }
             world.getCraftServer().getPluginManager().callEvent(event);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index dfbe0914ab2771ac632fd064719878ac47559e9f..5bc819cfb86f7ba692439d6df18bb31418517162 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -2163,7 +2163,7 @@ public class CraftEventFactory {
         if (!event.getItem().equals(craftItem)) {
             // Chain to handler for new item
             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-            net.minecraft.core.dispenser.DispenseItemBehavior itemBehavior = net.minecraft.world.level.block.DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+            net.minecraft.core.dispenser.DispenseItemBehavior itemBehavior = ((net.minecraft.world.level.block.DispenserBlock) pointer.state().getBlock()).getDispenseMethod(pointer.level(), eventStack); // KioCG
             if (itemBehavior != net.minecraft.core.dispenser.DispenseItemBehavior.NOOP && itemBehavior != instance) {
                 itemBehavior.dispense(pointer, eventStack);
                 return itemStack;

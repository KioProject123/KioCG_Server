From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Thu, 14 Mar 2024 20:52:54 +0800
Subject: [PATCH] Dont kill my pet


diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index af9a57860a8c41e35b1aabac7a5fc1317b16a63f..0495547f5dcb870962d2d9ec947adfda13d1dc2f 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -425,6 +425,10 @@ public class GlobalConfiguration extends ConfigurationPart {
             public boolean allowUnsafeCommand = true;
             public int fixedCumulativeCost = 4;
         }
+
+        public boolean dontKillMyPet = true;
+        public double petTeleportDistanceSqr = 256.0;
+        public boolean petFollowKeepChunkLoaded = true;
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/server/level/TicketType.java b/src/main/java/net/minecraft/server/level/TicketType.java
index f56e5c0f53f9b52a9247b9be9265b949494fc924..b622a82986efd7a6d7cd5491f3ba2569b37f8dbe 100644
--- a/src/main/java/net/minecraft/server/level/TicketType.java
+++ b/src/main/java/net/minecraft/server/level/TicketType.java
@@ -25,6 +25,7 @@ public class TicketType<T> {
     public static final TicketType<ChunkPos> UNKNOWN = TicketType.create("unknown", Comparator.comparingLong(ChunkPos::toLong), 1);
     public static final TicketType<Unit> PLUGIN = TicketType.create("plugin", (a, b) -> 0); // CraftBukkit
     public static final TicketType<org.bukkit.plugin.Plugin> PLUGIN_TICKET = TicketType.create("plugin_ticket", (plugin1, plugin2) -> plugin1.getClass().getName().compareTo(plugin2.getClass().getName())); // CraftBukkit
+    public static final TicketType<Integer> PET_FOLLOW = TicketType.create("pet_follow", Integer::compareTo, 20 * 3); // KioCG
 
     public static <T> TicketType<T> create(String name, Comparator<T> argumentComparator) {
         return new TicketType<>(name, argumentComparator, 0L);
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 97c09c366cdf5f6f91f059bf71b5a4ebdac2cc7e..e0846fd1ae7fb88a412b126e2aa0e6c8776b21d0 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -2502,7 +2502,15 @@ public abstract class LivingEntity extends Entity implements Attackable {
                 }
                 // CraftBukkit end
                 this.getCombatTracker().recordDamage(damagesource, f);
-                this.setHealth(this.getHealth() - f);
+                // KioCG start
+                float health = this.getHealth() - f;
+                if (health <= 0.0F && originalDamage != Float.MAX_VALUE && !damagesource.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
+                    if (io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.dontKillMyPet && this instanceof TamableAnimal pet && pet.isTame()) {
+                        health = Float.MIN_VALUE;
+                    }
+                }
+                this.setHealth(health);
+                // KioCG end
                 // CraftBukkit start
                 if (!human) {
                     this.setAbsorptionAmount(this.getAbsorptionAmount() - f);
diff --git a/src/main/java/net/minecraft/world/entity/TamableAnimal.java b/src/main/java/net/minecraft/world/entity/TamableAnimal.java
index 45224dc3867892b298b006c17f7f85741fcc96d6..a2b4b2b86d7921ffe81f3b83f894281f7ec74ad0 100644
--- a/src/main/java/net/minecraft/world/entity/TamableAnimal.java
+++ b/src/main/java/net/minecraft/world/entity/TamableAnimal.java
@@ -41,6 +41,7 @@ public abstract class TamableAnimal extends Animal implements OwnableEntity {
     protected static final EntityDataAccessor<Byte> DATA_FLAGS_ID = SynchedEntityData.defineId(TamableAnimal.class, EntityDataSerializers.BYTE);
     protected static final EntityDataAccessor<Optional<UUID>> DATA_OWNERUUID_ID = SynchedEntityData.defineId(TamableAnimal.class, EntityDataSerializers.OPTIONAL_UUID);
     private boolean orderedToSit;
+    public boolean followOwner = true; // KioCG
 
     protected TamableAnimal(EntityType<? extends TamableAnimal> type, Level world) {
         super(type, world);
@@ -61,6 +62,7 @@ public abstract class TamableAnimal extends Animal implements OwnableEntity {
         }
 
         nbt.putBoolean("Sitting", this.orderedToSit);
+        nbt.putBoolean("KioCG.FollowOwner", this.followOwner); // KioCG
     }
 
     @Override
@@ -87,6 +89,7 @@ public abstract class TamableAnimal extends Animal implements OwnableEntity {
 
         this.orderedToSit = nbt.getBoolean("Sitting");
         this.setInSittingPose(this.orderedToSit, false); // Paper - Add EntityToggleSitEvent
+        if (nbt.contains("KioCG.FollowOwner")) this.followOwner = nbt.getBoolean("KioCG.FollowOwner"); // KioCG
     }
 
     @Override
@@ -254,11 +257,59 @@ public abstract class TamableAnimal extends Animal implements OwnableEntity {
         super.die(damageSource);
     }
 
+    // KioCG start
+    public boolean onTheVergeOfDeath() {
+        return io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.dontKillMyPet && this.isTame() && this.getHealth() == Float.MIN_VALUE;
+    }
+
+    @Override
+    public boolean canBeSeenAsEnemy() {
+        return !this.onTheVergeOfDeath() && super.canBeSeenAsEnemy();
+    }
+
+    @Override
+    public boolean hurt(DamageSource source, float amount) {
+        return (amount == Float.MAX_VALUE || !onTheVergeOfDeath()) && super.hurt(source, amount);
+    }
+
+    @Override
+    public void tick() {
+        super.tick();
+        if (this.helpDisplay != null && this.helpDisplay.isRemoved()) {
+            this.helpDisplay = null;
+        }
+    }
+
+    @Nullable protected Display helpDisplay = null;
+
+    public void addHelpDisplay() {
+        if (helpDisplay == null) {
+            final Display.ItemDisplay itemDisplay = this.addRiderDisplay(EntityType.ITEM_DISPLAY, 99, display -> {
+                display.setItemStack(new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.BARRIER));
+                display.setItemTransform(net.minecraft.world.item.ItemDisplayContext.GROUND);
+                display.setBillboardConstraints(Display.BillboardConstraints.VERTICAL);
+                display.setTransformation(new com.mojang.math.Transformation(new org.joml.Vector3f(0.0F, 0.5F, 0.0F), null, null, null));
+            });
+
+            if (itemDisplay != null) {
+                helpDisplay = itemDisplay;
+            }
+        }
+    }
+
+    public void removeHelpDisplay() {
+        if (helpDisplay != null) {
+            helpDisplay.discard();
+        }
+    }
+    // KioCG end
+
     public boolean isOrderedToSit() {
         return this.orderedToSit;
     }
 
     public void setOrderedToSit(boolean sitting) {
+        if (!sitting && onTheVergeOfDeath()) return; // KioCG
         this.orderedToSit = sitting;
     }
 
@@ -274,7 +325,7 @@ public abstract class TamableAnimal extends Animal implements OwnableEntity {
     public boolean shouldTryTeleportToOwner() {
         LivingEntity entityliving = this.getOwner();
 
-        return entityliving != null && this.distanceToSqr((Entity) this.getOwner()) >= 144.0D;
+        return entityliving != null && this.distanceToSqr((Entity) this.getOwner()) >= io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.petTeleportDistanceSqr; // KioCG
     }
 
     private void teleportToAroundBlockPos(BlockPos pos) {
@@ -329,6 +380,7 @@ public abstract class TamableAnimal extends Animal implements OwnableEntity {
     }
 
     public final boolean unableToMoveToOwner() {
+        if (!this.followOwner) return true; // KioCG
         return this.isOrderedToSit() || this.isPassenger() || this.mayBeLeashed() || this.getOwner() != null && this.getOwner().isSpectator();
     }
 
@@ -346,6 +398,13 @@ public abstract class TamableAnimal extends Animal implements OwnableEntity {
             super(TamableAnimal.this, d0);
         }
 
+        // KioCG start
+        @Override
+        public boolean shouldPanic() {
+            return !((TamableAnimal) this.mob).onTheVergeOfDeath() && super.shouldPanic();
+        }
+        // KioCG end
+
         @Override
         public void tick() {
             if (!TamableAnimal.this.unableToMoveToOwner() && TamableAnimal.this.shouldTryTeleportToOwner()) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/StopAttackingIfTargetInvalid.java b/src/main/java/net/minecraft/world/entity/ai/behavior/StopAttackingIfTargetInvalid.java
index 508d4f391fe563453d7bf6782b3082741c358006..fa58ec8288952f7dd546ad979fcff72dd10ed2aa 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/StopAttackingIfTargetInvalid.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/StopAttackingIfTargetInvalid.java
@@ -53,7 +53,7 @@ public class StopAttackingIfTargetInvalid {
                             reason = EntityTargetEvent.TargetReason.TARGET_INVALID;
                         } else if (shouldForgetIfTargetUnreachable && StopAttackingIfTargetInvalid.isTiredOfTryingToReachTarget(entityinsentient, behaviorbuilder_b.tryGet(memoryaccessor1))) {
                             reason = EntityTargetEvent.TargetReason.FORGOT_TARGET;
-                        } else if (!entityliving.isAlive()) {
+                        } else if (!entityliving.isAlive() || entityliving instanceof net.minecraft.world.entity.TamableAnimal tamableAnimal && tamableAnimal.onTheVergeOfDeath()) { // KioCG
                             reason = EntityTargetEvent.TargetReason.TARGET_DIED;
                         } else if (entityliving.level() != entityinsentient.level()) {
                             reason = EntityTargetEvent.TargetReason.TARGET_OTHER_LEVEL;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java
index 15d7be9ed4a973044dd4399db46aaa244730b836..2f98152fdea3349ffe9e15ff6d40011811c36baa 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java
@@ -19,6 +19,7 @@ public class FollowOwnerGoal extends Goal {
     private final float stopDistance;
     private final float startDistance;
     private float oldWaterCost;
+    private int ticketTicks; // KioCG
 
     public FollowOwnerGoal(TamableAnimal tameable, double speed, float minDistance, float maxDistance) {
         this.tamable = tameable;
@@ -40,6 +41,7 @@ public class FollowOwnerGoal extends Goal {
         } else if (this.tamable.unableToMoveToOwner()) {
             return false;
         } else if (this.tamable.distanceToSqr(livingEntity) < (double)(this.startDistance * this.startDistance)) {
+            keepChunkLoaded(); // KioCG
             return false;
         } else {
             this.owner = livingEntity;
@@ -47,6 +49,16 @@ public class FollowOwnerGoal extends Goal {
         }
     }
 
+    // KioCG start
+    private void keepChunkLoaded() {
+        if (!io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.petFollowKeepChunkLoaded) return;
+        if (this.tamable.tickCount >= ticketTicks + 20) {
+            ticketTicks = this.tamable.tickCount;
+            ((net.minecraft.server.level.ServerLevel) this.tamable.level()).getChunkSource().addRegionTicket(net.minecraft.server.level.TicketType.PET_FOLLOW, new net.minecraft.world.level.ChunkPos(this.tamable.blockPosition()), 2, this.tamable.getId()); // KioCG
+        }
+    }
+    // KioCG end
+
     @Override
     public boolean canContinueToUse() {
         return !this.navigation.isDone()
@@ -70,6 +82,7 @@ public class FollowOwnerGoal extends Goal {
 
     @Override
     public void tick() {
+        keepChunkLoaded(); // KioCG
         boolean bl = this.tamable.shouldTryTeleportToOwner();
         if (!bl) {
             if (this.tamable.distanceToSqr(this.owner) <= 16 * 16) this.tamable.getLookControl().setLookAt(this.owner, 10.0F, (float)this.tamable.getMaxHeadXRot()); // Paper - Limit pet look distance
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/MeleeAttackGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/MeleeAttackGoal.java
index d59e0044db03ba30d5bab9a8c126b597b7659015..95696b7a81ea5454f6b571151ab1149c2e784b73 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/MeleeAttackGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/MeleeAttackGoal.java
@@ -39,7 +39,7 @@ public class MeleeAttackGoal extends Goal {
             LivingEntity livingEntity = this.mob.getTarget();
             if (livingEntity == null) {
                 return false;
-            } else if (!livingEntity.isAlive()) {
+            } else if (!livingEntity.isAlive() || livingEntity instanceof net.minecraft.world.entity.TamableAnimal tamableAnimal && tamableAnimal.onTheVergeOfDeath()) { // KioCG
                 return false;
             } else {
                 this.path = this.mob.getNavigation().createPath(livingEntity, 0);
@@ -53,7 +53,7 @@ public class MeleeAttackGoal extends Goal {
         LivingEntity livingEntity = this.mob.getTarget();
         if (livingEntity == null) {
             return false;
-        } else if (!livingEntity.isAlive()) {
+        } else if (!livingEntity.isAlive() || livingEntity instanceof net.minecraft.world.entity.TamableAnimal tamableAnimal && tamableAnimal.onTheVergeOfDeath()) { // KioCG
             return false;
         } else {
             return !this.followingTargetEvenIfNotSeen
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java
index 5633c5ee29938c0b61121c921cb82342d01329e3..199f939bb6f01370fc8466b12f6c73cc821b2699 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RangedCrossbowAttackGoal.java
@@ -46,7 +46,7 @@ public class RangedCrossbowAttackGoal<T extends Monster & RangedAttackMob & Cros
     }
 
     private boolean isValidTarget() {
-        return this.mob.getTarget() != null && this.mob.getTarget().isAlive();
+        return this.mob.getTarget() != null && this.mob.getTarget().isAlive() && (!(this.mob.getTarget() instanceof net.minecraft.world.entity.TamableAnimal tamableAnimal) || !tamableAnimal.onTheVergeOfDeath()); // KioCG
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index 797ae2cf1978e224ae5b07ffb889b1786327bf75..12c8c5dad4edcf0429f5f2d6c583878fee8a0865 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -269,6 +269,16 @@ public class Cat extends TamableAnimal implements VariantHolder<Holder<CatVarian
         }
 
         this.handleLieDown();
+        // KioCG start
+        if (this.onTheVergeOfDeath()) {
+            addHelpDisplay();
+            if (!this.isOrderedToSit()) {
+                this.setOrderedToSit(true);
+            }
+        } else {
+            removeHelpDisplay();
+        }
+        // KioCG end
     }
 
     private void handleLieDown() {
@@ -409,6 +419,18 @@ public class Cat extends TamableAnimal implements VariantHolder<Holder<CatVarian
                     }
 
                     return InteractionResult.sidedSuccess(this.level().isClientSide());
+                    // KioCG start
+                } else if (itemstack.is(net.minecraft.world.item.Items.POISONOUS_POTATO)) {
+                    this.playSound(SoundEvents.CAT_EAT, 1.0F, 1.0F);
+
+                    itemstack.consume(1, player);
+                    this.addEffect(new net.minecraft.world.effect.MobEffectInstance(net.minecraft.world.effect.MobEffects.POISON, 900), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.FOOD); // CraftBukkit
+                    if (player.isCreative() || !this.isInvulnerable()) {
+                        this.hurt(this.damageSources().playerAttack(player), Float.MAX_VALUE);
+                    }
+
+                    return InteractionResult.sidedSuccess(this.level().isClientSide());
+                    // KioCG end
                 }
 
                 enuminteractionresult = super.mobInteract(player, hand);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Parrot.java b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
index b87dfc9e103e78a3a576c8ef2d8bc455c75278d7..32e5bdf96439b4e8581e9085251c328c8fa684db 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Parrot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
@@ -201,6 +201,21 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
         this.calculateFlapping();
     }
 
+    // KioCG start
+    @Override
+    public void tick() {
+        super.tick();
+        if (this.onTheVergeOfDeath()) {
+            addHelpDisplay();
+            if (!this.isOrderedToSit()) {
+                this.setOrderedToSit(true);
+            }
+        } else {
+            removeHelpDisplay();
+        }
+    }
+    // KioCG end
+
     @Override
     public void setRecordPlayingNearby(BlockPos songPosition, boolean playing) {
         this.jukebox = songPosition;
@@ -271,7 +286,7 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
             }
 
             return InteractionResult.sidedSuccess(this.level().isClientSide);
-        } else if (!itemstack.is(ItemTags.PARROT_POISONOUS_FOOD)) {
+        } else if (!itemstack.is(ItemTags.PARROT_POISONOUS_FOOD) && !itemstack.is(net.minecraft.world.item.Items.POISONOUS_POTATO)) { // KioCG
             if (!this.isFlying() && this.isTame() && this.isOwnedBy(player)) {
                 if (!this.level().isClientSide) {
                     this.setOrderedToSit(!this.isOrderedToSit());
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index 0c51106537876f704e382a9afbcd2d7e083cb480..d33288338237d999f53cf94adf841e52d306714b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -335,6 +335,18 @@ public class Wolf extends TamableAnimal implements NeutralMob, VariantHolder<Hol
                 }
             }
 
+            // KioCG start
+            if (this.onTheVergeOfDeath()) {
+                addHelpDisplay();
+                if (!this.isOrderedToSit()) {
+                    this.navigation.stop();
+                    this.setTarget((LivingEntity) null);
+                    this.setOrderedToSit(true);
+                }
+            } else {
+                removeHelpDisplay();
+            }
+            // KioCG end
         }
     }
 
@@ -470,6 +482,16 @@ public class Wolf extends TamableAnimal implements NeutralMob, VariantHolder<Hol
 
                 this.heal(2.0F * f, EntityRegainHealthEvent.RegainReason.EATING); // CraftBukkit
                 return InteractionResult.sidedSuccess(this.level().isClientSide());
+                // KioCG start
+            } else if (itemstack.is(Items.POISONOUS_POTATO)) {
+                itemstack.consume(1, player);
+                this.addEffect(new net.minecraft.world.effect.MobEffectInstance(net.minecraft.world.effect.MobEffects.POISON, 900), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.FOOD); // CraftBukkit
+                if (player.isCreative() || !this.isInvulnerable()) {
+                    this.hurt(this.damageSources().playerAttack(player), Float.MAX_VALUE);
+                }
+
+                return InteractionResult.sidedSuccess(this.level().isClientSide());
+                // KioCG end
             } else {
                 if (item instanceof DyeItem) {
                     DyeItem itemdye = (DyeItem) item;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
index cedb8e67e208cdf954d052a4f0a100c1c07a962b..22b6bc3aedc79ff8f846009bb562f7c2dd3844ff 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
@@ -81,6 +81,16 @@ public class CraftTameableAnimal extends CraftAnimals implements Tameable, Creat
         this.getHandle().setOrderedToSit(sitting);
     }
 
+    // KioCG start
+    public boolean isFollowOwner() {
+        return this.getHandle().followOwner;
+    }
+
+    public void setFollowOwner(boolean followOwner) {
+        this.getHandle().followOwner = followOwner;
+    }
+    // KioCG end
+
     @Override
     public String toString() {
         return this.getClass().getSimpleName() + "{owner=" + this.getOwner() + ",tamed=" + this.isTamed() + "}";

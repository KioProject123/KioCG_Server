From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Sun, 28 Jul 2024 22:41:58 +0800
Subject: [PATCH] PlayerItemUseEvent


diff --git a/src/main/java/com/kiocg/event/player/PlayerItemUseEvent.java b/src/main/java/com/kiocg/event/player/PlayerItemUseEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..8abdf15ff3ae517ee77c96e94edd8470e4399086
--- /dev/null
+++ b/src/main/java/com/kiocg/event/player/PlayerItemUseEvent.java
@@ -0,0 +1,218 @@
+package com.kiocg.event.player;
+
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.event.player.PlayerInteractEvent;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * 当玩家尝试使用物品时触发.
+ * <p>
+ * 如果物品使用在方块上, 并且方块消耗了此次操作(例如容器开启), 则不会触发本事件.
+ * 方块的行为可能会消耗物品, 这通常是那些特定于物品的方块. 例如唱片机会消耗唱片,
+ * 不同于打火石可在几乎任何方块上点火, 前者不会触发本事件而后者会.
+ * <p>
+ * {@link PlayerInteractEvent}的执行结果不影响本事件的触发, 使用{@link #useInteractedBlock()}和
+ * {@link #useItemInHand()}获取其执行后的结果.
+ */
+public class PlayerItemUseEvent extends PlayerEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    protected boolean cancel;
+    protected ItemStack item;
+    protected Action action;
+    protected Block blockClicked;
+    protected BlockFace blockFace;
+    private Result useClickedBlock;
+    private Result useItemInHand;
+    private EquipmentSlot hand;
+    private Vector clickedPosistion;
+
+    public PlayerItemUseEvent(@NotNull final Player who, @NotNull final Action action, @NotNull final ItemStack item, @Nullable final Block clickedBlock, @NotNull final BlockFace clickedFace, @Nullable final PlayerInteractEvent interactEvent) {
+        this(who, action, item, clickedBlock, clickedFace, EquipmentSlot.HAND, interactEvent);
+    }
+
+    public PlayerItemUseEvent(@NotNull final Player who, @NotNull final Action action, @NotNull final ItemStack item, @Nullable final Block clickedBlock, @NotNull final BlockFace clickedFace, @Nullable final EquipmentSlot hand, @Nullable final PlayerInteractEvent interactEvent) {
+        this(who, action, item, clickedBlock, clickedFace, hand, null, interactEvent);
+    }
+
+    public PlayerItemUseEvent(@NotNull final Player who, @NotNull final Action action, @NotNull final ItemStack item, @Nullable final Block clickedBlock, @NotNull final BlockFace clickedFace, @Nullable final EquipmentSlot hand, @Nullable final Vector clickedPosition, @Nullable final PlayerInteractEvent interactEvent) {
+        super(who);
+        this.action = action;
+        this.item = item;
+        this.blockClicked = clickedBlock;
+        this.blockFace = clickedFace;
+        this.hand = hand;
+        this.clickedPosistion = clickedPosition;
+
+        useItemInHand = interactEvent != null ? interactEvent.useItemInHand() : Result.DEFAULT;
+        useClickedBlock = interactEvent != null ? interactEvent.useInteractedBlock() : Result.DEFAULT;
+    }
+
+    /**
+     * Returns the action type
+     *
+     * @return Action returns the type of interaction
+     */
+    @NotNull
+    public Action getAction() {
+        return action;
+    }
+
+    /**
+     * Returns the item in hand represented by this event
+     *
+     * @return ItemStack the item used
+     */
+    @NotNull
+    public ItemStack getItem() {
+        return this.item;
+    }
+
+    /**
+     * Convenience method. Returns the material of the item represented by
+     * this event
+     *
+     * @return Material the material of the item used
+     */
+    @NotNull
+    public Material getMaterial() {
+        return item.getType();
+    }
+
+    /**
+     * Check if this event involved a block
+     *
+     * @return boolean true if it did
+     */
+    public boolean hasBlock() {
+        return this.blockClicked != null;
+    }
+
+    /**
+     * Convenience method to inform the user whether this was a block
+     * placement event.
+     *
+     * @return boolean true if the item in hand was a block
+     */
+    public boolean isBlockInHand() {
+        return item.getType().isBlock();
+    }
+
+    /**
+     * Returns the clicked block
+     *
+     * @return Block returns the block clicked with this item.
+     */
+    @Nullable
+    public Block getClickedBlock() {
+        return blockClicked;
+    }
+
+    /**
+     * Returns the face of the block that was clicked
+     *
+     * @return BlockFace returns the face of the block that was clicked
+     */
+    @NotNull
+    public BlockFace getBlockFace() {
+        return blockFace;
+    }
+
+    /**
+     * This controls the action to take with the block (if any) that was
+     * clicked on. This event gets processed for all blocks, but most don't
+     * have a default action
+     *
+     * @return the action to take with the interacted block
+     */
+    @NotNull
+    public Result useInteractedBlock() {
+        return useClickedBlock;
+    }
+
+    /**
+     * This controls the action to take with the item the player is holding.
+     * This includes both blocks and items (such as flint and steel or
+     * records). When this is set to default, it will be allowed if no action
+     * is taken on the interacted block.
+     *
+     * @return the action to take with the item in hand
+     */
+    @NotNull
+    public Result useItemInHand() {
+        return useItemInHand;
+    }
+
+    /**
+     * The hand used to perform this interaction. May be null in the case of
+     * {@link Action#PHYSICAL}.
+     *
+     * @return the hand used to interact. May be null.
+     */
+    @Nullable
+    public EquipmentSlot getHand() {
+        return hand;
+    }
+
+    /**
+     * Gets the exact position on the block the player interacted with, this will
+     * be null outside of {@link Action#RIGHT_CLICK_BLOCK}.
+     * <p>
+     * All vector components are between 0.0 and 1.0 inclusive.
+     *
+     * @deprecated misleading, use {@link #getInteractionPoint()}
+     * @return the clicked position. May be null.
+     */
+    @Nullable
+    @Deprecated // Paper
+    public Vector getClickedPosition() {
+        return clickedPosistion;
+    }
+
+    // Paper start
+    /**
+     * The exact point at which the interaction occurred. May be null.
+     *
+     * @return the exact interaction point. May be null.
+     */
+    @Nullable
+    public Location getInteractionPoint() {
+        if (this.blockClicked == null || this.clickedPosistion == null) {
+            return null;
+        }
+        return this.blockClicked.getLocation().add(this.clickedPosistion);
+    }
+    // Paper end
+
+    @Override
+    public boolean isCancelled() {
+        return cancel;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancel = cancel;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
